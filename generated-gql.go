package main

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AccountUser includes the GraphQL fields of account_user_role requested by the fragment AccountUser.
// The GraphQL type's documentation follows.
//
// columns and relationships of "account_user_role"
type AccountUser struct {
	Id         int64  `json:"id"`
	Role       string `json:"role"`
	User_id    int64  `json:"user_id"`
	Client_id  int64  `json:"client_id"`
	Account_id int64  `json:"account_id"`
	// An object relationship
	User AccountUserUserUsers `json:"user"`
}

// AccountUserUserUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type AccountUserUserUsers struct {
	Id        int64  `json:"id"`
	Phone     string `json:"phone"`
	Banned    bool   `json:"banned"`
	UserEmail `json:"-"`
}

func (v *AccountUserUserUsers) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountUserUserUsers
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountUserUserUsers = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserEmail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountUserUserUsers struct {
	Id int64 `json:"id"`

	Phone string `json:"phone"`

	Banned bool `json:"banned"`

	Email string `json:"email"`

	Full_name string `json:"full_name"`
}

func (v *AccountUserUserUsers) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountUserUserUsers) __premarshalJSON() (*__premarshalAccountUserUserUsers, error) {
	var retval __premarshalAccountUserUserUsers

	retval.Id = v.Id
	retval.Phone = v.Phone
	retval.Banned = v.Banned
	retval.Email = v.UserEmail.Email
	retval.Full_name = v.UserEmail.Full_name
	return &retval, nil
}

// input type for inserting array relation for remote table "account"
type Account_arr_rel_insert_input struct {
	Data []Account_insert_input `json:"data"`
	// on conflict condition
	On_conflict Account_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
type Account_bool_exp struct {
	And                  []Account_bool_exp            `json:"_and"`
	Not                  *Account_bool_exp             `json:"_not"`
	Or                   []Account_bool_exp            `json:"_or"`
	Account_level        String_comparison_exp         `json:"account_level"`
	Account_user_role    *Account_user_role_bool_exp   `json:"account_user_role"`
	Account_users        *Account_user_bool_exp        `json:"account_users"`
	Affiliate_code       String_comparison_exp         `json:"affiliate_code"`
	Billing_infos        *Billing_info_bool_exp        `json:"billing_infos"`
	Client               *Client_bool_exp              `json:"client"`
	Client_id            Bigint_comparison_exp         `json:"client_id"`
	Clients              *Client_bool_exp              `json:"clients"`
	Created              Timestamptz_comparison_exp    `json:"created"`
	Databases            *Database_bool_exp            `json:"databases"`
	Events               *Event_bool_exp               `json:"events"`
	Expiration_date      Timestamptz_comparison_exp    `json:"expiration_date"`
	Id                   Bigint_comparison_exp         `json:"id"`
	Modified             Timestamptz_comparison_exp    `json:"modified"`
	Owner                *Users_bool_exp               `json:"owner"`
	Owner_id             Bigint_comparison_exp         `json:"owner_id"`
	Project_categories   *Project_category_bool_exp    `json:"project_categories"`
	Settings             *Settings_bool_exp            `json:"settings"`
	Signup_code          String_comparison_exp         `json:"signup_code"`
	Source               String_comparison_exp         `json:"source"`
	Start_date           Timestamptz_comparison_exp    `json:"start_date"`
	Subdomain            String_comparison_exp         `json:"subdomain"`
	Task_categories      *Task_category_bool_exp       `json:"task_categories"`
	Time_entry_locations *Time_entry_location_bool_exp `json:"time_entry_locations"`
	User                 *Users_bool_exp               `json:"user"`
}

// unique or primary key constraints on table "account"
type Account_constraint string

const (
	// unique or primary key constraint
	Account_constraintIdx1942896AccountSubdomainIdx Account_constraint = "idx_1942896_account_subdomain_idx"
	// unique or primary key constraint
	Account_constraintIdx1942896Primary Account_constraint = "idx_1942896_primary"
)

// input type for inserting data into table "account"
type Account_insert_input struct {
	Account_level        string                                   `json:"account_level"`
	Account_user_role    Account_user_role_arr_rel_insert_input   `json:"account_user_role"`
	Account_users        Account_user_arr_rel_insert_input        `json:"account_users"`
	Affiliate_code       string                                   `json:"affiliate_code"`
	Billing_infos        Billing_info_arr_rel_insert_input        `json:"billing_infos"`
	Client               *Client_obj_rel_insert_input             `json:"client"`
	Client_id            int64                                    `json:"client_id"`
	Clients              Client_arr_rel_insert_input              `json:"clients"`
	Created              time.Time                                `json:"created"`
	Databases            Database_arr_rel_insert_input            `json:"databases"`
	Events               Event_arr_rel_insert_input               `json:"events"`
	Expiration_date      time.Time                                `json:"expiration_date"`
	Id                   int64                                    `json:"id"`
	Modified             time.Time                                `json:"modified"`
	Owner                *Users_obj_rel_insert_input              `json:"owner"`
	Owner_id             int64                                    `json:"owner_id"`
	Project_categories   Project_category_arr_rel_insert_input    `json:"project_categories"`
	Settings             Settings_arr_rel_insert_input            `json:"settings"`
	Signup_code          string                                   `json:"signup_code"`
	Source               string                                   `json:"source"`
	Start_date           time.Time                                `json:"start_date"`
	Subdomain            string                                   `json:"subdomain"`
	Task_categories      Task_category_arr_rel_insert_input       `json:"task_categories"`
	Time_entry_locations Time_entry_location_arr_rel_insert_input `json:"time_entry_locations"`
	User                 Users_obj_rel_insert_input               `json:"user"`
}

// input type for inserting object relation for remote table "account"
type Account_obj_rel_insert_input struct {
	Data Account_insert_input `json:"data"`
	// on conflict condition
	On_conflict Account_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "account"
type Account_on_conflict struct {
	Constraint     *Account_constraint     `json:"constraint"`
	Update_columns []Account_update_column `json:"update_columns"`
	Where          *Account_bool_exp       `json:"where"`
}

// update columns of table "account"
type Account_update_column string

const (
	// column name
	Account_update_columnAccountLevel Account_update_column = "account_level"
	// column name
	Account_update_columnAffiliateCode Account_update_column = "affiliate_code"
	// column name
	Account_update_columnClientId Account_update_column = "client_id"
	// column name
	Account_update_columnCreated Account_update_column = "created"
	// column name
	Account_update_columnExpirationDate Account_update_column = "expiration_date"
	// column name
	Account_update_columnId Account_update_column = "id"
	// column name
	Account_update_columnModified Account_update_column = "modified"
	// column name
	Account_update_columnOwnerId Account_update_column = "owner_id"
	// column name
	Account_update_columnSignupCode Account_update_column = "signup_code"
	// column name
	Account_update_columnSource Account_update_column = "source"
	// column name
	Account_update_columnStartDate Account_update_column = "start_date"
	// column name
	Account_update_columnSubdomain Account_update_column = "subdomain"
)

// input type for inserting array relation for remote table "account_user"
type Account_user_arr_rel_insert_input struct {
	Data []Account_user_insert_input `json:"data"`
	// on conflict condition
	On_conflict Account_user_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "account_user". All fields are combined with a logical 'AND'.
type Account_user_bool_exp struct {
	And        []Account_user_bool_exp `json:"_and"`
	Not        *Account_user_bool_exp  `json:"_not"`
	Or         []Account_user_bool_exp `json:"_or"`
	Account    *Account_bool_exp       `json:"account"`
	Account_id Bigint_comparison_exp   `json:"account_id"`
	Client     *Client_bool_exp        `json:"client"`
	Client_id  Bigint_comparison_exp   `json:"client_id"`
	Id         Bigint_comparison_exp   `json:"id"`
	Role       String_comparison_exp   `json:"role"`
	User       *Users_bool_exp         `json:"user"`
	User_id    Bigint_comparison_exp   `json:"user_id"`
}

// unique or primary key constraints on table "account_user"
type Account_user_constraint string

const (
	// unique or primary key constraint
	Account_user_constraintIdx1942906AccountUserIdx Account_user_constraint = "idx_1942906_account_user_idx"
	// unique or primary key constraint
	Account_user_constraintIdx1942906Primary Account_user_constraint = "idx_1942906_primary"
)

// input type for inserting data into table "account_user"
type Account_user_insert_input struct {
	Account    Account_obj_rel_insert_input `json:"account"`
	Account_id int64                        `json:"account_id"`
	Client     Client_obj_rel_insert_input  `json:"client"`
	Client_id  int64                        `json:"client_id"`
	Id         int64                        `json:"id"`
	Role       string                       `json:"role"`
	User       Users_obj_rel_insert_input   `json:"user"`
	User_id    int64                        `json:"user_id"`
}

// on conflict condition type for table "account_user"
type Account_user_on_conflict struct {
	Constraint     Account_user_constraint      `json:"constraint"`
	Update_columns []Account_user_update_column `json:"update_columns"`
	Where          Account_user_bool_exp        `json:"where"`
}

// input type for inserting array relation for remote table "account_user_role"
type Account_user_role_arr_rel_insert_input struct {
	Data []Account_user_role_insert_input `json:"data"`
}

// Boolean expression to filter rows from the table "account_user_role". All fields are combined with a logical 'AND'.
type Account_user_role_bool_exp struct {
	And        []Account_user_role_bool_exp `json:"_and"`
	Not        *Account_user_role_bool_exp  `json:"_not"`
	Or         []Account_user_role_bool_exp `json:"_or"`
	Account    Account_bool_exp             `json:"account"`
	Account_id Bigint_comparison_exp        `json:"account_id"`
	Client     Client_bool_exp              `json:"client"`
	Client_id  Bigint_comparison_exp        `json:"client_id"`
	Id         Bigint_comparison_exp        `json:"id"`
	Role       String_comparison_exp        `json:"role"`
	User       Users_bool_exp               `json:"user"`
	User_id    Bigint_comparison_exp        `json:"user_id"`
}

// input type for inserting data into table "account_user_role"
type Account_user_role_insert_input struct {
	Account    Account_obj_rel_insert_input `json:"account"`
	Account_id int64                        `json:"account_id"`
	Client     Client_obj_rel_insert_input  `json:"client"`
	Client_id  int64                        `json:"client_id"`
	Id         int64                        `json:"id"`
	Role       string                       `json:"role"`
	User       Users_obj_rel_insert_input   `json:"user"`
	User_id    int64                        `json:"user_id"`
}

// update columns of table "account_user"
type Account_user_update_column string

const (
	// column name
	Account_user_update_columnAccountId Account_user_update_column = "account_id"
	// column name
	Account_user_update_columnClientId Account_user_update_column = "client_id"
	// column name
	Account_user_update_columnId Account_user_update_column = "id"
	// column name
	Account_user_update_columnRole Account_user_update_column = "role"
	// column name
	Account_user_update_columnUserId Account_user_update_column = "user_id"
)

// input type for inserting array relation for remote table "availability"
type Availability_arr_rel_insert_input struct {
	Data []Availability_insert_input `json:"data"`
	// on conflict condition
	On_conflict Availability_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "availability". All fields are combined with a logical 'AND'.
type Availability_bool_exp struct {
	And         []Availability_bool_exp    `json:"_and"`
	Not         *Availability_bool_exp     `json:"_not"`
	Or          []Availability_bool_exp    `json:"_or"`
	Hours       Float8_comparison_exp      `json:"hours"`
	Id          Bigint_comparison_exp      `json:"id"`
	Target_date Timestamptz_comparison_exp `json:"target_date"`
	User        *Users_bool_exp            `json:"user"`
	User_id     Bigint_comparison_exp      `json:"user_id"`
}

// unique or primary key constraints on table "availability"
type Availability_constraint string

const (
	// unique or primary key constraint
	Availability_constraintIdx1942915Primary Availability_constraint = "idx_1942915_primary"
)

// input type for inserting data into table "availability"
type Availability_insert_input struct {
	Hours       float32                    `json:"hours"`
	Id          int64                      `json:"id"`
	Target_date time.Time                  `json:"target_date"`
	User        Users_obj_rel_insert_input `json:"user"`
	User_id     int64                      `json:"user_id"`
}

// on conflict condition type for table "availability"
type Availability_on_conflict struct {
	Constraint     Availability_constraint      `json:"constraint"`
	Update_columns []Availability_update_column `json:"update_columns"`
	Where          Availability_bool_exp        `json:"where"`
}

// update columns of table "availability"
type Availability_update_column string

const (
	// column name
	Availability_update_columnHours Availability_update_column = "hours"
	// column name
	Availability_update_columnId Availability_update_column = "id"
	// column name
	Availability_update_columnTargetDate Availability_update_column = "target_date"
	// column name
	Availability_update_columnUserId Availability_update_column = "user_id"
)

// Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
type Bigint_comparison_exp struct {
	Eq      int64   `json:"_eq"`
	Gt      int64   `json:"_gt"`
	Gte     int64   `json:"_gte"`
	In      []int64 `json:"_in"`
	Is_null bool    `json:"_is_null"`
	Lt      int64   `json:"_lt"`
	Lte     int64   `json:"_lte"`
	Neq     int64   `json:"_neq"`
	Nin     []int64 `json:"_nin"`
}

// input type for inserting array relation for remote table "billing_info"
type Billing_info_arr_rel_insert_input struct {
	Data []Billing_info_insert_input `json:"data"`
	// on conflict condition
	On_conflict Billing_info_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "billing_info". All fields are combined with a logical 'AND'.
type Billing_info_bool_exp struct {
	And         []Billing_info_bool_exp `json:"_and"`
	Not         *Billing_info_bool_exp  `json:"_not"`
	Or          []Billing_info_bool_exp `json:"_or"`
	Account     Account_bool_exp        `json:"account"`
	Account_id  Bigint_comparison_exp   `json:"account_id"`
	Address     String_comparison_exp   `json:"address"`
	Cardholder  String_comparison_exp   `json:"cardholder"`
	City        String_comparison_exp   `json:"city"`
	Client_ref  String_comparison_exp   `json:"client_ref"`
	Country     String_comparison_exp   `json:"country"`
	Coupon_code String_comparison_exp   `json:"coupon_code"`
	Exp_month   String_comparison_exp   `json:"exp_month"`
	Exp_year    String_comparison_exp   `json:"exp_year"`
	Id          Bigint_comparison_exp   `json:"id"`
	Postalcode  String_comparison_exp   `json:"postalcode"`
	State       String_comparison_exp   `json:"state"`
	Trans_ref   String_comparison_exp   `json:"trans_ref"`
}

// unique or primary key constraints on table "billing_info"
type Billing_info_constraint string

const (
	// unique or primary key constraint
	Billing_info_constraintIdx1942921Primary Billing_info_constraint = "idx_1942921_primary"
)

// input type for inserting data into table "billing_info"
type Billing_info_insert_input struct {
	Account     Account_obj_rel_insert_input `json:"account"`
	Account_id  int64                        `json:"account_id"`
	Address     string                       `json:"address"`
	Cardholder  string                       `json:"cardholder"`
	City        string                       `json:"city"`
	Client_ref  string                       `json:"client_ref"`
	Country     string                       `json:"country"`
	Coupon_code string                       `json:"coupon_code"`
	Exp_month   string                       `json:"exp_month"`
	Exp_year    string                       `json:"exp_year"`
	Id          int64                        `json:"id"`
	Postalcode  string                       `json:"postalcode"`
	State       string                       `json:"state"`
	Trans_ref   string                       `json:"trans_ref"`
}

// on conflict condition type for table "billing_info"
type Billing_info_on_conflict struct {
	Constraint     Billing_info_constraint      `json:"constraint"`
	Update_columns []Billing_info_update_column `json:"update_columns"`
	Where          Billing_info_bool_exp        `json:"where"`
}

// update columns of table "billing_info"
type Billing_info_update_column string

const (
	// column name
	Billing_info_update_columnAccountId Billing_info_update_column = "account_id"
	// column name
	Billing_info_update_columnAddress Billing_info_update_column = "address"
	// column name
	Billing_info_update_columnCardholder Billing_info_update_column = "cardholder"
	// column name
	Billing_info_update_columnCity Billing_info_update_column = "city"
	// column name
	Billing_info_update_columnClientRef Billing_info_update_column = "client_ref"
	// column name
	Billing_info_update_columnCountry Billing_info_update_column = "country"
	// column name
	Billing_info_update_columnCouponCode Billing_info_update_column = "coupon_code"
	// column name
	Billing_info_update_columnExpMonth Billing_info_update_column = "exp_month"
	// column name
	Billing_info_update_columnExpYear Billing_info_update_column = "exp_year"
	// column name
	Billing_info_update_columnId Billing_info_update_column = "id"
	// column name
	Billing_info_update_columnPostalcode Billing_info_update_column = "postalcode"
	// column name
	Billing_info_update_columnState Billing_info_update_column = "state"
	// column name
	Billing_info_update_columnTransRef Billing_info_update_column = "trans_ref"
)

// Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
type Boolean_comparison_exp struct {
	Eq      bool   `json:"_eq"`
	Gt      bool   `json:"_gt"`
	Gte     bool   `json:"_gte"`
	In      []bool `json:"_in"`
	Is_null bool   `json:"_is_null"`
	Lt      bool   `json:"_lt"`
	Lte     bool   `json:"_lte"`
	Neq     bool   `json:"_neq"`
	Nin     []bool `json:"_nin"`
}

// input type for inserting array relation for remote table "client"
type Client_arr_rel_insert_input struct {
	Data []Client_insert_input `json:"data"`
	// on conflict condition
	On_conflict Client_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "client". All fields are combined with a logical 'AND'.
type Client_bool_exp struct {
	And            []Client_bool_exp              `json:"_and"`
	Not            *Client_bool_exp               `json:"_not"`
	Or             []Client_bool_exp              `json:"_or"`
	Account        *Account_bool_exp              `json:"account"`
	Account_id     Bigint_comparison_exp          `json:"account_id"`
	Account_users  *Account_user_bool_exp         `json:"account_users"`
	Accounts       *Account_bool_exp              `json:"accounts"`
	Address        String_comparison_exp          `json:"address"`
	Address2       String_comparison_exp          `json:"address2"`
	Allowed_users  User_client_access_bool_exp    `json:"allowed_users"`
	City           String_comparison_exp          `json:"city"`
	Client_type    String_comparison_exp          `json:"client_type"`
	Country        String_comparison_exp          `json:"country"`
	Created        Timestamptz_comparison_exp     `json:"created"`
	Databases      *Database_bool_exp             `json:"databases"`
	Events         *Event_bool_exp                `json:"events"`
	Fax            String_comparison_exp          `json:"fax"`
	Hourly_rate    Float8_comparison_exp          `json:"hourly_rate"`
	Id             Bigint_comparison_exp          `json:"id"`
	Lowercase_name String_comparison_exp          `json:"lowercase_name"`
	Modified       Timestamptz_comparison_exp     `json:"modified"`
	Name           String_comparison_exp          `json:"name"`
	Notes          String_comparison_exp          `json:"notes"`
	Notify_options String_comparison_exp          `json:"notify_options"`
	Phone          String_comparison_exp          `json:"phone"`
	Projects       *Project_bool_exp              `json:"projects"`
	Retainer_end   Timestamptz_comparison_exp     `json:"retainer_end"`
	Retainer_hours Float8_comparison_exp          `json:"retainer_hours"`
	Retainer_start Timestamptz_comparison_exp     `json:"retainer_start"`
	State          String_comparison_exp          `json:"state"`
	Status         String_comparison_exp          `json:"status"`
	Time_recorded  *Client_time_recorded_bool_exp `json:"time_recorded"`
	Website        String_comparison_exp          `json:"website"`
	Zipcode        String_comparison_exp          `json:"zipcode"`
}

// unique or primary key constraints on table "client"
type Client_constraint string

const (
	// unique or primary key constraint
	Client_constraintIdx1942930Primary Client_constraint = "idx_1942930_primary"
)

// input type for inserting data into table "client"
type Client_insert_input struct {
	Account        *Account_obj_rel_insert_input              `json:"account"`
	Account_id     int64                                      `json:"account_id"`
	Account_users  Account_user_arr_rel_insert_input          `json:"account_users"`
	Accounts       Account_arr_rel_insert_input               `json:"accounts"`
	Address        string                                     `json:"address"`
	Address2       string                                     `json:"address2"`
	Allowed_users  User_client_access_obj_rel_insert_input    `json:"allowed_users"`
	City           string                                     `json:"city"`
	Client_type    string                                     `json:"client_type"`
	Country        string                                     `json:"country"`
	Created        time.Time                                  `json:"created"`
	Databases      Database_arr_rel_insert_input              `json:"databases"`
	Events         Event_arr_rel_insert_input                 `json:"events"`
	Fax            string                                     `json:"fax"`
	Hourly_rate    float32                                    `json:"hourly_rate"`
	Id             int64                                      `json:"id"`
	Lowercase_name string                                     `json:"lowercase_name"`
	Modified       time.Time                                  `json:"modified"`
	Name           string                                     `json:"name"`
	Notes          string                                     `json:"notes"`
	Notify_options string                                     `json:"notify_options"`
	Phone          string                                     `json:"phone"`
	Projects       Project_arr_rel_insert_input               `json:"projects"`
	Retainer_end   time.Time                                  `json:"retainer_end"`
	Retainer_hours float32                                    `json:"retainer_hours"`
	Retainer_start time.Time                                  `json:"retainer_start"`
	State          string                                     `json:"state"`
	Status         string                                     `json:"status"`
	Time_recorded  *Client_time_recorded_obj_rel_insert_input `json:"time_recorded"`
	Website        string                                     `json:"website"`
	Zipcode        string                                     `json:"zipcode"`
}

// input type for inserting object relation for remote table "client"
type Client_obj_rel_insert_input struct {
	Data Client_insert_input `json:"data"`
	// on conflict condition
	On_conflict Client_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "client"
type Client_on_conflict struct {
	Constraint     Client_constraint      `json:"constraint"`
	Update_columns []Client_update_column `json:"update_columns"`
	Where          Client_bool_exp        `json:"where"`
}

// Boolean expression to filter rows from the table "client_time_recorded". All fields are combined with a logical 'AND'.
type Client_time_recorded_bool_exp struct {
	And          []Client_time_recorded_bool_exp `json:"_and"`
	Not          *Client_time_recorded_bool_exp  `json:"_not"`
	Or           []Client_time_recorded_bool_exp `json:"_or"`
	Client       Client_bool_exp                 `json:"client"`
	Client_id    Bigint_comparison_exp           `json:"client_id"`
	Hours_worked Float8_comparison_exp           `json:"hours_worked"`
}

// input type for inserting data into table "client_time_recorded"
type Client_time_recorded_insert_input struct {
	Client       Client_obj_rel_insert_input `json:"client"`
	Client_id    int64                       `json:"client_id"`
	Hours_worked float32                     `json:"hours_worked"`
}

// input type for inserting object relation for remote table "client_time_recorded"
type Client_time_recorded_obj_rel_insert_input struct {
	Data Client_time_recorded_insert_input `json:"data"`
}

// update columns of table "client"
type Client_update_column string

const (
	// column name
	Client_update_columnAccountId Client_update_column = "account_id"
	// column name
	Client_update_columnAddress Client_update_column = "address"
	// column name
	Client_update_columnAddress2 Client_update_column = "address2"
	// column name
	Client_update_columnCity Client_update_column = "city"
	// column name
	Client_update_columnClientType Client_update_column = "client_type"
	// column name
	Client_update_columnCountry Client_update_column = "country"
	// column name
	Client_update_columnCreated Client_update_column = "created"
	// column name
	Client_update_columnFax Client_update_column = "fax"
	// column name
	Client_update_columnHourlyRate Client_update_column = "hourly_rate"
	// column name
	Client_update_columnId Client_update_column = "id"
	// column name
	Client_update_columnLowercaseName Client_update_column = "lowercase_name"
	// column name
	Client_update_columnModified Client_update_column = "modified"
	// column name
	Client_update_columnName Client_update_column = "name"
	// column name
	Client_update_columnNotes Client_update_column = "notes"
	// column name
	Client_update_columnNotifyOptions Client_update_column = "notify_options"
	// column name
	Client_update_columnPhone Client_update_column = "phone"
	// column name
	Client_update_columnRetainerEnd Client_update_column = "retainer_end"
	// column name
	Client_update_columnRetainerHours Client_update_column = "retainer_hours"
	// column name
	Client_update_columnRetainerStart Client_update_column = "retainer_start"
	// column name
	Client_update_columnState Client_update_column = "state"
	// column name
	Client_update_columnStatus Client_update_column = "status"
	// column name
	Client_update_columnWebsite Client_update_column = "website"
	// column name
	Client_update_columnZipcode Client_update_column = "zipcode"
)

// input type for inserting array relation for remote table "comment"
type Comment_arr_rel_insert_input struct {
	Data []Comment_insert_input `json:"data"`
	// on conflict condition
	On_conflict Comment_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "comment". All fields are combined with a logical 'AND'.
type Comment_bool_exp struct {
	And         []Comment_bool_exp         `json:"_and"`
	Not         *Comment_bool_exp          `json:"_not"`
	Or          []Comment_bool_exp         `json:"_or"`
	Create_user Bigint_comparison_exp      `json:"create_user"`
	Created     Timestamptz_comparison_exp `json:"created"`
	Id          Bigint_comparison_exp      `json:"id"`
	Message     String_comparison_exp      `json:"message"`
	Notify_list String_comparison_exp      `json:"notify_list"`
	Parent_id   Bigint_comparison_exp      `json:"parent_id"`
	Project     *Project_bool_exp          `json:"project"`
	Project_id  Bigint_comparison_exp      `json:"project_id"`
	Subject     String_comparison_exp      `json:"subject"`
	User        *Users_bool_exp            `json:"user"`
	Visibility  String_comparison_exp      `json:"visibility"`
}

// unique or primary key constraints on table "comment"
type Comment_constraint string

const (
	// unique or primary key constraint
	Comment_constraintIdx1942945Primary Comment_constraint = "idx_1942945_primary"
)

// input type for inserting data into table "comment"
type Comment_insert_input struct {
	Create_user int64                        `json:"create_user"`
	Created     time.Time                    `json:"created"`
	Id          int64                        `json:"id"`
	Message     string                       `json:"message"`
	Notify_list string                       `json:"notify_list"`
	Parent_id   int64                        `json:"parent_id"`
	Project     Project_obj_rel_insert_input `json:"project"`
	Project_id  int64                        `json:"project_id"`
	Subject     string                       `json:"subject"`
	User        Users_obj_rel_insert_input   `json:"user"`
	Visibility  string                       `json:"visibility"`
}

// on conflict condition type for table "comment"
type Comment_on_conflict struct {
	Constraint     Comment_constraint      `json:"constraint"`
	Update_columns []Comment_update_column `json:"update_columns"`
	Where          Comment_bool_exp        `json:"where"`
}

// update columns of table "comment"
type Comment_update_column string

const (
	// column name
	Comment_update_columnCreateUser Comment_update_column = "create_user"
	// column name
	Comment_update_columnCreated Comment_update_column = "created"
	// column name
	Comment_update_columnId Comment_update_column = "id"
	// column name
	Comment_update_columnMessage Comment_update_column = "message"
	// column name
	Comment_update_columnNotifyList Comment_update_column = "notify_list"
	// column name
	Comment_update_columnParentId Comment_update_column = "parent_id"
	// column name
	Comment_update_columnProjectId Comment_update_column = "project_id"
	// column name
	Comment_update_columnSubject Comment_update_column = "subject"
	// column name
	Comment_update_columnVisibility Comment_update_column = "visibility"
)

// input type for inserting array relation for remote table "database"
type Database_arr_rel_insert_input struct {
	Data []Database_insert_input `json:"data"`
	// on conflict condition
	On_conflict Database_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "database". All fields are combined with a logical 'AND'.
type Database_bool_exp struct {
	And         []Database_bool_exp        `json:"_and"`
	Not         *Database_bool_exp         `json:"_not"`
	Or          []Database_bool_exp        `json:"_or"`
	Account     *Account_bool_exp          `json:"account"`
	Account_id  Bigint_comparison_exp      `json:"account_id"`
	Client      *Client_bool_exp           `json:"client"`
	Client_id   Bigint_comparison_exp      `json:"client_id"`
	Db_fields   *Db_field_bool_exp         `json:"db_fields"`
	Db_filters  *Db_filter_bool_exp        `json:"db_filters"`
	Db_records  *Db_record_bool_exp        `json:"db_records"`
	Description String_comparison_exp      `json:"description"`
	Id          Bigint_comparison_exp      `json:"id"`
	Name        String_comparison_exp      `json:"name"`
	Permissions String_comparison_exp      `json:"permissions"`
	Update_date Timestamptz_comparison_exp `json:"update_date"`
	Update_user Bigint_comparison_exp      `json:"update_user"`
}

// unique or primary key constraints on table "database"
type Database_constraint string

const (
	// unique or primary key constraint
	Database_constraintIdx1942955Primary Database_constraint = "idx_1942955_primary"
)

// input type for inserting data into table "database"
type Database_insert_input struct {
	Account     Account_obj_rel_insert_input   `json:"account"`
	Account_id  int64                          `json:"account_id"`
	Client      Client_obj_rel_insert_input    `json:"client"`
	Client_id   int64                          `json:"client_id"`
	Db_fields   Db_field_arr_rel_insert_input  `json:"db_fields"`
	Db_filters  Db_filter_arr_rel_insert_input `json:"db_filters"`
	Db_records  Db_record_arr_rel_insert_input `json:"db_records"`
	Description string                         `json:"description"`
	Id          int64                          `json:"id"`
	Name        string                         `json:"name"`
	Permissions string                         `json:"permissions"`
	Update_date time.Time                      `json:"update_date"`
	Update_user int64                          `json:"update_user"`
}

// input type for inserting object relation for remote table "database"
type Database_obj_rel_insert_input struct {
	Data Database_insert_input `json:"data"`
	// on conflict condition
	On_conflict Database_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "database"
type Database_on_conflict struct {
	Constraint     Database_constraint      `json:"constraint"`
	Update_columns []Database_update_column `json:"update_columns"`
	Where          Database_bool_exp        `json:"where"`
}

// update columns of table "database"
type Database_update_column string

const (
	// column name
	Database_update_columnAccountId Database_update_column = "account_id"
	// column name
	Database_update_columnClientId Database_update_column = "client_id"
	// column name
	Database_update_columnDescription Database_update_column = "description"
	// column name
	Database_update_columnId Database_update_column = "id"
	// column name
	Database_update_columnName Database_update_column = "name"
	// column name
	Database_update_columnPermissions Database_update_column = "permissions"
	// column name
	Database_update_columnUpdateDate Database_update_column = "update_date"
	// column name
	Database_update_columnUpdateUser Database_update_column = "update_user"
)

// Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
type Date_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// input type for inserting array relation for remote table "db_field"
type Db_field_arr_rel_insert_input struct {
	Data []Db_field_insert_input `json:"data"`
	// on conflict condition
	On_conflict Db_field_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "db_field". All fields are combined with a logical 'AND'.
type Db_field_bool_exp struct {
	And         []Db_field_bool_exp   `json:"_and"`
	Not         *Db_field_bool_exp    `json:"_not"`
	Or          []Db_field_bool_exp   `json:"_or"`
	Choices     String_comparison_exp `json:"choices"`
	Database    Database_bool_exp     `json:"database"`
	Db_id       Bigint_comparison_exp `json:"db_id"`
	Description String_comparison_exp `json:"description"`
	Fld_number  Int_comparison_exp    `json:"fld_number"`
	Fld_order   Int_comparison_exp    `json:"fld_order"`
	Id          Bigint_comparison_exp `json:"id"`
	Name        String_comparison_exp `json:"name"`
	Options     String_comparison_exp `json:"options"`
	Type        String_comparison_exp `json:"type"`
}

// unique or primary key constraints on table "db_field"
type Db_field_constraint string

const (
	// unique or primary key constraint
	Db_field_constraintIdx1942964Primary Db_field_constraint = "idx_1942964_primary"
)

// input type for inserting data into table "db_field"
type Db_field_insert_input struct {
	Choices     string                        `json:"choices"`
	Database    Database_obj_rel_insert_input `json:"database"`
	Db_id       int64                         `json:"db_id"`
	Description string                        `json:"description"`
	Fld_number  int                           `json:"fld_number"`
	Fld_order   int                           `json:"fld_order"`
	Id          int64                         `json:"id"`
	Name        string                        `json:"name"`
	Options     string                        `json:"options"`
	Type        string                        `json:"type"`
}

// on conflict condition type for table "db_field"
type Db_field_on_conflict struct {
	Constraint     Db_field_constraint      `json:"constraint"`
	Update_columns []Db_field_update_column `json:"update_columns"`
	Where          Db_field_bool_exp        `json:"where"`
}

// update columns of table "db_field"
type Db_field_update_column string

const (
	// column name
	Db_field_update_columnChoices Db_field_update_column = "choices"
	// column name
	Db_field_update_columnDbId Db_field_update_column = "db_id"
	// column name
	Db_field_update_columnDescription Db_field_update_column = "description"
	// column name
	Db_field_update_columnFldNumber Db_field_update_column = "fld_number"
	// column name
	Db_field_update_columnFldOrder Db_field_update_column = "fld_order"
	// column name
	Db_field_update_columnId Db_field_update_column = "id"
	// column name
	Db_field_update_columnName Db_field_update_column = "name"
	// column name
	Db_field_update_columnOptions Db_field_update_column = "options"
	// column name
	Db_field_update_columnType Db_field_update_column = "type"
)

// input type for inserting array relation for remote table "db_filter"
type Db_filter_arr_rel_insert_input struct {
	Data []Db_filter_insert_input `json:"data"`
	// on conflict condition
	On_conflict Db_filter_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "db_filter". All fields are combined with a logical 'AND'.
type Db_filter_bool_exp struct {
	And        []Db_filter_bool_exp  `json:"_and"`
	Not        *Db_filter_bool_exp   `json:"_not"`
	Or         []Db_filter_bool_exp  `json:"_or"`
	Criteria   String_comparison_exp `json:"criteria"`
	Database   Database_bool_exp     `json:"database"`
	Db_id      Bigint_comparison_exp `json:"db_id"`
	Id         Bigint_comparison_exp `json:"id"`
	Name       String_comparison_exp `json:"name"`
	Sort_dir   String_comparison_exp `json:"sort_dir"`
	Sort_order Int_comparison_exp    `json:"sort_order"`
}

// unique or primary key constraints on table "db_filter"
type Db_filter_constraint string

const (
	// unique or primary key constraint
	Db_filter_constraintIdx1942973Primary Db_filter_constraint = "idx_1942973_primary"
)

// input type for inserting data into table "db_filter"
type Db_filter_insert_input struct {
	Criteria   string                        `json:"criteria"`
	Database   Database_obj_rel_insert_input `json:"database"`
	Db_id      int64                         `json:"db_id"`
	Id         int64                         `json:"id"`
	Name       string                        `json:"name"`
	Sort_dir   string                        `json:"sort_dir"`
	Sort_order int                           `json:"sort_order"`
}

// on conflict condition type for table "db_filter"
type Db_filter_on_conflict struct {
	Constraint     Db_filter_constraint      `json:"constraint"`
	Update_columns []Db_filter_update_column `json:"update_columns"`
	Where          Db_filter_bool_exp        `json:"where"`
}

// update columns of table "db_filter"
type Db_filter_update_column string

const (
	// column name
	Db_filter_update_columnCriteria Db_filter_update_column = "criteria"
	// column name
	Db_filter_update_columnDbId Db_filter_update_column = "db_id"
	// column name
	Db_filter_update_columnId Db_filter_update_column = "id"
	// column name
	Db_filter_update_columnName Db_filter_update_column = "name"
	// column name
	Db_filter_update_columnSortDir Db_filter_update_column = "sort_dir"
	// column name
	Db_filter_update_columnSortOrder Db_filter_update_column = "sort_order"
)

// input type for inserting array relation for remote table "db_note"
type Db_note_arr_rel_insert_input struct {
	Data []Db_note_insert_input `json:"data"`
	// on conflict condition
	On_conflict Db_note_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "db_note". All fields are combined with a logical 'AND'.
type Db_note_bool_exp struct {
	And            []Db_note_bool_exp         `json:"_and"`
	Not            *Db_note_bool_exp          `json:"_not"`
	Or             []Db_note_bool_exp         `json:"_or"`
	Db_record      *Db_record_bool_exp        `json:"db_record"`
	Id             Bigint_comparison_exp      `json:"id"`
	Message        String_comparison_exp      `json:"message"`
	Record_id      Bigint_comparison_exp      `json:"record_id"`
	Update_date    Timestamptz_comparison_exp `json:"update_date"`
	Update_user    String_comparison_exp      `json:"update_user"`
	Update_user_id Bigint_comparison_exp      `json:"update_user_id"`
}

// unique or primary key constraints on table "db_note"
type Db_note_constraint string

const (
	// unique or primary key constraint
	Db_note_constraintIdx1942982Primary Db_note_constraint = "idx_1942982_primary"
)

// input type for inserting data into table "db_note"
type Db_note_insert_input struct {
	Db_record      Db_record_obj_rel_insert_input `json:"db_record"`
	Id             int64                          `json:"id"`
	Message        string                         `json:"message"`
	Record_id      int64                          `json:"record_id"`
	Update_date    time.Time                      `json:"update_date"`
	Update_user    string                         `json:"update_user"`
	Update_user_id int64                          `json:"update_user_id"`
}

// on conflict condition type for table "db_note"
type Db_note_on_conflict struct {
	Constraint     Db_note_constraint      `json:"constraint"`
	Update_columns []Db_note_update_column `json:"update_columns"`
	Where          Db_note_bool_exp        `json:"where"`
}

// update columns of table "db_note"
type Db_note_update_column string

const (
	// column name
	Db_note_update_columnId Db_note_update_column = "id"
	// column name
	Db_note_update_columnMessage Db_note_update_column = "message"
	// column name
	Db_note_update_columnRecordId Db_note_update_column = "record_id"
	// column name
	Db_note_update_columnUpdateDate Db_note_update_column = "update_date"
	// column name
	Db_note_update_columnUpdateUser Db_note_update_column = "update_user"
	// column name
	Db_note_update_columnUpdateUserId Db_note_update_column = "update_user_id"
)

// input type for inserting array relation for remote table "db_record"
type Db_record_arr_rel_insert_input struct {
	Data []Db_record_insert_input `json:"data"`
	// on conflict condition
	On_conflict Db_record_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "db_record". All fields are combined with a logical 'AND'.
type Db_record_bool_exp struct {
	And         []Db_record_bool_exp       `json:"_and"`
	Not         *Db_record_bool_exp        `json:"_not"`
	Or          []Db_record_bool_exp       `json:"_or"`
	Database    *Database_bool_exp         `json:"database"`
	Db_id       Bigint_comparison_exp      `json:"db_id"`
	Db_notes    Db_note_bool_exp           `json:"db_notes"`
	Fld_1       String_comparison_exp      `json:"fld_1"`
	Fld_10      String_comparison_exp      `json:"fld_10"`
	Fld_11      String_comparison_exp      `json:"fld_11"`
	Fld_12      String_comparison_exp      `json:"fld_12"`
	Fld_13      String_comparison_exp      `json:"fld_13"`
	Fld_14      String_comparison_exp      `json:"fld_14"`
	Fld_15      String_comparison_exp      `json:"fld_15"`
	Fld_16      String_comparison_exp      `json:"fld_16"`
	Fld_17      String_comparison_exp      `json:"fld_17"`
	Fld_18      String_comparison_exp      `json:"fld_18"`
	Fld_19      String_comparison_exp      `json:"fld_19"`
	Fld_2       String_comparison_exp      `json:"fld_2"`
	Fld_20      String_comparison_exp      `json:"fld_20"`
	Fld_21      String_comparison_exp      `json:"fld_21"`
	Fld_22      String_comparison_exp      `json:"fld_22"`
	Fld_23      String_comparison_exp      `json:"fld_23"`
	Fld_24      String_comparison_exp      `json:"fld_24"`
	Fld_25      String_comparison_exp      `json:"fld_25"`
	Fld_26      String_comparison_exp      `json:"fld_26"`
	Fld_27      String_comparison_exp      `json:"fld_27"`
	Fld_28      String_comparison_exp      `json:"fld_28"`
	Fld_29      String_comparison_exp      `json:"fld_29"`
	Fld_3       String_comparison_exp      `json:"fld_3"`
	Fld_30      String_comparison_exp      `json:"fld_30"`
	Fld_31      String_comparison_exp      `json:"fld_31"`
	Fld_32      String_comparison_exp      `json:"fld_32"`
	Fld_33      String_comparison_exp      `json:"fld_33"`
	Fld_34      String_comparison_exp      `json:"fld_34"`
	Fld_35      String_comparison_exp      `json:"fld_35"`
	Fld_36      String_comparison_exp      `json:"fld_36"`
	Fld_37      String_comparison_exp      `json:"fld_37"`
	Fld_38      String_comparison_exp      `json:"fld_38"`
	Fld_39      String_comparison_exp      `json:"fld_39"`
	Fld_4       String_comparison_exp      `json:"fld_4"`
	Fld_40      String_comparison_exp      `json:"fld_40"`
	Fld_41      String_comparison_exp      `json:"fld_41"`
	Fld_42      String_comparison_exp      `json:"fld_42"`
	Fld_43      String_comparison_exp      `json:"fld_43"`
	Fld_44      String_comparison_exp      `json:"fld_44"`
	Fld_45      String_comparison_exp      `json:"fld_45"`
	Fld_46      String_comparison_exp      `json:"fld_46"`
	Fld_47      String_comparison_exp      `json:"fld_47"`
	Fld_48      String_comparison_exp      `json:"fld_48"`
	Fld_49      String_comparison_exp      `json:"fld_49"`
	Fld_5       String_comparison_exp      `json:"fld_5"`
	Fld_50      String_comparison_exp      `json:"fld_50"`
	Fld_6       String_comparison_exp      `json:"fld_6"`
	Fld_7       String_comparison_exp      `json:"fld_7"`
	Fld_8       String_comparison_exp      `json:"fld_8"`
	Fld_9       String_comparison_exp      `json:"fld_9"`
	Id          Bigint_comparison_exp      `json:"id"`
	Update_date Timestamptz_comparison_exp `json:"update_date"`
	Update_user Bigint_comparison_exp      `json:"update_user"`
}

// unique or primary key constraints on table "db_record"
type Db_record_constraint string

const (
	// unique or primary key constraint
	Db_record_constraintIdx1942991Primary Db_record_constraint = "idx_1942991_primary"
)

// input type for inserting data into table "db_record"
type Db_record_insert_input struct {
	Database    Database_obj_rel_insert_input `json:"database"`
	Db_id       int64                         `json:"db_id"`
	Db_notes    Db_note_arr_rel_insert_input  `json:"db_notes"`
	Fld_1       string                        `json:"fld_1"`
	Fld_10      string                        `json:"fld_10"`
	Fld_11      string                        `json:"fld_11"`
	Fld_12      string                        `json:"fld_12"`
	Fld_13      string                        `json:"fld_13"`
	Fld_14      string                        `json:"fld_14"`
	Fld_15      string                        `json:"fld_15"`
	Fld_16      string                        `json:"fld_16"`
	Fld_17      string                        `json:"fld_17"`
	Fld_18      string                        `json:"fld_18"`
	Fld_19      string                        `json:"fld_19"`
	Fld_2       string                        `json:"fld_2"`
	Fld_20      string                        `json:"fld_20"`
	Fld_21      string                        `json:"fld_21"`
	Fld_22      string                        `json:"fld_22"`
	Fld_23      string                        `json:"fld_23"`
	Fld_24      string                        `json:"fld_24"`
	Fld_25      string                        `json:"fld_25"`
	Fld_26      string                        `json:"fld_26"`
	Fld_27      string                        `json:"fld_27"`
	Fld_28      string                        `json:"fld_28"`
	Fld_29      string                        `json:"fld_29"`
	Fld_3       string                        `json:"fld_3"`
	Fld_30      string                        `json:"fld_30"`
	Fld_31      string                        `json:"fld_31"`
	Fld_32      string                        `json:"fld_32"`
	Fld_33      string                        `json:"fld_33"`
	Fld_34      string                        `json:"fld_34"`
	Fld_35      string                        `json:"fld_35"`
	Fld_36      string                        `json:"fld_36"`
	Fld_37      string                        `json:"fld_37"`
	Fld_38      string                        `json:"fld_38"`
	Fld_39      string                        `json:"fld_39"`
	Fld_4       string                        `json:"fld_4"`
	Fld_40      string                        `json:"fld_40"`
	Fld_41      string                        `json:"fld_41"`
	Fld_42      string                        `json:"fld_42"`
	Fld_43      string                        `json:"fld_43"`
	Fld_44      string                        `json:"fld_44"`
	Fld_45      string                        `json:"fld_45"`
	Fld_46      string                        `json:"fld_46"`
	Fld_47      string                        `json:"fld_47"`
	Fld_48      string                        `json:"fld_48"`
	Fld_49      string                        `json:"fld_49"`
	Fld_5       string                        `json:"fld_5"`
	Fld_50      string                        `json:"fld_50"`
	Fld_6       string                        `json:"fld_6"`
	Fld_7       string                        `json:"fld_7"`
	Fld_8       string                        `json:"fld_8"`
	Fld_9       string                        `json:"fld_9"`
	Id          int64                         `json:"id"`
	Update_date time.Time                     `json:"update_date"`
	Update_user int64                         `json:"update_user"`
}

// input type for inserting object relation for remote table "db_record"
type Db_record_obj_rel_insert_input struct {
	Data Db_record_insert_input `json:"data"`
	// on conflict condition
	On_conflict Db_record_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "db_record"
type Db_record_on_conflict struct {
	Constraint     Db_record_constraint      `json:"constraint"`
	Update_columns []Db_record_update_column `json:"update_columns"`
	Where          Db_record_bool_exp        `json:"where"`
}

// update columns of table "db_record"
type Db_record_update_column string

const (
	// column name
	Db_record_update_columnDbId Db_record_update_column = "db_id"
	// column name
	Db_record_update_columnFld1 Db_record_update_column = "fld_1"
	// column name
	Db_record_update_columnFld10 Db_record_update_column = "fld_10"
	// column name
	Db_record_update_columnFld11 Db_record_update_column = "fld_11"
	// column name
	Db_record_update_columnFld12 Db_record_update_column = "fld_12"
	// column name
	Db_record_update_columnFld13 Db_record_update_column = "fld_13"
	// column name
	Db_record_update_columnFld14 Db_record_update_column = "fld_14"
	// column name
	Db_record_update_columnFld15 Db_record_update_column = "fld_15"
	// column name
	Db_record_update_columnFld16 Db_record_update_column = "fld_16"
	// column name
	Db_record_update_columnFld17 Db_record_update_column = "fld_17"
	// column name
	Db_record_update_columnFld18 Db_record_update_column = "fld_18"
	// column name
	Db_record_update_columnFld19 Db_record_update_column = "fld_19"
	// column name
	Db_record_update_columnFld2 Db_record_update_column = "fld_2"
	// column name
	Db_record_update_columnFld20 Db_record_update_column = "fld_20"
	// column name
	Db_record_update_columnFld21 Db_record_update_column = "fld_21"
	// column name
	Db_record_update_columnFld22 Db_record_update_column = "fld_22"
	// column name
	Db_record_update_columnFld23 Db_record_update_column = "fld_23"
	// column name
	Db_record_update_columnFld24 Db_record_update_column = "fld_24"
	// column name
	Db_record_update_columnFld25 Db_record_update_column = "fld_25"
	// column name
	Db_record_update_columnFld26 Db_record_update_column = "fld_26"
	// column name
	Db_record_update_columnFld27 Db_record_update_column = "fld_27"
	// column name
	Db_record_update_columnFld28 Db_record_update_column = "fld_28"
	// column name
	Db_record_update_columnFld29 Db_record_update_column = "fld_29"
	// column name
	Db_record_update_columnFld3 Db_record_update_column = "fld_3"
	// column name
	Db_record_update_columnFld30 Db_record_update_column = "fld_30"
	// column name
	Db_record_update_columnFld31 Db_record_update_column = "fld_31"
	// column name
	Db_record_update_columnFld32 Db_record_update_column = "fld_32"
	// column name
	Db_record_update_columnFld33 Db_record_update_column = "fld_33"
	// column name
	Db_record_update_columnFld34 Db_record_update_column = "fld_34"
	// column name
	Db_record_update_columnFld35 Db_record_update_column = "fld_35"
	// column name
	Db_record_update_columnFld36 Db_record_update_column = "fld_36"
	// column name
	Db_record_update_columnFld37 Db_record_update_column = "fld_37"
	// column name
	Db_record_update_columnFld38 Db_record_update_column = "fld_38"
	// column name
	Db_record_update_columnFld39 Db_record_update_column = "fld_39"
	// column name
	Db_record_update_columnFld4 Db_record_update_column = "fld_4"
	// column name
	Db_record_update_columnFld40 Db_record_update_column = "fld_40"
	// column name
	Db_record_update_columnFld41 Db_record_update_column = "fld_41"
	// column name
	Db_record_update_columnFld42 Db_record_update_column = "fld_42"
	// column name
	Db_record_update_columnFld43 Db_record_update_column = "fld_43"
	// column name
	Db_record_update_columnFld44 Db_record_update_column = "fld_44"
	// column name
	Db_record_update_columnFld45 Db_record_update_column = "fld_45"
	// column name
	Db_record_update_columnFld46 Db_record_update_column = "fld_46"
	// column name
	Db_record_update_columnFld47 Db_record_update_column = "fld_47"
	// column name
	Db_record_update_columnFld48 Db_record_update_column = "fld_48"
	// column name
	Db_record_update_columnFld49 Db_record_update_column = "fld_49"
	// column name
	Db_record_update_columnFld5 Db_record_update_column = "fld_5"
	// column name
	Db_record_update_columnFld50 Db_record_update_column = "fld_50"
	// column name
	Db_record_update_columnFld6 Db_record_update_column = "fld_6"
	// column name
	Db_record_update_columnFld7 Db_record_update_column = "fld_7"
	// column name
	Db_record_update_columnFld8 Db_record_update_column = "fld_8"
	// column name
	Db_record_update_columnFld9 Db_record_update_column = "fld_9"
	// column name
	Db_record_update_columnId Db_record_update_column = "id"
	// column name
	Db_record_update_columnUpdateDate Db_record_update_column = "update_date"
	// column name
	Db_record_update_columnUpdateUser Db_record_update_column = "update_user"
)

// input type for inserting array relation for remote table "document"
type Document_arr_rel_insert_input struct {
	Data []Document_insert_input `json:"data"`
	// on conflict condition
	On_conflict Document_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "document". All fields are combined with a logical 'AND'.
type Document_bool_exp struct {
	And            []Document_bool_exp        `json:"_and"`
	Not            *Document_bool_exp         `json:"_not"`
	Or             []Document_bool_exp        `json:"_or"`
	Content        String_comparison_exp      `json:"content"`
	File           File_bool_exp              `json:"file"`
	File_id        Bigint_comparison_exp      `json:"file_id"`
	Id             Bigint_comparison_exp      `json:"id"`
	Notes          String_comparison_exp      `json:"notes"`
	Update_date    Timestamptz_comparison_exp `json:"update_date"`
	Update_user    String_comparison_exp      `json:"update_user"`
	Update_user_id Bigint_comparison_exp      `json:"update_user_id"`
}

// unique or primary key constraints on table "document"
type Document_constraint string

const (
	// unique or primary key constraint
	Document_constraintIdx1943000Primary Document_constraint = "idx_1943000_primary"
)

// input type for inserting data into table "document"
type Document_insert_input struct {
	Content        string                    `json:"content"`
	File           File_obj_rel_insert_input `json:"file"`
	File_id        int64                     `json:"file_id"`
	Id             int64                     `json:"id"`
	Notes          string                    `json:"notes"`
	Update_date    time.Time                 `json:"update_date"`
	Update_user    string                    `json:"update_user"`
	Update_user_id int64                     `json:"update_user_id"`
}

// on conflict condition type for table "document"
type Document_on_conflict struct {
	Constraint     Document_constraint      `json:"constraint"`
	Update_columns []Document_update_column `json:"update_columns"`
	Where          Document_bool_exp        `json:"where"`
}

// update columns of table "document"
type Document_update_column string

const (
	// column name
	Document_update_columnContent Document_update_column = "content"
	// column name
	Document_update_columnFileId Document_update_column = "file_id"
	// column name
	Document_update_columnId Document_update_column = "id"
	// column name
	Document_update_columnNotes Document_update_column = "notes"
	// column name
	Document_update_columnUpdateDate Document_update_column = "update_date"
	// column name
	Document_update_columnUpdateUser Document_update_column = "update_user"
	// column name
	Document_update_columnUpdateUserId Document_update_column = "update_user_id"
)

// input type for inserting array relation for remote table "event"
type Event_arr_rel_insert_input struct {
	Data []Event_insert_input `json:"data"`
	// on conflict condition
	On_conflict Event_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
type Event_bool_exp struct {
	And         []Event_bool_exp           `json:"_and"`
	Not         *Event_bool_exp            `json:"_not"`
	Or          []Event_bool_exp           `json:"_or"`
	Account     Account_bool_exp           `json:"account"`
	Account_id  Bigint_comparison_exp      `json:"account_id"`
	Client      Client_bool_exp            `json:"client"`
	Client_id   Bigint_comparison_exp      `json:"client_id"`
	Description String_comparison_exp      `json:"description"`
	End_date    Timestamp_comparison_exp   `json:"end_date"`
	Id          Bigint_comparison_exp      `json:"id"`
	Modified    Timestamptz_comparison_exp `json:"modified"`
	Name        String_comparison_exp      `json:"name"`
	Start_date  Timestamp_comparison_exp   `json:"start_date"`
}

// unique or primary key constraints on table "event"
type Event_constraint string

const (
	// unique or primary key constraint
	Event_constraintIdx1943009Primary Event_constraint = "idx_1943009_primary"
)

// input type for inserting data into table "event"
type Event_insert_input struct {
	Account     Account_obj_rel_insert_input `json:"account"`
	Account_id  int64                        `json:"account_id"`
	Client      Client_obj_rel_insert_input  `json:"client"`
	Client_id   int64                        `json:"client_id"`
	Description string                       `json:"description"`
	End_date    time.Time                    `json:"end_date"`
	Id          int64                        `json:"id"`
	Modified    time.Time                    `json:"modified"`
	Name        string                       `json:"name"`
	Start_date  time.Time                    `json:"start_date"`
}

// on conflict condition type for table "event"
type Event_on_conflict struct {
	Constraint     Event_constraint      `json:"constraint"`
	Update_columns []Event_update_column `json:"update_columns"`
	Where          Event_bool_exp        `json:"where"`
}

// update columns of table "event"
type Event_update_column string

const (
	// column name
	Event_update_columnAccountId Event_update_column = "account_id"
	// column name
	Event_update_columnClientId Event_update_column = "client_id"
	// column name
	Event_update_columnDescription Event_update_column = "description"
	// column name
	Event_update_columnEndDate Event_update_column = "end_date"
	// column name
	Event_update_columnId Event_update_column = "id"
	// column name
	Event_update_columnModified Event_update_column = "modified"
	// column name
	Event_update_columnName Event_update_column = "name"
	// column name
	Event_update_columnStartDate Event_update_column = "start_date"
)

// input type for inserting array relation for remote table "file"
type File_arr_rel_insert_input struct {
	Data []File_insert_input `json:"data"`
	// on conflict condition
	On_conflict File_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "file". All fields are combined with a logical 'AND'.
type File_bool_exp struct {
	And             []File_bool_exp            `json:"_and"`
	Not             *File_bool_exp             `json:"_not"`
	Or              []File_bool_exp            `json:"_or"`
	Children        *File_bool_exp             `json:"children"`
	Create_user     Bigint_comparison_exp      `json:"create_user"`
	Created         Timestamptz_comparison_exp `json:"created"`
	Created_by      *Users_bool_exp            `json:"created_by"`
	Description     String_comparison_exp      `json:"description"`
	Display_name    String_comparison_exp      `json:"display_name"`
	Documents       *Document_bool_exp         `json:"documents"`
	File_name       String_comparison_exp      `json:"file_name"`
	File_size       Int_comparison_exp         `json:"file_size"`
	File_type       String_comparison_exp      `json:"file_type"`
	Id              Bigint_comparison_exp      `json:"id"`
	Parent          *File_bool_exp             `json:"parent"`
	Parent_id       Bigint_comparison_exp      `json:"parent_id"`
	Project         *Project_bool_exp          `json:"project"`
	Project_id      Bigint_comparison_exp      `json:"project_id"`
	Task_file_links *Task_file_link_bool_exp   `json:"task_file_links"`
	Visibility      String_comparison_exp      `json:"visibility"`
}

// unique or primary key constraints on table "file"
type File_constraint string

const (
	// unique or primary key constraint
	File_constraintIdx1943019Primary File_constraint = "idx_1943019_primary"
)

// input type for inserting data into table "file"
type File_insert_input struct {
	Children        File_arr_rel_insert_input           `json:"children"`
	Create_user     int64                               `json:"create_user"`
	Created         time.Time                           `json:"created"`
	Created_by      Users_obj_rel_insert_input          `json:"created_by"`
	Description     string                              `json:"description"`
	Display_name    string                              `json:"display_name"`
	Documents       Document_arr_rel_insert_input       `json:"documents"`
	File_name       string                              `json:"file_name"`
	File_size       int                                 `json:"file_size"`
	File_type       string                              `json:"file_type"`
	Id              int64                               `json:"id"`
	Parent          *File_obj_rel_insert_input          `json:"parent"`
	Parent_id       int64                               `json:"parent_id"`
	Project         Project_obj_rel_insert_input        `json:"project"`
	Project_id      int64                               `json:"project_id"`
	Task_file_links Task_file_link_arr_rel_insert_input `json:"task_file_links"`
	Visibility      string                              `json:"visibility"`
}

// input type for inserting object relation for remote table "file"
type File_obj_rel_insert_input struct {
	Data File_insert_input `json:"data"`
	// on conflict condition
	On_conflict File_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "file"
type File_on_conflict struct {
	Constraint     File_constraint      `json:"constraint"`
	Update_columns []File_update_column `json:"update_columns"`
	Where          File_bool_exp        `json:"where"`
}

// update columns of table "file"
type File_update_column string

const (
	// column name
	File_update_columnCreateUser File_update_column = "create_user"
	// column name
	File_update_columnCreated File_update_column = "created"
	// column name
	File_update_columnDescription File_update_column = "description"
	// column name
	File_update_columnDisplayName File_update_column = "display_name"
	// column name
	File_update_columnFileName File_update_column = "file_name"
	// column name
	File_update_columnFileSize File_update_column = "file_size"
	// column name
	File_update_columnFileType File_update_column = "file_type"
	// column name
	File_update_columnId File_update_column = "id"
	// column name
	File_update_columnParentId File_update_column = "parent_id"
	// column name
	File_update_columnProjectId File_update_column = "project_id"
	// column name
	File_update_columnVisibility File_update_column = "visibility"
)

// Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
type Float8_comparison_exp struct {
	Eq      float32   `json:"_eq"`
	Gt      float32   `json:"_gt"`
	Gte     float32   `json:"_gte"`
	In      []float32 `json:"_in"`
	Is_null bool      `json:"_is_null"`
	Lt      float32   `json:"_lt"`
	Lte     float32   `json:"_lte"`
	Neq     float32   `json:"_neq"`
	Nin     []float32 `json:"_nin"`
}

// input type for inserting array relation for remote table "form"
type Form_arr_rel_insert_input struct {
	Data []Form_insert_input `json:"data"`
	// on conflict condition
	On_conflict Form_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "form". All fields are combined with a logical 'AND'.
type Form_bool_exp struct {
	And             []Form_bool_exp            `json:"_and"`
	Not             *Form_bool_exp             `json:"_not"`
	Or              []Form_bool_exp            `json:"_or"`
	Account         *Account_bool_exp          `json:"account"`
	Account_id      Bigint_comparison_exp      `json:"account_id"`
	Contents        Jsonb_comparison_exp       `json:"contents"`
	Create_user     Bigint_comparison_exp      `json:"create_user"`
	Created         Timestamptz_comparison_exp `json:"created"`
	Created_by      *Users_bool_exp            `json:"created_by"`
	Display_logo    Boolean_comparison_exp     `json:"display_logo"`
	Id              Bigint_comparison_exp      `json:"id"`
	Modified        Timestamptz_comparison_exp `json:"modified"`
	Name            String_comparison_exp      `json:"name"`
	Notify_email    String_comparison_exp      `json:"notify_email"`
	Submit_btn      String_comparison_exp      `json:"submit_btn"`
	Success_message String_comparison_exp      `json:"success_message"`
	Update_user     Bigint_comparison_exp      `json:"update_user"`
	Updated_by      *Users_bool_exp            `json:"updated_by"`
}

// unique or primary key constraints on table "form"
type Form_constraint string

const (
	// unique or primary key constraint
	Form_constraintEmbedPkey Form_constraint = "embed_pkey"
)

// input type for inserting data into table "form"
type Form_insert_input struct {
	Account         Account_obj_rel_insert_input `json:"account"`
	Account_id      int64                        `json:"account_id"`
	Contents        interface{}                  `json:"contents"`
	Create_user     int64                        `json:"create_user"`
	Created         time.Time                    `json:"created"`
	Created_by      Users_obj_rel_insert_input   `json:"created_by"`
	Display_logo    bool                         `json:"display_logo"`
	Id              int64                        `json:"id"`
	Modified        time.Time                    `json:"modified"`
	Name            string                       `json:"name"`
	Notify_email    string                       `json:"notify_email"`
	Submit_btn      string                       `json:"submit_btn"`
	Success_message string                       `json:"success_message"`
	Update_user     int64                        `json:"update_user"`
	Updated_by      Users_obj_rel_insert_input   `json:"updated_by"`
}

// on conflict condition type for table "form"
type Form_on_conflict struct {
	Constraint     Form_constraint      `json:"constraint"`
	Update_columns []Form_update_column `json:"update_columns"`
	Where          Form_bool_exp        `json:"where"`
}

// update columns of table "form"
type Form_update_column string

const (
	// column name
	Form_update_columnAccountId Form_update_column = "account_id"
	// column name
	Form_update_columnContents Form_update_column = "contents"
	// column name
	Form_update_columnCreateUser Form_update_column = "create_user"
	// column name
	Form_update_columnCreated Form_update_column = "created"
	// column name
	Form_update_columnDisplayLogo Form_update_column = "display_logo"
	// column name
	Form_update_columnId Form_update_column = "id"
	// column name
	Form_update_columnModified Form_update_column = "modified"
	// column name
	Form_update_columnName Form_update_column = "name"
	// column name
	Form_update_columnNotifyEmail Form_update_column = "notify_email"
	// column name
	Form_update_columnSubmitBtn Form_update_column = "submit_btn"
	// column name
	Form_update_columnSuccessMessage Form_update_column = "success_message"
	// column name
	Form_update_columnUpdateUser Form_update_column = "update_user"
)

// Boolean expression to compare columns of type "_int8". All fields are combined with logical 'AND'.
type Int8_comparison_exp struct {
	Eq      []int64   `json:"_eq"`
	Gt      []int64   `json:"_gt"`
	Gte     []int64   `json:"_gte"`
	In      [][]int64 `json:"_in"`
	Is_null bool      `json:"_is_null"`
	Lt      []int64   `json:"_lt"`
	Lte     []int64   `json:"_lte"`
	Neq     []int64   `json:"_neq"`
	Nin     [][]int64 `json:"_nin"`
}

// Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
type Int_comparison_exp struct {
	Eq      int   `json:"_eq"`
	Gt      int   `json:"_gt"`
	Gte     int   `json:"_gte"`
	In      []int `json:"_in"`
	Is_null bool  `json:"_is_null"`
	Lt      int   `json:"_lt"`
	Lte     int   `json:"_lte"`
	Neq     int   `json:"_neq"`
	Nin     []int `json:"_nin"`
}

// Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
type Jsonb_comparison_exp struct {
	// is the column contained in the given json value
	Contained_in interface{} `json:"_contained_in"`
	// does the column contain the given json value at the top level
	Contains interface{} `json:"_contains"`
	Eq       interface{} `json:"_eq"`
	Gt       interface{} `json:"_gt"`
	Gte      interface{} `json:"_gte"`
	// does the string exist as a top-level key in the column
	Has_key string `json:"_has_key"`
	// do all of these strings exist as top-level keys in the column
	Has_keys_all []string `json:"_has_keys_all"`
	// do any of these strings exist as top-level keys in the column
	Has_keys_any []string      `json:"_has_keys_any"`
	In           []interface{} `json:"_in"`
	Is_null      bool          `json:"_is_null"`
	Lt           interface{}   `json:"_lt"`
	Lte          interface{}   `json:"_lte"`
	Neq          interface{}   `json:"_neq"`
	Nin          []interface{} `json:"_nin"`
}

// input type for inserting array relation for remote table "message"
type Message_arr_rel_insert_input struct {
	Data []Message_insert_input `json:"data"`
	// on conflict condition
	On_conflict Message_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
type Message_bool_exp struct {
	And         []Message_bool_exp         `json:"_and"`
	Not         *Message_bool_exp          `json:"_not"`
	Or          []Message_bool_exp         `json:"_or"`
	Archived    Boolean_comparison_exp     `json:"archived"`
	Body        String_comparison_exp      `json:"body"`
	Created     Timestamptz_comparison_exp `json:"created"`
	Data        Jsonb_comparison_exp       `json:"data"`
	Form_id     Bigint_comparison_exp      `json:"form_id"`
	Id          Bigint_comparison_exp      `json:"id"`
	Modified    Timestamptz_comparison_exp `json:"modified"`
	Sender      String_comparison_exp      `json:"sender"`
	Subject     String_comparison_exp      `json:"subject"`
	Update_user Bigint_comparison_exp      `json:"update_user"`
}

// unique or primary key constraints on table "message"
type Message_constraint string

const (
	// unique or primary key constraint
	Message_constraintMessagePkey Message_constraint = "message_pkey"
)

// input type for inserting data into table "message"
type Message_insert_input struct {
	Archived    bool        `json:"archived"`
	Body        string      `json:"body"`
	Created     time.Time   `json:"created"`
	Data        interface{} `json:"data"`
	Form_id     int64       `json:"form_id"`
	Id          int64       `json:"id"`
	Modified    time.Time   `json:"modified"`
	Sender      string      `json:"sender"`
	Subject     string      `json:"subject"`
	Update_user int64       `json:"update_user"`
}

// on conflict condition type for table "message"
type Message_on_conflict struct {
	Constraint     Message_constraint      `json:"constraint"`
	Update_columns []Message_update_column `json:"update_columns"`
	Where          Message_bool_exp        `json:"where"`
}

// update columns of table "message"
type Message_update_column string

const (
	// column name
	Message_update_columnArchived Message_update_column = "archived"
	// column name
	Message_update_columnBody Message_update_column = "body"
	// column name
	Message_update_columnCreated Message_update_column = "created"
	// column name
	Message_update_columnData Message_update_column = "data"
	// column name
	Message_update_columnFormId Message_update_column = "form_id"
	// column name
	Message_update_columnId Message_update_column = "id"
	// column name
	Message_update_columnModified Message_update_column = "modified"
	// column name
	Message_update_columnSender Message_update_column = "sender"
	// column name
	Message_update_columnSubject Message_update_column = "subject"
	// column name
	Message_update_columnUpdateUser Message_update_column = "update_user"
)

// input type for inserting array relation for remote table "milestone"
type Milestone_arr_rel_insert_input struct {
	Data []Milestone_insert_input `json:"data"`
	// on conflict condition
	On_conflict Milestone_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "milestone". All fields are combined with a logical 'AND'.
type Milestone_bool_exp struct {
	And           []Milestone_bool_exp       `json:"_and"`
	Not           *Milestone_bool_exp        `json:"_not"`
	Or            []Milestone_bool_exp       `json:"_or"`
	Assigned_user Bigint_comparison_exp      `json:"assigned_user"`
	Completed     Timestamptz_comparison_exp `json:"completed"`
	Create_user   Bigint_comparison_exp      `json:"create_user"`
	Created       Timestamptz_comparison_exp `json:"created"`
	Id            Bigint_comparison_exp      `json:"id"`
	Modified      Timestamptz_comparison_exp `json:"modified"`
	Name          String_comparison_exp      `json:"name"`
	Project       *Project_bool_exp          `json:"project"`
	Project_id    Bigint_comparison_exp      `json:"project_id"`
	Reminder_sent Timestamptz_comparison_exp `json:"reminder_sent"`
	Status        String_comparison_exp      `json:"status"`
	Target_date   Timestamptz_comparison_exp `json:"target_date"`
	Update_user   Bigint_comparison_exp      `json:"update_user"`
}

// unique or primary key constraints on table "milestone"
type Milestone_constraint string

const (
	// unique or primary key constraint
	Milestone_constraintIdx1943029Primary Milestone_constraint = "idx_1943029_primary"
)

// input type for inserting data into table "milestone"
type Milestone_insert_input struct {
	Assigned_user int64                        `json:"assigned_user"`
	Completed     time.Time                    `json:"completed"`
	Create_user   int64                        `json:"create_user"`
	Created       time.Time                    `json:"created"`
	Id            int64                        `json:"id"`
	Modified      time.Time                    `json:"modified"`
	Name          string                       `json:"name"`
	Project       Project_obj_rel_insert_input `json:"project"`
	Project_id    int64                        `json:"project_id"`
	Reminder_sent time.Time                    `json:"reminder_sent"`
	Status        string                       `json:"status"`
	Target_date   time.Time                    `json:"target_date"`
	Update_user   int64                        `json:"update_user"`
}

// input type for inserting object relation for remote table "milestone"
type Milestone_obj_rel_insert_input struct {
	Data Milestone_insert_input `json:"data"`
	// on conflict condition
	On_conflict Milestone_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "milestone"
type Milestone_on_conflict struct {
	Constraint     Milestone_constraint      `json:"constraint"`
	Update_columns []Milestone_update_column `json:"update_columns"`
	Where          Milestone_bool_exp        `json:"where"`
}

// update columns of table "milestone"
type Milestone_update_column string

const (
	// column name
	Milestone_update_columnAssignedUser Milestone_update_column = "assigned_user"
	// column name
	Milestone_update_columnCompleted Milestone_update_column = "completed"
	// column name
	Milestone_update_columnCreateUser Milestone_update_column = "create_user"
	// column name
	Milestone_update_columnCreated Milestone_update_column = "created"
	// column name
	Milestone_update_columnId Milestone_update_column = "id"
	// column name
	Milestone_update_columnModified Milestone_update_column = "modified"
	// column name
	Milestone_update_columnName Milestone_update_column = "name"
	// column name
	Milestone_update_columnProjectId Milestone_update_column = "project_id"
	// column name
	Milestone_update_columnReminderSent Milestone_update_column = "reminder_sent"
	// column name
	Milestone_update_columnStatus Milestone_update_column = "status"
	// column name
	Milestone_update_columnTargetDate Milestone_update_column = "target_date"
	// column name
	Milestone_update_columnUpdateUser Milestone_update_column = "update_user"
)

// Boolean expression to filter rows from the table "permissions". All fields are combined with a logical 'AND'.
type Permissions_bool_exp struct {
	And         []Permissions_bool_exp `json:"_and"`
	Not         *Permissions_bool_exp  `json:"_not"`
	Or          []Permissions_bool_exp `json:"_or"`
	Permissions Int8_comparison_exp    `json:"permissions"`
	Project     Project_bool_exp       `json:"project"`
	Project_id  Bigint_comparison_exp  `json:"project_id"`
}

// unique or primary key constraints on table "permissions"
type Permissions_constraint string

const (
	// unique or primary key constraint
	Permissions_constraintIdx1943037Primary Permissions_constraint = "idx_1943037_primary"
)

// input type for inserting data into table "permissions"
type Permissions_insert_input struct {
	Permissions []int64                      `json:"permissions"`
	Project     Project_obj_rel_insert_input `json:"project"`
	Project_id  int64                        `json:"project_id"`
}

// input type for inserting object relation for remote table "permissions"
type Permissions_obj_rel_insert_input struct {
	Data Permissions_insert_input `json:"data"`
	// on conflict condition
	On_conflict Permissions_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "permissions"
type Permissions_on_conflict struct {
	Constraint     Permissions_constraint      `json:"constraint"`
	Update_columns []Permissions_update_column `json:"update_columns"`
	Where          Permissions_bool_exp        `json:"where"`
}

// update columns of table "permissions"
type Permissions_update_column string

const (
	// column name
	Permissions_update_columnPermissions Permissions_update_column = "permissions"
	// column name
	Permissions_update_columnProjectId Permissions_update_column = "project_id"
)

// input type for inserting array relation for remote table "project_allowed_users"
type Project_allowed_users_arr_rel_insert_input struct {
	Data []Project_allowed_users_insert_input `json:"data"`
}

// Boolean expression to filter rows from the table "project_allowed_users". All fields are combined with a logical 'AND'.
type Project_allowed_users_bool_exp struct {
	And        []Project_allowed_users_bool_exp `json:"_and"`
	Not        *Project_allowed_users_bool_exp  `json:"_not"`
	Or         []Project_allowed_users_bool_exp `json:"_or"`
	Project_id Bigint_comparison_exp            `json:"project_id"`
	Role       String_comparison_exp            `json:"role"`
	User_id    Bigint_comparison_exp            `json:"user_id"`
}

// input type for inserting data into table "project_allowed_users"
type Project_allowed_users_insert_input struct {
	Project_id int64  `json:"project_id"`
	Role       string `json:"role"`
	User_id    int64  `json:"user_id"`
}

// input type for inserting array relation for remote table "project"
type Project_arr_rel_insert_input struct {
	Data []Project_insert_input `json:"data"`
	// on conflict condition
	On_conflict Project_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'.
type Project_bool_exp struct {
	And               []Project_bool_exp              `json:"_and"`
	Not               *Project_bool_exp               `json:"_not"`
	Or                []Project_bool_exp              `json:"_or"`
	Allowed_clients   *User_client_access_bool_exp    `json:"allowed_clients"`
	Allowed_users     *Project_allowed_users_bool_exp `json:"allowed_users"`
	Assigned_user     Bigint_comparison_exp           `json:"assigned_user"`
	Budget            Float8_comparison_exp           `json:"budget"`
	Category          String_comparison_exp           `json:"category"`
	Client            *Client_bool_exp                `json:"client"`
	Client_id         Bigint_comparison_exp           `json:"client_id"`
	Comments          *Comment_bool_exp               `json:"comments"`
	Create_user       Bigint_comparison_exp           `json:"create_user"`
	Created           Timestamptz_comparison_exp      `json:"created"`
	Created_by        *Users_bool_exp                 `json:"created_by"`
	Estimated_hours   Bigint_comparison_exp           `json:"estimated_hours"`
	Files             File_bool_exp                   `json:"files"`
	Hourly_rate       Float8_comparison_exp           `json:"hourly_rate"`
	Id                Bigint_comparison_exp           `json:"id"`
	Lowercase_name    String_comparison_exp           `json:"lowercase_name"`
	Milestones        Milestone_bool_exp              `json:"milestones"`
	Modified          Timestamptz_comparison_exp      `json:"modified"`
	Name              String_comparison_exp           `json:"name"`
	Notes             String_comparison_exp           `json:"notes"`
	Options           String_comparison_exp           `json:"options"`
	Pcat              *Project_category_bool_exp      `json:"pcat"`
	Permissions       *Permissions_bool_exp           `json:"permissions"`
	Reminder_sent     Timestamptz_comparison_exp      `json:"reminder_sent"`
	Responsible       *Users_bool_exp                 `json:"responsible"`
	Start_date        Timestamptz_comparison_exp      `json:"start_date"`
	Status            String_comparison_exp           `json:"status"`
	Target_date       Timestamptz_comparison_exp      `json:"target_date"`
	Tasks             *Task_bool_exp                  `json:"tasks"`
	Time_entries      *Time_entry_bool_exp            `json:"time_entries"`
	Time_entry_cutoff Project_time_cutoff_bool_exp    `json:"time_entry_cutoff"`
	Update_user       Bigint_comparison_exp           `json:"update_user"`
	Updated_by        *Users_bool_exp                 `json:"updated_by"`
}

// input type for inserting array relation for remote table "project_category"
type Project_category_arr_rel_insert_input struct {
	Data []Project_category_insert_input `json:"data"`
	// on conflict condition
	On_conflict Project_category_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "project_category". All fields are combined with a logical 'AND'.
type Project_category_bool_exp struct {
	And        []Project_category_bool_exp `json:"_and"`
	Not        *Project_category_bool_exp  `json:"_not"`
	Or         []Project_category_bool_exp `json:"_or"`
	Account    Account_bool_exp            `json:"account"`
	Account_id Bigint_comparison_exp       `json:"account_id"`
	Id         Bigint_comparison_exp       `json:"id"`
	Name       String_comparison_exp       `json:"name"`
}

// unique or primary key constraints on table "project_category"
type Project_category_constraint string

const (
	// unique or primary key constraint
	Project_category_constraintIdx1943057Primary Project_category_constraint = "idx_1943057_primary"
)

// input type for inserting data into table "project_category"
type Project_category_insert_input struct {
	Account    Account_obj_rel_insert_input `json:"account"`
	Account_id int64                        `json:"account_id"`
	Id         int64                        `json:"id"`
	Name       string                       `json:"name"`
}

// input type for inserting object relation for remote table "project_category"
type Project_category_obj_rel_insert_input struct {
	Data Project_category_insert_input `json:"data"`
	// on conflict condition
	On_conflict Project_category_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "project_category"
type Project_category_on_conflict struct {
	Constraint     Project_category_constraint      `json:"constraint"`
	Update_columns []Project_category_update_column `json:"update_columns"`
	Where          Project_category_bool_exp        `json:"where"`
}

// update columns of table "project_category"
type Project_category_update_column string

const (
	// column name
	Project_category_update_columnAccountId Project_category_update_column = "account_id"
	// column name
	Project_category_update_columnId Project_category_update_column = "id"
	// column name
	Project_category_update_columnName Project_category_update_column = "name"
)

// unique or primary key constraints on table "project"
type Project_constraint string

const (
	// unique or primary key constraint
	Project_constraintIdx1943045Primary Project_constraint = "idx_1943045_primary"
)

// input type for inserting data into table "project"
type Project_insert_input struct {
	Allowed_clients   User_client_access_arr_rel_insert_input    `json:"allowed_clients"`
	Allowed_users     Project_allowed_users_arr_rel_insert_input `json:"allowed_users"`
	Assigned_user     int64                                      `json:"assigned_user"`
	Budget            float32                                    `json:"budget"`
	Category          string                                     `json:"category"`
	Client            Client_obj_rel_insert_input                `json:"client"`
	Client_id         int64                                      `json:"client_id"`
	Comments          Comment_arr_rel_insert_input               `json:"comments"`
	Create_user       int64                                      `json:"create_user"`
	Created           time.Time                                  `json:"created"`
	Created_by        Users_obj_rel_insert_input                 `json:"created_by"`
	Estimated_hours   int64                                      `json:"estimated_hours"`
	Files             File_arr_rel_insert_input                  `json:"files"`
	Hourly_rate       float32                                    `json:"hourly_rate"`
	Id                int64                                      `json:"id"`
	Lowercase_name    string                                     `json:"lowercase_name"`
	Milestones        Milestone_arr_rel_insert_input             `json:"milestones"`
	Modified          time.Time                                  `json:"modified"`
	Name              string                                     `json:"name"`
	Notes             string                                     `json:"notes"`
	Options           string                                     `json:"options"`
	Pcat              *Project_category_obj_rel_insert_input     `json:"pcat"`
	Permissions       *Permissions_obj_rel_insert_input          `json:"permissions"`
	Reminder_sent     time.Time                                  `json:"reminder_sent"`
	Responsible       Users_obj_rel_insert_input                 `json:"responsible"`
	Start_date        time.Time                                  `json:"start_date"`
	Status            string                                     `json:"status"`
	Target_date       time.Time                                  `json:"target_date"`
	Tasks             Task_arr_rel_insert_input                  `json:"tasks"`
	Time_entries      Time_entry_arr_rel_insert_input            `json:"time_entries"`
	Time_entry_cutoff Project_time_cutoff_obj_rel_insert_input   `json:"time_entry_cutoff"`
	Update_user       int64                                      `json:"update_user"`
	Updated_by        Users_obj_rel_insert_input                 `json:"updated_by"`
}

// input type for inserting object relation for remote table "project"
type Project_obj_rel_insert_input struct {
	Data Project_insert_input `json:"data"`
	// on conflict condition
	On_conflict Project_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "project"
type Project_on_conflict struct {
	Constraint     Project_constraint      `json:"constraint"`
	Update_columns []Project_update_column `json:"update_columns"`
	Where          Project_bool_exp        `json:"where"`
}

// Boolean expression to filter rows from the table "project_time_cutoff". All fields are combined with a logical 'AND'.
type Project_time_cutoff_bool_exp struct {
	And         []Project_time_cutoff_bool_exp `json:"_and"`
	Not         *Project_time_cutoff_bool_exp  `json:"_not"`
	Or          []Project_time_cutoff_bool_exp `json:"_or"`
	Cutoff_date Date_comparison_exp            `json:"cutoff_date"`
	Project_id  Bigint_comparison_exp          `json:"project_id"`
}

// input type for inserting data into table "project_time_cutoff"
type Project_time_cutoff_insert_input struct {
	Cutoff_date time.Time `json:"cutoff_date"`
	Project_id  int64     `json:"project_id"`
}

// input type for inserting object relation for remote table "project_time_cutoff"
type Project_time_cutoff_obj_rel_insert_input struct {
	Data Project_time_cutoff_insert_input `json:"data"`
}

// update columns of table "project"
type Project_update_column string

const (
	// column name
	Project_update_columnAssignedUser Project_update_column = "assigned_user"
	// column name
	Project_update_columnBudget Project_update_column = "budget"
	// column name
	Project_update_columnCategory Project_update_column = "category"
	// column name
	Project_update_columnClientId Project_update_column = "client_id"
	// column name
	Project_update_columnCreateUser Project_update_column = "create_user"
	// column name
	Project_update_columnCreated Project_update_column = "created"
	// column name
	Project_update_columnEstimatedHours Project_update_column = "estimated_hours"
	// column name
	Project_update_columnHourlyRate Project_update_column = "hourly_rate"
	// column name
	Project_update_columnId Project_update_column = "id"
	// column name
	Project_update_columnLowercaseName Project_update_column = "lowercase_name"
	// column name
	Project_update_columnModified Project_update_column = "modified"
	// column name
	Project_update_columnName Project_update_column = "name"
	// column name
	Project_update_columnNotes Project_update_column = "notes"
	// column name
	Project_update_columnOptions Project_update_column = "options"
	// column name
	Project_update_columnReminderSent Project_update_column = "reminder_sent"
	// column name
	Project_update_columnStartDate Project_update_column = "start_date"
	// column name
	Project_update_columnStatus Project_update_column = "status"
	// column name
	Project_update_columnTargetDate Project_update_column = "target_date"
	// column name
	Project_update_columnUpdateUser Project_update_column = "update_user"
)

// input type for inserting array relation for remote table "settings"
type Settings_arr_rel_insert_input struct {
	Data []Settings_insert_input `json:"data"`
	// on conflict condition
	On_conflict Settings_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
type Settings_bool_exp struct {
	And        []Settings_bool_exp        `json:"_and"`
	Not        *Settings_bool_exp         `json:"_not"`
	Or         []Settings_bool_exp        `json:"_or"`
	Account    Account_bool_exp           `json:"account"`
	Account_id Bigint_comparison_exp      `json:"account_id"`
	Id         Bigint_comparison_exp      `json:"id"`
	Modified   Timestamptz_comparison_exp `json:"modified"`
	Name       String_comparison_exp      `json:"name"`
	User_id    Bigint_comparison_exp      `json:"user_id"`
	Value      String_comparison_exp      `json:"value"`
}

// unique or primary key constraints on table "settings"
type Settings_constraint string

const (
	// unique or primary key constraint
	Settings_constraintIdx1943066Primary Settings_constraint = "idx_1943066_primary"
)

// input type for inserting data into table "settings"
type Settings_insert_input struct {
	Account    Account_obj_rel_insert_input `json:"account"`
	Account_id int64                        `json:"account_id"`
	Id         int64                        `json:"id"`
	Modified   time.Time                    `json:"modified"`
	Name       string                       `json:"name"`
	User_id    int64                        `json:"user_id"`
	Value      string                       `json:"value"`
}

// on conflict condition type for table "settings"
type Settings_on_conflict struct {
	Constraint     Settings_constraint      `json:"constraint"`
	Update_columns []Settings_update_column `json:"update_columns"`
	Where          Settings_bool_exp        `json:"where"`
}

// update columns of table "settings"
type Settings_update_column string

const (
	// column name
	Settings_update_columnAccountId Settings_update_column = "account_id"
	// column name
	Settings_update_columnId Settings_update_column = "id"
	// column name
	Settings_update_columnModified Settings_update_column = "modified"
	// column name
	Settings_update_columnName Settings_update_column = "name"
	// column name
	Settings_update_columnUserId Settings_update_column = "user_id"
	// column name
	Settings_update_columnValue Settings_update_column = "value"
)

// Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
type String_comparison_exp struct {
	Eq  string `json:"_eq"`
	Gt  string `json:"_gt"`
	Gte string `json:"_gte"`
	// does the column match the given case-insensitive pattern
	Ilike string   `json:"_ilike"`
	In    []string `json:"_in"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex  string `json:"_iregex"`
	Is_null bool   `json:"_is_null"`
	// does the column match the given pattern
	Like string `json:"_like"`
	Lt   string `json:"_lt"`
	Lte  string `json:"_lte"`
	Neq  string `json:"_neq"`
	// does the column NOT match the given case-insensitive pattern
	Nilike string   `json:"_nilike"`
	Nin    []string `json:"_nin"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex string `json:"_niregex"`
	// does the column NOT match the given pattern
	Nlike string `json:"_nlike"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex string `json:"_nregex"`
	// does the column NOT match the given SQL regular expression
	Nsimilar string `json:"_nsimilar"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex string `json:"_regex"`
	// does the column match the given SQL regular expression
	Similar string `json:"_similar"`
}

// input type for inserting array relation for remote table "task_allowed_users"
type Task_allowed_users_arr_rel_insert_input struct {
	Data []Task_allowed_users_insert_input `json:"data"`
}

// Boolean expression to filter rows from the table "task_allowed_users". All fields are combined with a logical 'AND'.
type Task_allowed_users_bool_exp struct {
	And     []Task_allowed_users_bool_exp `json:"_and"`
	Not     *Task_allowed_users_bool_exp  `json:"_not"`
	Or      []Task_allowed_users_bool_exp `json:"_or"`
	Task_id Bigint_comparison_exp         `json:"task_id"`
	User_id Bigint_comparison_exp         `json:"user_id"`
}

// input type for inserting data into table "task_allowed_users"
type Task_allowed_users_insert_input struct {
	Task_id int64 `json:"task_id"`
	User_id int64 `json:"user_id"`
}

// input type for inserting array relation for remote table "task"
type Task_arr_rel_insert_input struct {
	Data []Task_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'.
type Task_bool_exp struct {
	And            []Task_bool_exp             `json:"_and"`
	Not            *Task_bool_exp              `json:"_not"`
	Or             []Task_bool_exp             `json:"_or"`
	Allowed_users  Task_allowed_users_bool_exp `json:"allowed_users"`
	Budget         Float8_comparison_exp       `json:"budget"`
	Category       Task_category_bool_exp      `json:"category"`
	Category_id    Bigint_comparison_exp       `json:"category_id"`
	Comments       *Task_comment_bool_exp      `json:"comments"`
	Completed      Timestamptz_comparison_exp  `json:"completed"`
	Create_user    Bigint_comparison_exp       `json:"create_user"`
	Created        Timestamptz_comparison_exp  `json:"created"`
	Created_by     *Users_bool_exp             `json:"created_by"`
	File_link      *Task_file_link_bool_exp    `json:"file_link"`
	Hourly_rate    Float8_comparison_exp       `json:"hourly_rate"`
	Id             Bigint_comparison_exp       `json:"id"`
	Lowercase_name String_comparison_exp       `json:"lowercase_name"`
	Milestone      Milestone_bool_exp          `json:"milestone"`
	Milestone_id   Bigint_comparison_exp       `json:"milestone_id"`
	Modified       Timestamptz_comparison_exp  `json:"modified"`
	Name           String_comparison_exp       `json:"name"`
	Notes          String_comparison_exp       `json:"notes"`
	Project        Project_bool_exp            `json:"project"`
	Project_id     Bigint_comparison_exp       `json:"project_id"`
	Reminder_sent  Timestamptz_comparison_exp  `json:"reminder_sent"`
	Start_date     Timestamptz_comparison_exp  `json:"start_date"`
	Status         String_comparison_exp       `json:"status"`
	Target_date    Timestamptz_comparison_exp  `json:"target_date"`
	Time_entries   *Time_entry_bool_exp        `json:"time_entries"`
	Update_user    Bigint_comparison_exp       `json:"update_user"`
	Updated_by     *Users_bool_exp             `json:"updated_by"`
	Users          *Task_user_bool_exp         `json:"users"`
	Visibility     String_comparison_exp       `json:"visibility"`
}

// input type for inserting array relation for remote table "task_category"
type Task_category_arr_rel_insert_input struct {
	Data []Task_category_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_category_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task_category". All fields are combined with a logical 'AND'.
type Task_category_bool_exp struct {
	And        []Task_category_bool_exp `json:"_and"`
	Not        *Task_category_bool_exp  `json:"_not"`
	Or         []Task_category_bool_exp `json:"_or"`
	Account    Account_bool_exp         `json:"account"`
	Account_id Bigint_comparison_exp    `json:"account_id"`
	Id         Bigint_comparison_exp    `json:"id"`
	Name       String_comparison_exp    `json:"name"`
}

// unique or primary key constraints on table "task_category"
type Task_category_constraint string

const (
	// unique or primary key constraint
	Task_category_constraintIdx1943088Primary Task_category_constraint = "idx_1943088_primary"
)

// input type for inserting data into table "task_category"
type Task_category_insert_input struct {
	Account    Account_obj_rel_insert_input `json:"account"`
	Account_id int64                        `json:"account_id"`
	Id         int64                        `json:"id"`
	Name       string                       `json:"name"`
}

// input type for inserting object relation for remote table "task_category"
type Task_category_obj_rel_insert_input struct {
	Data Task_category_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_category_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "task_category"
type Task_category_on_conflict struct {
	Constraint     Task_category_constraint      `json:"constraint"`
	Update_columns []Task_category_update_column `json:"update_columns"`
	Where          Task_category_bool_exp        `json:"where"`
}

// update columns of table "task_category"
type Task_category_update_column string

const (
	// column name
	Task_category_update_columnAccountId Task_category_update_column = "account_id"
	// column name
	Task_category_update_columnId Task_category_update_column = "id"
	// column name
	Task_category_update_columnName Task_category_update_column = "name"
)

// input type for inserting array relation for remote table "task_comment"
type Task_comment_arr_rel_insert_input struct {
	Data []Task_comment_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_comment_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task_comment". All fields are combined with a logical 'AND'.
type Task_comment_bool_exp struct {
	And             []Task_comment_bool_exp    `json:"_and"`
	Not             *Task_comment_bool_exp     `json:"_not"`
	Or              []Task_comment_bool_exp    `json:"_or"`
	Create_user     Bigint_comparison_exp      `json:"create_user"`
	Created         Timestamptz_comparison_exp `json:"created"`
	Created_by      *Users_bool_exp            `json:"created_by"`
	Id              Bigint_comparison_exp      `json:"id"`
	Message         String_comparison_exp      `json:"message"`
	Notify_user_ids Jsonb_comparison_exp       `json:"notify_user_ids"`
	Task            *Task_bool_exp             `json:"task"`
	Task_id         Bigint_comparison_exp      `json:"task_id"`
}

// unique or primary key constraints on table "task_comment"
type Task_comment_constraint string

const (
	// unique or primary key constraint
	Task_comment_constraintIdx1943097Primary Task_comment_constraint = "idx_1943097_primary"
)

// input type for inserting data into table "task_comment"
type Task_comment_insert_input struct {
	Create_user     int64                      `json:"create_user"`
	Created         time.Time                  `json:"created"`
	Created_by      Users_obj_rel_insert_input `json:"created_by"`
	Id              int64                      `json:"id"`
	Message         string                     `json:"message"`
	Notify_user_ids interface{}                `json:"notify_user_ids"`
	Task            Task_obj_rel_insert_input  `json:"task"`
	Task_id         int64                      `json:"task_id"`
}

// on conflict condition type for table "task_comment"
type Task_comment_on_conflict struct {
	Constraint     Task_comment_constraint      `json:"constraint"`
	Update_columns []Task_comment_update_column `json:"update_columns"`
	Where          Task_comment_bool_exp        `json:"where"`
}

// update columns of table "task_comment"
type Task_comment_update_column string

const (
	// column name
	Task_comment_update_columnCreateUser Task_comment_update_column = "create_user"
	// column name
	Task_comment_update_columnCreated Task_comment_update_column = "created"
	// column name
	Task_comment_update_columnId Task_comment_update_column = "id"
	// column name
	Task_comment_update_columnMessage Task_comment_update_column = "message"
	// column name
	Task_comment_update_columnNotifyUserIds Task_comment_update_column = "notify_user_ids"
	// column name
	Task_comment_update_columnTaskId Task_comment_update_column = "task_id"
)

// unique or primary key constraints on table "task"
type Task_constraint string

const (
	// unique or primary key constraint
	Task_constraintIdx1943076Primary Task_constraint = "idx_1943076_primary"
)

// input type for inserting array relation for remote table "task_file_link"
type Task_file_link_arr_rel_insert_input struct {
	Data []Task_file_link_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_file_link_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task_file_link". All fields are combined with a logical 'AND'.
type Task_file_link_bool_exp struct {
	And     []Task_file_link_bool_exp `json:"_and"`
	Not     *Task_file_link_bool_exp  `json:"_not"`
	Or      []Task_file_link_bool_exp `json:"_or"`
	File    File_bool_exp             `json:"file"`
	File_id Bigint_comparison_exp     `json:"file_id"`
	Id      Bigint_comparison_exp     `json:"id"`
	Task    Task_bool_exp             `json:"task"`
	Task_id Bigint_comparison_exp     `json:"task_id"`
}

// unique or primary key constraints on table "task_file_link"
type Task_file_link_constraint string

const (
	// unique or primary key constraint
	Task_file_link_constraintIdx1943106Primary Task_file_link_constraint = "idx_1943106_primary"
)

// input type for inserting data into table "task_file_link"
type Task_file_link_insert_input struct {
	File    File_obj_rel_insert_input `json:"file"`
	File_id int64                     `json:"file_id"`
	Id      int64                     `json:"id"`
	Task    Task_obj_rel_insert_input `json:"task"`
	Task_id int64                     `json:"task_id"`
}

// input type for inserting object relation for remote table "task_file_link"
type Task_file_link_obj_rel_insert_input struct {
	Data Task_file_link_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_file_link_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "task_file_link"
type Task_file_link_on_conflict struct {
	Constraint     Task_file_link_constraint      `json:"constraint"`
	Update_columns []Task_file_link_update_column `json:"update_columns"`
	Where          Task_file_link_bool_exp        `json:"where"`
}

// update columns of table "task_file_link"
type Task_file_link_update_column string

const (
	// column name
	Task_file_link_update_columnFileId Task_file_link_update_column = "file_id"
	// column name
	Task_file_link_update_columnId Task_file_link_update_column = "id"
	// column name
	Task_file_link_update_columnTaskId Task_file_link_update_column = "task_id"
)

// input type for inserting data into table "task"
type Task_insert_input struct {
	Allowed_users  Task_allowed_users_arr_rel_insert_input `json:"allowed_users"`
	Budget         float32                                 `json:"budget"`
	Category       Task_category_obj_rel_insert_input      `json:"category"`
	Category_id    int64                                   `json:"category_id"`
	Comments       Task_comment_arr_rel_insert_input       `json:"comments"`
	Completed      time.Time                               `json:"completed"`
	Create_user    int64                                   `json:"create_user"`
	Created        time.Time                               `json:"created"`
	Created_by     Users_obj_rel_insert_input              `json:"created_by"`
	File_link      *Task_file_link_obj_rel_insert_input    `json:"file_link"`
	Hourly_rate    float32                                 `json:"hourly_rate"`
	Id             int64                                   `json:"id"`
	Lowercase_name string                                  `json:"lowercase_name"`
	Milestone      Milestone_obj_rel_insert_input          `json:"milestone"`
	Milestone_id   int64                                   `json:"milestone_id"`
	Modified       time.Time                               `json:"modified"`
	Name           string                                  `json:"name"`
	Notes          string                                  `json:"notes"`
	Project        Project_obj_rel_insert_input            `json:"project"`
	Project_id     int64                                   `json:"project_id"`
	Reminder_sent  time.Time                               `json:"reminder_sent"`
	Start_date     time.Time                               `json:"start_date"`
	Status         string                                  `json:"status"`
	Target_date    time.Time                               `json:"target_date"`
	Time_entries   Time_entry_arr_rel_insert_input         `json:"time_entries"`
	Update_user    int64                                   `json:"update_user"`
	Updated_by     Users_obj_rel_insert_input              `json:"updated_by"`
	Users          Task_user_arr_rel_insert_input          `json:"users"`
	Visibility     string                                  `json:"visibility"`
}

// input type for inserting object relation for remote table "task"
type Task_obj_rel_insert_input struct {
	Data Task_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "task"
type Task_on_conflict struct {
	Constraint     Task_constraint      `json:"constraint"`
	Update_columns []Task_update_column `json:"update_columns"`
	Where          Task_bool_exp        `json:"where"`
}

// input type for inserting array relation for remote table "task_timer"
type Task_timer_arr_rel_insert_input struct {
	Data []Task_timer_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_timer_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task_timer". All fields are combined with a logical 'AND'.
type Task_timer_bool_exp struct {
	And           []Task_timer_bool_exp      `json:"_and"`
	Not           *Task_timer_bool_exp       `json:"_not"`
	Or            []Task_timer_bool_exp      `json:"_or"`
	Description   String_comparison_exp      `json:"description"`
	Id            Bigint_comparison_exp      `json:"id"`
	Location      String_comparison_exp      `json:"location"`
	Started_at    Timestamptz_comparison_exp `json:"started_at"`
	Stopped_at    Timestamptz_comparison_exp `json:"stopped_at"`
	Task          *Task_bool_exp             `json:"task"`
	Task_id       Bigint_comparison_exp      `json:"task_id"`
	Time_entry_id Bigint_comparison_exp      `json:"time_entry_id"`
	User          *Users_bool_exp            `json:"user"`
	User_id       Bigint_comparison_exp      `json:"user_id"`
}

// unique or primary key constraints on table "task_timer"
type Task_timer_constraint string

const (
	// unique or primary key constraint
	Task_timer_constraintTaskTimerPkey Task_timer_constraint = "task_timer_pkey"
)

// input type for inserting data into table "task_timer"
type Task_timer_insert_input struct {
	Description   string                     `json:"description"`
	Id            int64                      `json:"id"`
	Location      string                     `json:"location"`
	Started_at    time.Time                  `json:"started_at"`
	Stopped_at    time.Time                  `json:"stopped_at"`
	Task          Task_obj_rel_insert_input  `json:"task"`
	Task_id       int64                      `json:"task_id"`
	Time_entry_id int64                      `json:"time_entry_id"`
	User          Users_obj_rel_insert_input `json:"user"`
	User_id       int64                      `json:"user_id"`
}

// on conflict condition type for table "task_timer"
type Task_timer_on_conflict struct {
	Constraint     Task_timer_constraint      `json:"constraint"`
	Update_columns []Task_timer_update_column `json:"update_columns"`
	Where          Task_timer_bool_exp        `json:"where"`
}

// update columns of table "task_timer"
type Task_timer_update_column string

const (
	// column name
	Task_timer_update_columnDescription Task_timer_update_column = "description"
	// column name
	Task_timer_update_columnId Task_timer_update_column = "id"
	// column name
	Task_timer_update_columnLocation Task_timer_update_column = "location"
	// column name
	Task_timer_update_columnStartedAt Task_timer_update_column = "started_at"
	// column name
	Task_timer_update_columnStoppedAt Task_timer_update_column = "stopped_at"
	// column name
	Task_timer_update_columnTaskId Task_timer_update_column = "task_id"
	// column name
	Task_timer_update_columnTimeEntryId Task_timer_update_column = "time_entry_id"
	// column name
	Task_timer_update_columnUserId Task_timer_update_column = "user_id"
)

// update columns of table "task"
type Task_update_column string

const (
	// column name
	Task_update_columnBudget Task_update_column = "budget"
	// column name
	Task_update_columnCategoryId Task_update_column = "category_id"
	// column name
	Task_update_columnCompleted Task_update_column = "completed"
	// column name
	Task_update_columnCreateUser Task_update_column = "create_user"
	// column name
	Task_update_columnCreated Task_update_column = "created"
	// column name
	Task_update_columnHourlyRate Task_update_column = "hourly_rate"
	// column name
	Task_update_columnId Task_update_column = "id"
	// column name
	Task_update_columnLowercaseName Task_update_column = "lowercase_name"
	// column name
	Task_update_columnMilestoneId Task_update_column = "milestone_id"
	// column name
	Task_update_columnModified Task_update_column = "modified"
	// column name
	Task_update_columnName Task_update_column = "name"
	// column name
	Task_update_columnNotes Task_update_column = "notes"
	// column name
	Task_update_columnProjectId Task_update_column = "project_id"
	// column name
	Task_update_columnReminderSent Task_update_column = "reminder_sent"
	// column name
	Task_update_columnStartDate Task_update_column = "start_date"
	// column name
	Task_update_columnStatus Task_update_column = "status"
	// column name
	Task_update_columnTargetDate Task_update_column = "target_date"
	// column name
	Task_update_columnUpdateUser Task_update_column = "update_user"
	// column name
	Task_update_columnVisibility Task_update_column = "visibility"
)

// input type for inserting array relation for remote table "task_user"
type Task_user_arr_rel_insert_input struct {
	Data []Task_user_insert_input `json:"data"`
	// on conflict condition
	On_conflict Task_user_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "task_user". All fields are combined with a logical 'AND'.
type Task_user_bool_exp struct {
	And     []Task_user_bool_exp  `json:"_and"`
	Not     *Task_user_bool_exp   `json:"_not"`
	Or      []Task_user_bool_exp  `json:"_or"`
	Id      Bigint_comparison_exp `json:"id"`
	Task    *Task_bool_exp        `json:"task"`
	Task_id Bigint_comparison_exp `json:"task_id"`
	User    *Users_bool_exp       `json:"user"`
	User_id Bigint_comparison_exp `json:"user_id"`
}

// unique or primary key constraints on table "task_user"
type Task_user_constraint string

const (
	// unique or primary key constraint
	Task_user_constraintTaskUserPkey Task_user_constraint = "task_user_pkey"
)

// input type for inserting data into table "task_user"
type Task_user_insert_input struct {
	Id      int64                      `json:"id"`
	Task    Task_obj_rel_insert_input  `json:"task"`
	Task_id int64                      `json:"task_id"`
	User    Users_obj_rel_insert_input `json:"user"`
	User_id int64                      `json:"user_id"`
}

// on conflict condition type for table "task_user"
type Task_user_on_conflict struct {
	Constraint     Task_user_constraint      `json:"constraint"`
	Update_columns []Task_user_update_column `json:"update_columns"`
	Where          Task_user_bool_exp        `json:"where"`
}

// update columns of table "task_user"
type Task_user_update_column string

const (
	// column name
	Task_user_update_columnId Task_user_update_column = "id"
	// column name
	Task_user_update_columnTaskId Task_user_update_column = "task_id"
	// column name
	Task_user_update_columnUserId Task_user_update_column = "user_id"
)

// input type for inserting array relation for remote table "time_entry"
type Time_entry_arr_rel_insert_input struct {
	Data []Time_entry_insert_input `json:"data"`
	// on conflict condition
	On_conflict Time_entry_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "time_entry". All fields are combined with a logical 'AND'.
type Time_entry_bool_exp struct {
	And         []Time_entry_bool_exp      `json:"_and"`
	Not         *Time_entry_bool_exp       `json:"_not"`
	Or          []Time_entry_bool_exp      `json:"_or"`
	Comment     String_comparison_exp      `json:"comment"`
	Created     Timestamptz_comparison_exp `json:"created"`
	Entry_date  Timestamp_comparison_exp   `json:"entry_date"`
	Entry_hours Float8_comparison_exp      `json:"entry_hours"`
	Entry_user  Bigint_comparison_exp      `json:"entry_user"`
	Id          Bigint_comparison_exp      `json:"id"`
	Location    String_comparison_exp      `json:"location"`
	Modified    Timestamptz_comparison_exp `json:"modified"`
	Project     *Project_bool_exp          `json:"project"`
	Project_id  Bigint_comparison_exp      `json:"project_id"`
	Task        Task_bool_exp              `json:"task"`
	Task_id     Bigint_comparison_exp      `json:"task_id"`
	Task_timers Task_timer_bool_exp        `json:"task_timers"`
	User        *Users_bool_exp            `json:"user"`
}

// unique or primary key constraints on table "time_entry"
type Time_entry_constraint string

const (
	// unique or primary key constraint
	Time_entry_constraintIdx1943112Primary Time_entry_constraint = "idx_1943112_primary"
)

// input type for inserting data into table "time_entry"
type Time_entry_insert_input struct {
	Comment     string                          `json:"comment"`
	Created     time.Time                       `json:"created"`
	Entry_date  time.Time                       `json:"entry_date"`
	Entry_hours float32                         `json:"entry_hours"`
	Entry_user  int64                           `json:"entry_user"`
	Id          int64                           `json:"id"`
	Location    string                          `json:"location"`
	Modified    time.Time                       `json:"modified"`
	Project     Project_obj_rel_insert_input    `json:"project"`
	Project_id  int64                           `json:"project_id"`
	Task        Task_obj_rel_insert_input       `json:"task"`
	Task_id     int64                           `json:"task_id"`
	Task_timers Task_timer_arr_rel_insert_input `json:"task_timers"`
	User        Users_obj_rel_insert_input      `json:"user"`
}

// input type for inserting array relation for remote table "time_entry_location"
type Time_entry_location_arr_rel_insert_input struct {
	Data []Time_entry_location_insert_input `json:"data"`
	// on conflict condition
	On_conflict Time_entry_location_on_conflict `json:"on_conflict"`
}

// Boolean expression to filter rows from the table "time_entry_location". All fields are combined with a logical 'AND'.
type Time_entry_location_bool_exp struct {
	And        []Time_entry_location_bool_exp `json:"_and"`
	Not        *Time_entry_location_bool_exp  `json:"_not"`
	Or         []Time_entry_location_bool_exp `json:"_or"`
	Account_id Bigint_comparison_exp          `json:"account_id"`
	Id         Bigint_comparison_exp          `json:"id"`
	Location   String_comparison_exp          `json:"location"`
}

// unique or primary key constraints on table "time_entry_location"
type Time_entry_location_constraint string

const (
	// unique or primary key constraint
	Time_entry_location_constraintTimeEntryLocationPkey Time_entry_location_constraint = "time_entry_location_pkey"
	// unique or primary key constraint
	Time_entry_location_constraintTimeLocationAccountLocIndx Time_entry_location_constraint = "time_location_account_loc_indx"
)

// input type for inserting data into table "time_entry_location"
type Time_entry_location_insert_input struct {
	Account_id int64  `json:"account_id"`
	Id         int64  `json:"id"`
	Location   string `json:"location"`
}

// on conflict condition type for table "time_entry_location"
type Time_entry_location_on_conflict struct {
	Constraint     Time_entry_location_constraint      `json:"constraint"`
	Update_columns []Time_entry_location_update_column `json:"update_columns"`
	Where          Time_entry_location_bool_exp        `json:"where"`
}

// update columns of table "time_entry_location"
type Time_entry_location_update_column string

const (
	// column name
	Time_entry_location_update_columnAccountId Time_entry_location_update_column = "account_id"
	// column name
	Time_entry_location_update_columnId Time_entry_location_update_column = "id"
	// column name
	Time_entry_location_update_columnLocation Time_entry_location_update_column = "location"
)

// on conflict condition type for table "time_entry"
type Time_entry_on_conflict struct {
	Constraint     Time_entry_constraint      `json:"constraint"`
	Update_columns []Time_entry_update_column `json:"update_columns"`
	Where          Time_entry_bool_exp        `json:"where"`
}

// update columns of table "time_entry"
type Time_entry_update_column string

const (
	// column name
	Time_entry_update_columnComment Time_entry_update_column = "comment"
	// column name
	Time_entry_update_columnCreated Time_entry_update_column = "created"
	// column name
	Time_entry_update_columnEntryDate Time_entry_update_column = "entry_date"
	// column name
	Time_entry_update_columnEntryHours Time_entry_update_column = "entry_hours"
	// column name
	Time_entry_update_columnEntryUser Time_entry_update_column = "entry_user"
	// column name
	Time_entry_update_columnId Time_entry_update_column = "id"
	// column name
	Time_entry_update_columnLocation Time_entry_update_column = "location"
	// column name
	Time_entry_update_columnModified Time_entry_update_column = "modified"
	// column name
	Time_entry_update_columnProjectId Time_entry_update_column = "project_id"
	// column name
	Time_entry_update_columnTaskId Time_entry_update_column = "task_id"
)

// Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
type Timestamp_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
type Timestamptz_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// UserEmail includes the GraphQL fields of users requested by the fragment UserEmail.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type UserEmail struct {
	Email     string `json:"email"`
	Full_name string `json:"full_name"`
}

// input type for inserting array relation for remote table "user_client_access"
type User_client_access_arr_rel_insert_input struct {
	Data []User_client_access_insert_input `json:"data"`
}

// Boolean expression to filter rows from the table "user_client_access". All fields are combined with a logical 'AND'.
type User_client_access_bool_exp struct {
	And       []User_client_access_bool_exp `json:"_and"`
	Not       *User_client_access_bool_exp  `json:"_not"`
	Or        []User_client_access_bool_exp `json:"_or"`
	Client_id Bigint_comparison_exp         `json:"client_id"`
	Role      String_comparison_exp         `json:"role"`
	User_id   Bigint_comparison_exp         `json:"user_id"`
}

// input type for inserting data into table "user_client_access"
type User_client_access_insert_input struct {
	Client_id int64  `json:"client_id"`
	Role      string `json:"role"`
	User_id   int64  `json:"user_id"`
}

// input type for inserting object relation for remote table "user_client_access"
type User_client_access_obj_rel_insert_input struct {
	Data User_client_access_insert_input `json:"data"`
}

// input type for inserting data into table "user_temp"
type User_temp_insert_input struct {
	Activation_code string    `json:"activation_code"`
	Company_name    string    `json:"company_name"`
	Country_id      int       `json:"country_id"`
	Created         time.Time `json:"created"`
	Email           string    `json:"email"`
	First_name      string    `json:"first_name"`
	Id              int64     `json:"id"`
	Last_name       string    `json:"last_name"`
	Password        string    `json:"password"`
	Source          string    `json:"source"`
	Subdomain       string    `json:"subdomain"`
	Timezone        string    `json:"timezone"`
	User_name       string    `json:"user_name"`
}

// Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
type Users_bool_exp struct {
	And                     []Users_bool_exp           `json:"_and"`
	Not                     *Users_bool_exp            `json:"_not"`
	Or                      []Users_bool_exp           `json:"_or"`
	Account_users           Account_user_bool_exp      `json:"account_users"`
	Availabilities          Availability_bool_exp      `json:"availabilities"`
	Banned                  Boolean_comparison_exp     `json:"banned"`
	Country_id              Int_comparison_exp         `json:"country_id"`
	Created                 Timestamptz_comparison_exp `json:"created"`
	Created_comments        Comment_bool_exp           `json:"created_comments"`
	Created_files           File_bool_exp              `json:"created_files"`
	Created_forms           Form_bool_exp              `json:"created_forms"`
	Created_projects        Project_bool_exp           `json:"created_projects"`
	Created_task_comments   Task_comment_bool_exp      `json:"created_task_comments"`
	Created_tasks           Task_bool_exp              `json:"created_tasks"`
	Email                   String_comparison_exp      `json:"email"`
	First_name              String_comparison_exp      `json:"first_name"`
	Forgotten_password_code String_comparison_exp      `json:"forgotten_password_code"`
	Full_name               String_comparison_exp      `json:"full_name"`
	Id                      Bigint_comparison_exp      `json:"id"`
	Last_name               String_comparison_exp      `json:"last_name"`
	Last_visit              Timestamptz_comparison_exp `json:"last_visit"`
	Login_count             Int_comparison_exp         `json:"login_count"`
	Lowercase_email         String_comparison_exp      `json:"lowercase_email"`
	Lowercase_user_name     String_comparison_exp      `json:"lowercase_user_name"`
	Modified                Timestamptz_comparison_exp `json:"modified"`
	Notes                   String_comparison_exp      `json:"notes"`
	Owned_accounts          Account_bool_exp           `json:"owned_accounts"`
	Password                String_comparison_exp      `json:"password"`
	Phone                   String_comparison_exp      `json:"phone"`
	Role                    String_comparison_exp      `json:"role"`
	Task_timers             Task_timer_bool_exp        `json:"task_timers"`
	Task_users              Task_user_bool_exp         `json:"task_users"`
	Time_entries            Time_entry_bool_exp        `json:"time_entries"`
	Time_entry_location     String_comparison_exp      `json:"time_entry_location"`
	Timezone                String_comparison_exp      `json:"timezone"`
	Updated_forms           Form_bool_exp              `json:"updated_forms"`
	Updated_messages        Message_bool_exp           `json:"updated_messages"`
	Updated_projects        Project_bool_exp           `json:"updated_projects"`
	Updated_tasks           Task_bool_exp              `json:"updated_tasks"`
	User_name               String_comparison_exp      `json:"user_name"`
	Visible_to              Visible_users_bool_exp     `json:"visible_to"`
}

// unique or primary key constraints on table "users"
type Users_constraint string

const (
	// unique or primary key constraint
	Users_constraintIdx1943123Primary Users_constraint = "idx_1943123_primary"
)

// input type for inserting data into table "users"
type Users_insert_input struct {
	Account_users           Account_user_arr_rel_insert_input  `json:"account_users"`
	Availabilities          Availability_arr_rel_insert_input  `json:"availabilities"`
	Banned                  bool                               `json:"banned"`
	Country_id              int                                `json:"country_id"`
	Created                 time.Time                          `json:"created"`
	Created_comments        Comment_arr_rel_insert_input       `json:"created_comments"`
	Created_files           File_arr_rel_insert_input          `json:"created_files"`
	Created_forms           Form_arr_rel_insert_input          `json:"created_forms"`
	Created_projects        Project_arr_rel_insert_input       `json:"created_projects"`
	Created_task_comments   Task_comment_arr_rel_insert_input  `json:"created_task_comments"`
	Created_tasks           Task_arr_rel_insert_input          `json:"created_tasks"`
	Email                   string                             `json:"email"`
	First_name              string                             `json:"first_name"`
	Forgotten_password_code string                             `json:"forgotten_password_code"`
	Full_name               string                             `json:"full_name"`
	Id                      int64                              `json:"id"`
	Last_name               string                             `json:"last_name"`
	Last_visit              time.Time                          `json:"last_visit"`
	Login_count             int                                `json:"login_count"`
	Lowercase_email         string                             `json:"lowercase_email"`
	Lowercase_user_name     string                             `json:"lowercase_user_name"`
	Modified                time.Time                          `json:"modified"`
	Notes                   string                             `json:"notes"`
	Owned_accounts          Account_arr_rel_insert_input       `json:"owned_accounts"`
	Password                string                             `json:"password"`
	Phone                   string                             `json:"phone"`
	Role                    string                             `json:"role"`
	Task_timers             Task_timer_arr_rel_insert_input    `json:"task_timers"`
	Task_users              Task_user_arr_rel_insert_input     `json:"task_users"`
	Time_entries            Time_entry_arr_rel_insert_input    `json:"time_entries"`
	Time_entry_location     string                             `json:"time_entry_location"`
	Timezone                string                             `json:"timezone"`
	Updated_forms           Form_arr_rel_insert_input          `json:"updated_forms"`
	Updated_messages        Message_arr_rel_insert_input       `json:"updated_messages"`
	Updated_projects        Project_arr_rel_insert_input       `json:"updated_projects"`
	Updated_tasks           Task_arr_rel_insert_input          `json:"updated_tasks"`
	User_name               string                             `json:"user_name"`
	Visible_to              Visible_users_arr_rel_insert_input `json:"visible_to"`
}

// input type for inserting object relation for remote table "users"
type Users_obj_rel_insert_input struct {
	Data Users_insert_input `json:"data"`
	// on conflict condition
	On_conflict *Users_on_conflict `json:"on_conflict"`
}

// on conflict condition type for table "users"
type Users_on_conflict struct {
	Constraint     Users_constraint      `json:"constraint"`
	Update_columns []Users_update_column `json:"update_columns"`
	Where          Users_bool_exp        `json:"where"`
}

// update columns of table "users"
type Users_update_column string

const (
	// column name
	Users_update_columnBanned Users_update_column = "banned"
	// column name
	Users_update_columnCountryId Users_update_column = "country_id"
	// column name
	Users_update_columnCreated Users_update_column = "created"
	// column name
	Users_update_columnEmail Users_update_column = "email"
	// column name
	Users_update_columnFirstName Users_update_column = "first_name"
	// column name
	Users_update_columnForgottenPasswordCode Users_update_column = "forgotten_password_code"
	// column name
	Users_update_columnFullName Users_update_column = "full_name"
	// column name
	Users_update_columnId Users_update_column = "id"
	// column name
	Users_update_columnLastName Users_update_column = "last_name"
	// column name
	Users_update_columnLastVisit Users_update_column = "last_visit"
	// column name
	Users_update_columnLoginCount Users_update_column = "login_count"
	// column name
	Users_update_columnLowercaseEmail Users_update_column = "lowercase_email"
	// column name
	Users_update_columnLowercaseUserName Users_update_column = "lowercase_user_name"
	// column name
	Users_update_columnModified Users_update_column = "modified"
	// column name
	Users_update_columnNotes Users_update_column = "notes"
	// column name
	Users_update_columnPassword Users_update_column = "password"
	// column name
	Users_update_columnPhone Users_update_column = "phone"
	// column name
	Users_update_columnRole Users_update_column = "role"
	// column name
	Users_update_columnTimeEntryLocation Users_update_column = "time_entry_location"
	// column name
	Users_update_columnTimezone Users_update_column = "timezone"
	// column name
	Users_update_columnUserName Users_update_column = "user_name"
)

// input type for inserting array relation for remote table "visible_users"
type Visible_users_arr_rel_insert_input struct {
	Data []Visible_users_insert_input `json:"data"`
}

// Boolean expression to filter rows from the table "visible_users". All fields are combined with a logical 'AND'.
type Visible_users_bool_exp struct {
	And             []Visible_users_bool_exp `json:"_and"`
	Not             *Visible_users_bool_exp  `json:"_not"`
	Or              []Visible_users_bool_exp `json:"_or"`
	User_id         Bigint_comparison_exp    `json:"user_id"`
	Visible_user_id Bigint_comparison_exp    `json:"visible_user_id"`
}

// input type for inserting data into table "visible_users"
type Visible_users_insert_input struct {
	User_id         int64 `json:"user_id"`
	Visible_user_id int64 `json:"visible_user_id"`
}

// __accountUserByAccountIdInput is used internally by genqlient
type __accountUserByAccountIdInput struct {
	Email     string `json:"email"`
	AccountId int64  `json:"accountId"`
}

// __insertAccountInput is used internally by genqlient
type __insertAccountInput struct {
	TempUserId int64                `json:"tempUserId"`
	Account    Account_insert_input `json:"account"`
}

// __insertMessageInput is used internally by genqlient
type __insertMessageInput struct {
	Msg Message_insert_input `json:"msg"`
}

// __insertTaskCommentInput is used internally by genqlient
type __insertTaskCommentInput struct {
	Comment Task_comment_insert_input `json:"comment"`
}

// __insertTempUserInput is used internally by genqlient
type __insertTempUserInput struct {
	User User_temp_insert_input `json:"user"`
}

// accountUserByAccountIdAccount_userAccount_user_role includes the requested fields of the GraphQL type account_user_role.
// The GraphQL type's documentation follows.
//
// columns and relationships of "account_user_role"
type accountUserByAccountIdAccount_userAccount_user_role struct {
	AccountUser `json:"-"`
}

func (v *accountUserByAccountIdAccount_userAccount_user_role) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*accountUserByAccountIdAccount_userAccount_user_role
		graphql.NoUnmarshalJSON
	}
	firstPass.accountUserByAccountIdAccount_userAccount_user_role = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalaccountUserByAccountIdAccount_userAccount_user_role struct {
	Id int64 `json:"id"`

	Role string `json:"role"`

	User_id int64 `json:"user_id"`

	Client_id int64 `json:"client_id"`

	Account_id int64 `json:"account_id"`

	User AccountUserUserUsers `json:"user"`
}

func (v *accountUserByAccountIdAccount_userAccount_user_role) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *accountUserByAccountIdAccount_userAccount_user_role) __premarshalJSON() (*__premarshalaccountUserByAccountIdAccount_userAccount_user_role, error) {
	var retval __premarshalaccountUserByAccountIdAccount_userAccount_user_role

	retval.Id = v.AccountUser.Id
	retval.Role = v.AccountUser.Role
	retval.User_id = v.AccountUser.User_id
	retval.Client_id = v.AccountUser.Client_id
	retval.Account_id = v.AccountUser.Account_id
	retval.User = v.AccountUser.User
	return &retval, nil
}

// accountUserByAccountIdResponse is returned by accountUserByAccountId on success.
type accountUserByAccountIdResponse struct {
	// An array relationship
	Account_user []accountUserByAccountIdAccount_userAccount_user_role `json:"account_user"`
}

// insertAccountDelete_user_tempUser_temp_mutation_response includes the requested fields of the GraphQL type user_temp_mutation_response.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "user_temp"
type insertAccountDelete_user_tempUser_temp_mutation_response struct {
	// number of rows affected by the mutation
	Affected_rows int `json:"affected_rows"`
}

// insertAccountInsert_account_oneAccount includes the requested fields of the GraphQL type account.
// The GraphQL type's documentation follows.
//
// columns and relationships of "account"
type insertAccountInsert_account_oneAccount struct {
	Id int64 `json:"id"`
}

// insertAccountResponse is returned by insertAccount on success.
type insertAccountResponse struct {
	// insert a single row into the table: "account"
	Insert_account_one insertAccountInsert_account_oneAccount `json:"insert_account_one"`
	// delete data from the table: "user_temp"
	Delete_user_temp insertAccountDelete_user_tempUser_temp_mutation_response `json:"delete_user_temp"`
}

// insertMessageInsert_message_oneMessage includes the requested fields of the GraphQL type message.
// The GraphQL type's documentation follows.
//
// columns and relationships of "message"
type insertMessageInsert_message_oneMessage struct {
	Id int64 `json:"id"`
}

// insertMessageResponse is returned by insertMessage on success.
type insertMessageResponse struct {
	// insert a single row into the table: "message"
	Insert_message_one insertMessageInsert_message_oneMessage `json:"insert_message_one"`
}

// insertTaskCommentInsert_task_comment_oneTask_comment includes the requested fields of the GraphQL type task_comment.
// The GraphQL type's documentation follows.
//
// columns and relationships of "task_comment"
type insertTaskCommentInsert_task_comment_oneTask_comment struct {
	Id int64 `json:"id"`
}

// insertTaskCommentResponse is returned by insertTaskComment on success.
type insertTaskCommentResponse struct {
	// insert a single row into the table: "task_comment"
	Insert_task_comment_one insertTaskCommentInsert_task_comment_oneTask_comment `json:"insert_task_comment_one"`
}

// insertTempUserInsert_user_temp_oneUser_temp includes the requested fields of the GraphQL type user_temp.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_temp"
type insertTempUserInsert_user_temp_oneUser_temp struct {
	Id              int64  `json:"id"`
	Activation_code string `json:"activation_code"`
}

// insertTempUserResponse is returned by insertTempUser on success.
type insertTempUserResponse struct {
	// insert a single row into the table: "user_temp"
	Insert_user_temp_one insertTempUserInsert_user_temp_oneUser_temp `json:"insert_user_temp_one"`
}

func accountUserByAccountId(
	ctx context.Context,
	client graphql.Client,
	email string,
	accountId int64,
) (*accountUserByAccountIdResponse, error) {
	__input := __accountUserByAccountIdInput{
		Email:     email,
		AccountId: accountId,
	}
	var err error

	var retval accountUserByAccountIdResponse
	err = client.MakeRequest(
		ctx,
		"accountUserByAccountId",
		`
query accountUserByAccountId ($email: String!, $accountId: bigint!) {
	account_user: account_user_role(limit: 1, where: {user:{lowercase_email:{_eq:$email}},account_id:{_eq:$accountId}}) {
		... AccountUser
	}
}
fragment AccountUser on account_user_role {
	id
	role
	user_id
	client_id
	account_id
	user {
		id
		phone
		banned
		... UserEmail
	}
}
fragment UserEmail on users {
	email
	full_name
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

// and also this errors: genqlient(for: "message_insert_input.update_user", omitempty: true)
func insertMessage(
	ctx context.Context,
	client graphql.Client,
	msg Message_insert_input,
) (*insertMessageResponse, error) {
	__input := __insertMessageInput{
		Msg: msg,
	}
	var err error

	var retval insertMessageResponse
	err = client.MakeRequest(
		ctx,
		"insertMessage",
		`
mutation insertMessage ($msg: message_insert_input!) {
	insert_message_one(object: $msg) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func insertTempUser(
	ctx context.Context,
	client graphql.Client,
	user User_temp_insert_input,
) (*insertTempUserResponse, error) {
	__input := __insertTempUserInput{
		User: user,
	}
	var err error

	var retval insertTempUserResponse
	err = client.MakeRequest(
		ctx,
		"insertTempUser",
		`
mutation insertTempUser ($user: user_temp_insert_input!) {
	insert_user_temp_one(object: $user) {
		id
		activation_code
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func insertAccount(
	ctx context.Context,
	client graphql.Client,
	tempUserId int64,
	account Account_insert_input,
) (*insertAccountResponse, error) {
	__input := __insertAccountInput{
		TempUserId: tempUserId,
		Account:    account,
	}
	var err error

	var retval insertAccountResponse
	err = client.MakeRequest(
		ctx,
		"insertAccount",
		`
mutation insertAccount ($tempUserId: bigint!, $account: account_insert_input!) {
	insert_account_one(object: $account) {
		id
	}
	delete_user_temp(where: {id:{_eq:$tempUserId}}) {
		affected_rows
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

// likewise, needs genqlient(omitempty: true)
func insertTaskComment(
	ctx context.Context,
	client graphql.Client,
	comment Task_comment_insert_input,
) (*insertTaskCommentResponse, error) {
	__input := __insertTaskCommentInput{
		Comment: comment,
	}
	var err error

	var retval insertTaskCommentResponse
	err = client.MakeRequest(
		ctx,
		"insertTaskComment",
		`
mutation insertTaskComment ($comment: task_comment_insert_input!) {
	insert_task_comment_one(object: $comment) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
