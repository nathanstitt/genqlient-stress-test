schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _int8

"""
Boolean expression to compare columns of type "_int8". All fields are combined with logical 'AND'.
"""
input _int8_comparison_exp {
  _eq: _int8
  _gt: _int8
  _gte: _int8
  _in: [_int8!]
  _is_null: Boolean
  _lt: _int8
  _lte: _int8
  _neq: _int8
  _nin: [_int8!]
}

"""
columns and relationships of "account"
"""
type account {
  account_level: String!

  """An array relationship"""
  account_user_role(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): [account_user_role!]!

  """An aggregate relationship"""
  account_user_role_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): account_user_role_aggregate!

  """An array relationship"""
  account_users(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): [account_user!]!

  """An aggregate relationship"""
  account_users_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): account_user_aggregate!
  affiliate_code: String

  """An array relationship"""
  billing_infos(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): [billing_info!]!

  """An aggregate relationship"""
  billing_infos_aggregate(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): billing_info_aggregate!

  """An object relationship"""
  client: client
  client_id: bigint

  """An array relationship"""
  clients(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): [client!]!

  """An aggregate relationship"""
  clients_aggregate(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): client_aggregate!
  created: timestamptz

  """An array relationship"""
  databases(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): [database!]!

  """An aggregate relationship"""
  databases_aggregate(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): database_aggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!
  expiration_date: timestamptz!
  id: bigint!
  modified: timestamptz!

  """An object relationship"""
  owner: users
  owner_id: bigint!

  """An array relationship"""
  project_categories(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): [project_category!]!

  """An aggregate relationship"""
  project_categories_aggregate(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): project_category_aggregate!

  """An array relationship"""
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """An aggregate relationship"""
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!
  signup_code: String
  source: String
  start_date: timestamptz!
  subdomain: String

  """An array relationship"""
  task_categories(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): [task_category!]!

  """An aggregate relationship"""
  task_categories_aggregate(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): task_category_aggregate!

  """An array relationship"""
  time_entry_locations(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): [time_entry_location!]!

  """An aggregate relationship"""
  time_entry_locations_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): time_entry_location_aggregate!

  """An object relationship"""
  user: users!
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  avg: account_avg_fields
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
  stddev: account_stddev_fields
  stddev_pop: account_stddev_pop_fields
  stddev_samp: account_stddev_samp_fields
  sum: account_sum_fields
  var_pop: account_var_pop_fields
  var_samp: account_var_samp_fields
  variance: account_variance_fields
}

"""
order by aggregate values of table "account"
"""
input account_aggregate_order_by {
  avg: account_avg_order_by
  count: order_by
  max: account_max_order_by
  min: account_min_order_by
  stddev: account_stddev_order_by
  stddev_pop: account_stddev_pop_order_by
  stddev_samp: account_stddev_samp_order_by
  sum: account_sum_order_by
  var_pop: account_var_pop_order_by
  var_samp: account_var_samp_order_by
  variance: account_variance_order_by
}

"""
input type for inserting array relation for remote table "account"
"""
input account_arr_rel_insert_input {
  data: [account_insert_input!]!

  """on conflict condition"""
  on_conflict: account_on_conflict
}

"""aggregate avg on columns"""
type account_avg_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by avg() on columns of table "account"
"""
input account_avg_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  account_level: String_comparison_exp
  account_user_role: account_user_role_bool_exp
  account_users: account_user_bool_exp
  affiliate_code: String_comparison_exp
  billing_infos: billing_info_bool_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  clients: client_bool_exp
  created: timestamptz_comparison_exp
  databases: database_bool_exp
  events: event_bool_exp
  expiration_date: timestamptz_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  owner: users_bool_exp
  owner_id: bigint_comparison_exp
  project_categories: project_category_bool_exp
  settings: settings_bool_exp
  signup_code: String_comparison_exp
  source: String_comparison_exp
  start_date: timestamptz_comparison_exp
  subdomain: String_comparison_exp
  task_categories: task_category_bool_exp
  time_entry_locations: time_entry_location_bool_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """unique or primary key constraint"""
  idx_1942896_account_subdomain_idx

  """unique or primary key constraint"""
  idx_1942896_primary
}

"""
input type for incrementing numeric columns in table "account"
"""
input account_inc_input {
  client_id: bigint
  id: bigint
  owner_id: bigint
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  account_level: String
  account_user_role: account_user_role_arr_rel_insert_input
  account_users: account_user_arr_rel_insert_input
  affiliate_code: String
  billing_infos: billing_info_arr_rel_insert_input
  client: client_obj_rel_insert_input
  client_id: bigint
  clients: client_arr_rel_insert_input
  created: timestamptz
  databases: database_arr_rel_insert_input
  events: event_arr_rel_insert_input
  expiration_date: timestamptz
  id: bigint
  modified: timestamptz
  owner: users_obj_rel_insert_input
  owner_id: bigint
  project_categories: project_category_arr_rel_insert_input
  settings: settings_arr_rel_insert_input
  signup_code: String
  source: String
  start_date: timestamptz
  subdomain: String
  task_categories: task_category_arr_rel_insert_input
  time_entry_locations: time_entry_location_arr_rel_insert_input
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type account_max_fields {
  account_level: String
  affiliate_code: String
  client_id: bigint
  created: timestamptz
  expiration_date: timestamptz
  id: bigint
  modified: timestamptz
  owner_id: bigint
  signup_code: String
  source: String
  start_date: timestamptz
  subdomain: String
}

"""
order by max() on columns of table "account"
"""
input account_max_order_by {
  account_level: order_by
  affiliate_code: order_by
  client_id: order_by
  created: order_by
  expiration_date: order_by
  id: order_by
  modified: order_by
  owner_id: order_by
  signup_code: order_by
  source: order_by
  start_date: order_by
  subdomain: order_by
}

"""aggregate min on columns"""
type account_min_fields {
  account_level: String
  affiliate_code: String
  client_id: bigint
  created: timestamptz
  expiration_date: timestamptz
  id: bigint
  modified: timestamptz
  owner_id: bigint
  signup_code: String
  source: String
  start_date: timestamptz
  subdomain: String
}

"""
order by min() on columns of table "account"
"""
input account_min_order_by {
  account_level: order_by
  affiliate_code: order_by
  client_id: order_by
  created: order_by
  expiration_date: order_by
  id: order_by
  modified: order_by
  owner_id: order_by
  signup_code: order_by
  source: order_by
  start_date: order_by
  subdomain: order_by
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
input type for inserting object relation for remote table "account"
"""
input account_obj_rel_insert_input {
  data: account_insert_input!

  """on conflict condition"""
  on_conflict: account_on_conflict
}

"""
on conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  account_level: order_by
  account_user_role_aggregate: account_user_role_aggregate_order_by
  account_users_aggregate: account_user_aggregate_order_by
  affiliate_code: order_by
  billing_infos_aggregate: billing_info_aggregate_order_by
  client: client_order_by
  client_id: order_by
  clients_aggregate: client_aggregate_order_by
  created: order_by
  databases_aggregate: database_aggregate_order_by
  events_aggregate: event_aggregate_order_by
  expiration_date: order_by
  id: order_by
  modified: order_by
  owner: users_order_by
  owner_id: order_by
  project_categories_aggregate: project_category_aggregate_order_by
  settings_aggregate: settings_aggregate_order_by
  signup_code: order_by
  source: order_by
  start_date: order_by
  subdomain: order_by
  task_categories_aggregate: task_category_aggregate_order_by
  time_entry_locations_aggregate: time_entry_location_aggregate_order_by
  user: users_order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: bigint!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  account_level

  """column name"""
  affiliate_code

  """column name"""
  client_id

  """column name"""
  created

  """column name"""
  expiration_date

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  owner_id

  """column name"""
  signup_code

  """column name"""
  source

  """column name"""
  start_date

  """column name"""
  subdomain
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  account_level: String
  affiliate_code: String
  client_id: bigint
  created: timestamptz
  expiration_date: timestamptz
  id: bigint
  modified: timestamptz
  owner_id: bigint
  signup_code: String
  source: String
  start_date: timestamptz
  subdomain: String
}

"""
columns and relationships of "account_settings"
"""
type account_settings {
  account_id: bigint
  is_allowed: Boolean
  name: String
  value: String
}

"""
aggregated selection of "account_settings"
"""
type account_settings_aggregate {
  aggregate: account_settings_aggregate_fields
  nodes: [account_settings!]!
}

"""
aggregate fields of "account_settings"
"""
type account_settings_aggregate_fields {
  avg: account_settings_avg_fields
  count(columns: [account_settings_select_column!], distinct: Boolean): Int!
  max: account_settings_max_fields
  min: account_settings_min_fields
  stddev: account_settings_stddev_fields
  stddev_pop: account_settings_stddev_pop_fields
  stddev_samp: account_settings_stddev_samp_fields
  sum: account_settings_sum_fields
  var_pop: account_settings_var_pop_fields
  var_samp: account_settings_var_samp_fields
  variance: account_settings_variance_fields
}

"""aggregate avg on columns"""
type account_settings_avg_fields {
  account_id: Float
}

"""
Boolean expression to filter rows from the table "account_settings". All fields are combined with a logical 'AND'.
"""
input account_settings_bool_exp {
  _and: [account_settings_bool_exp!]
  _not: account_settings_bool_exp
  _or: [account_settings_bool_exp!]
  account_id: bigint_comparison_exp
  is_allowed: Boolean_comparison_exp
  name: String_comparison_exp
  value: String_comparison_exp
}

"""aggregate max on columns"""
type account_settings_max_fields {
  account_id: bigint
  name: String
  value: String
}

"""aggregate min on columns"""
type account_settings_min_fields {
  account_id: bigint
  name: String
  value: String
}

"""Ordering options when selecting data from "account_settings"."""
input account_settings_order_by {
  account_id: order_by
  is_allowed: order_by
  name: order_by
  value: order_by
}

"""
select columns of table "account_settings"
"""
enum account_settings_select_column {
  """column name"""
  account_id

  """column name"""
  is_allowed

  """column name"""
  name

  """column name"""
  value
}

"""aggregate stddev on columns"""
type account_settings_stddev_fields {
  account_id: Float
}

"""aggregate stddev_pop on columns"""
type account_settings_stddev_pop_fields {
  account_id: Float
}

"""aggregate stddev_samp on columns"""
type account_settings_stddev_samp_fields {
  account_id: Float
}

"""aggregate sum on columns"""
type account_settings_sum_fields {
  account_id: bigint
}

"""aggregate var_pop on columns"""
type account_settings_var_pop_fields {
  account_id: Float
}

"""aggregate var_samp on columns"""
type account_settings_var_samp_fields {
  account_id: Float
}

"""aggregate variance on columns"""
type account_settings_variance_fields {
  account_id: Float
}

"""aggregate stddev on columns"""
type account_stddev_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by stddev() on columns of table "account"
"""
input account_stddev_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate stddev_pop on columns"""
type account_stddev_pop_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by stddev_pop() on columns of table "account"
"""
input account_stddev_pop_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate stddev_samp on columns"""
type account_stddev_samp_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by stddev_samp() on columns of table "account"
"""
input account_stddev_samp_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate sum on columns"""
type account_sum_fields {
  client_id: bigint
  id: bigint
  owner_id: bigint
}

"""
order by sum() on columns of table "account"
"""
input account_sum_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  account_level

  """column name"""
  affiliate_code

  """column name"""
  client_id

  """column name"""
  created

  """column name"""
  expiration_date

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  owner_id

  """column name"""
  signup_code

  """column name"""
  source

  """column name"""
  start_date

  """column name"""
  subdomain
}

"""
columns and relationships of "account_user"
"""
type account_user {
  """An object relationship"""
  account: account!
  account_id: bigint!

  """An object relationship"""
  client: client!
  client_id: bigint!
  id: bigint!
  role: String

  """An object relationship"""
  user: users!
  user_id: bigint!
}

"""
aggregated selection of "account_user"
"""
type account_user_aggregate {
  aggregate: account_user_aggregate_fields
  nodes: [account_user!]!
}

"""
aggregate fields of "account_user"
"""
type account_user_aggregate_fields {
  avg: account_user_avg_fields
  count(columns: [account_user_select_column!], distinct: Boolean): Int!
  max: account_user_max_fields
  min: account_user_min_fields
  stddev: account_user_stddev_fields
  stddev_pop: account_user_stddev_pop_fields
  stddev_samp: account_user_stddev_samp_fields
  sum: account_user_sum_fields
  var_pop: account_user_var_pop_fields
  var_samp: account_user_var_samp_fields
  variance: account_user_variance_fields
}

"""
order by aggregate values of table "account_user"
"""
input account_user_aggregate_order_by {
  avg: account_user_avg_order_by
  count: order_by
  max: account_user_max_order_by
  min: account_user_min_order_by
  stddev: account_user_stddev_order_by
  stddev_pop: account_user_stddev_pop_order_by
  stddev_samp: account_user_stddev_samp_order_by
  sum: account_user_sum_order_by
  var_pop: account_user_var_pop_order_by
  var_samp: account_user_var_samp_order_by
  variance: account_user_variance_order_by
}

"""
input type for inserting array relation for remote table "account_user"
"""
input account_user_arr_rel_insert_input {
  data: [account_user_insert_input!]!

  """on conflict condition"""
  on_conflict: account_user_on_conflict
}

"""aggregate avg on columns"""
type account_user_avg_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "account_user"
"""
input account_user_avg_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "account_user". All fields are combined with a logical 'AND'.
"""
input account_user_bool_exp {
  _and: [account_user_bool_exp!]
  _not: account_user_bool_exp
  _or: [account_user_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  id: bigint_comparison_exp
  role: String_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "account_user"
"""
enum account_user_constraint {
  """unique or primary key constraint"""
  idx_1942906_account_user_idx

  """unique or primary key constraint"""
  idx_1942906_primary
}

"""
input type for incrementing numeric columns in table "account_user"
"""
input account_user_inc_input {
  account_id: bigint
  client_id: bigint
  id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "account_user"
"""
input account_user_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  client: client_obj_rel_insert_input
  client_id: bigint
  id: bigint
  role: String
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type account_user_max_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  role: String
  user_id: bigint
}

"""
order by max() on columns of table "account_user"
"""
input account_user_max_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  role: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type account_user_min_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  role: String
  user_id: bigint
}

"""
order by min() on columns of table "account_user"
"""
input account_user_min_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  role: order_by
  user_id: order_by
}

"""
response of any mutation on the table "account_user"
"""
type account_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account_user!]!
}

"""
input type for inserting object relation for remote table "account_user"
"""
input account_user_obj_rel_insert_input {
  data: account_user_insert_input!

  """on conflict condition"""
  on_conflict: account_user_on_conflict
}

"""
on conflict condition type for table "account_user"
"""
input account_user_on_conflict {
  constraint: account_user_constraint!
  update_columns: [account_user_update_column!]! = []
  where: account_user_bool_exp
}

"""Ordering options when selecting data from "account_user"."""
input account_user_order_by {
  account: account_order_by
  account_id: order_by
  client: client_order_by
  client_id: order_by
  id: order_by
  role: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: account_user"""
input account_user_pk_columns_input {
  id: bigint!
}

"""
columns and relationships of "account_user_role"
"""
type account_user_role {
  """An object relationship"""
  account: account
  account_id: bigint

  """An object relationship"""
  client: client
  client_id: bigint
  id: bigint
  role: String

  """An object relationship"""
  user: users
  user_id: bigint
}

"""
aggregated selection of "account_user_role"
"""
type account_user_role_aggregate {
  aggregate: account_user_role_aggregate_fields
  nodes: [account_user_role!]!
}

"""
aggregate fields of "account_user_role"
"""
type account_user_role_aggregate_fields {
  avg: account_user_role_avg_fields
  count(columns: [account_user_role_select_column!], distinct: Boolean): Int!
  max: account_user_role_max_fields
  min: account_user_role_min_fields
  stddev: account_user_role_stddev_fields
  stddev_pop: account_user_role_stddev_pop_fields
  stddev_samp: account_user_role_stddev_samp_fields
  sum: account_user_role_sum_fields
  var_pop: account_user_role_var_pop_fields
  var_samp: account_user_role_var_samp_fields
  variance: account_user_role_variance_fields
}

"""
order by aggregate values of table "account_user_role"
"""
input account_user_role_aggregate_order_by {
  avg: account_user_role_avg_order_by
  count: order_by
  max: account_user_role_max_order_by
  min: account_user_role_min_order_by
  stddev: account_user_role_stddev_order_by
  stddev_pop: account_user_role_stddev_pop_order_by
  stddev_samp: account_user_role_stddev_samp_order_by
  sum: account_user_role_sum_order_by
  var_pop: account_user_role_var_pop_order_by
  var_samp: account_user_role_var_samp_order_by
  variance: account_user_role_variance_order_by
}

"""
input type for inserting array relation for remote table "account_user_role"
"""
input account_user_role_arr_rel_insert_input {
  data: [account_user_role_insert_input!]!
}

"""aggregate avg on columns"""
type account_user_role_avg_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "account_user_role"
"""
input account_user_role_avg_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "account_user_role". All fields are combined with a logical 'AND'.
"""
input account_user_role_bool_exp {
  _and: [account_user_role_bool_exp!]
  _not: account_user_role_bool_exp
  _or: [account_user_role_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  id: bigint_comparison_exp
  role: String_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "account_user_role"
"""
input account_user_role_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  client: client_obj_rel_insert_input
  client_id: bigint
  id: bigint
  role: String
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type account_user_role_max_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  role: String
  user_id: bigint
}

"""
order by max() on columns of table "account_user_role"
"""
input account_user_role_max_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  role: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type account_user_role_min_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  role: String
  user_id: bigint
}

"""
order by min() on columns of table "account_user_role"
"""
input account_user_role_min_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  role: order_by
  user_id: order_by
}

"""Ordering options when selecting data from "account_user_role"."""
input account_user_role_order_by {
  account: account_order_by
  account_id: order_by
  client: client_order_by
  client_id: order_by
  id: order_by
  role: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "account_user_role"
"""
enum account_user_role_select_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  id

  """column name"""
  role

  """column name"""
  user_id
}

"""aggregate stddev on columns"""
type account_user_role_stddev_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "account_user_role"
"""
input account_user_role_stddev_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type account_user_role_stddev_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "account_user_role"
"""
input account_user_role_stddev_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type account_user_role_stddev_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "account_user_role"
"""
input account_user_role_stddev_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type account_user_role_sum_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "account_user_role"
"""
input account_user_role_sum_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type account_user_role_var_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "account_user_role"
"""
input account_user_role_var_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type account_user_role_var_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "account_user_role"
"""
input account_user_role_var_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type account_user_role_variance_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "account_user_role"
"""
input account_user_role_variance_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""
select columns of table "account_user"
"""
enum account_user_select_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  id

  """column name"""
  role

  """column name"""
  user_id
}

"""
input type for updating data in table "account_user"
"""
input account_user_set_input {
  account_id: bigint
  client_id: bigint
  id: bigint
  role: String
  user_id: bigint
}

"""aggregate stddev on columns"""
type account_user_stddev_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "account_user"
"""
input account_user_stddev_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type account_user_stddev_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "account_user"
"""
input account_user_stddev_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type account_user_stddev_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "account_user"
"""
input account_user_stddev_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type account_user_sum_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "account_user"
"""
input account_user_sum_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "account_user"
"""
enum account_user_update_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  id

  """column name"""
  role

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type account_user_var_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "account_user"
"""
input account_user_var_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type account_user_var_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "account_user"
"""
input account_user_var_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type account_user_variance_fields {
  account_id: Float
  client_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "account_user"
"""
input account_user_variance_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type account_var_pop_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by var_pop() on columns of table "account"
"""
input account_var_pop_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate var_samp on columns"""
type account_var_samp_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by var_samp() on columns of table "account"
"""
input account_var_samp_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate variance on columns"""
type account_variance_fields {
  client_id: Float
  id: Float
  owner_id: Float
}

"""
order by variance() on columns of table "account"
"""
input account_variance_order_by {
  client_id: order_by
  id: order_by
  owner_id: order_by
}

"""
columns and relationships of "availability"
"""
type availability {
  hours: float8!
  id: bigint!
  target_date: timestamptz!

  """An object relationship"""
  user: users!
  user_id: bigint!
}

"""
aggregated selection of "availability"
"""
type availability_aggregate {
  aggregate: availability_aggregate_fields
  nodes: [availability!]!
}

"""
aggregate fields of "availability"
"""
type availability_aggregate_fields {
  avg: availability_avg_fields
  count(columns: [availability_select_column!], distinct: Boolean): Int!
  max: availability_max_fields
  min: availability_min_fields
  stddev: availability_stddev_fields
  stddev_pop: availability_stddev_pop_fields
  stddev_samp: availability_stddev_samp_fields
  sum: availability_sum_fields
  var_pop: availability_var_pop_fields
  var_samp: availability_var_samp_fields
  variance: availability_variance_fields
}

"""
order by aggregate values of table "availability"
"""
input availability_aggregate_order_by {
  avg: availability_avg_order_by
  count: order_by
  max: availability_max_order_by
  min: availability_min_order_by
  stddev: availability_stddev_order_by
  stddev_pop: availability_stddev_pop_order_by
  stddev_samp: availability_stddev_samp_order_by
  sum: availability_sum_order_by
  var_pop: availability_var_pop_order_by
  var_samp: availability_var_samp_order_by
  variance: availability_variance_order_by
}

"""
input type for inserting array relation for remote table "availability"
"""
input availability_arr_rel_insert_input {
  data: [availability_insert_input!]!

  """on conflict condition"""
  on_conflict: availability_on_conflict
}

"""aggregate avg on columns"""
type availability_avg_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "availability"
"""
input availability_avg_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "availability". All fields are combined with a logical 'AND'.
"""
input availability_bool_exp {
  _and: [availability_bool_exp!]
  _not: availability_bool_exp
  _or: [availability_bool_exp!]
  hours: float8_comparison_exp
  id: bigint_comparison_exp
  target_date: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "availability"
"""
enum availability_constraint {
  """unique or primary key constraint"""
  idx_1942915_primary
}

"""
input type for incrementing numeric columns in table "availability"
"""
input availability_inc_input {
  hours: float8
  id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "availability"
"""
input availability_insert_input {
  hours: float8
  id: bigint
  target_date: timestamptz
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type availability_max_fields {
  hours: float8
  id: bigint
  target_date: timestamptz
  user_id: bigint
}

"""
order by max() on columns of table "availability"
"""
input availability_max_order_by {
  hours: order_by
  id: order_by
  target_date: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type availability_min_fields {
  hours: float8
  id: bigint
  target_date: timestamptz
  user_id: bigint
}

"""
order by min() on columns of table "availability"
"""
input availability_min_order_by {
  hours: order_by
  id: order_by
  target_date: order_by
  user_id: order_by
}

"""
response of any mutation on the table "availability"
"""
type availability_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [availability!]!
}

"""
on conflict condition type for table "availability"
"""
input availability_on_conflict {
  constraint: availability_constraint!
  update_columns: [availability_update_column!]! = []
  where: availability_bool_exp
}

"""Ordering options when selecting data from "availability"."""
input availability_order_by {
  hours: order_by
  id: order_by
  target_date: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: availability"""
input availability_pk_columns_input {
  id: bigint!
}

"""
select columns of table "availability"
"""
enum availability_select_column {
  """column name"""
  hours

  """column name"""
  id

  """column name"""
  target_date

  """column name"""
  user_id
}

"""
input type for updating data in table "availability"
"""
input availability_set_input {
  hours: float8
  id: bigint
  target_date: timestamptz
  user_id: bigint
}

"""aggregate stddev on columns"""
type availability_stddev_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "availability"
"""
input availability_stddev_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type availability_stddev_pop_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "availability"
"""
input availability_stddev_pop_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type availability_stddev_samp_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "availability"
"""
input availability_stddev_samp_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type availability_sum_fields {
  hours: float8
  id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "availability"
"""
input availability_sum_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "availability"
"""
enum availability_update_column {
  """column name"""
  hours

  """column name"""
  id

  """column name"""
  target_date

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type availability_var_pop_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "availability"
"""
input availability_var_pop_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type availability_var_samp_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "availability"
"""
input availability_var_samp_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type availability_variance_fields {
  hours: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "availability"
"""
input availability_variance_order_by {
  hours: order_by
  id: order_by
  user_id: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "billing_info"
"""
type billing_info {
  """An object relationship"""
  account: account!
  account_id: bigint!
  address: String
  cardholder: String
  city: String
  client_ref: String
  country: String
  coupon_code: String
  exp_month: String
  exp_year: String
  id: bigint!
  postalcode: String
  state: String
  trans_ref: String
}

"""
aggregated selection of "billing_info"
"""
type billing_info_aggregate {
  aggregate: billing_info_aggregate_fields
  nodes: [billing_info!]!
}

"""
aggregate fields of "billing_info"
"""
type billing_info_aggregate_fields {
  avg: billing_info_avg_fields
  count(columns: [billing_info_select_column!], distinct: Boolean): Int!
  max: billing_info_max_fields
  min: billing_info_min_fields
  stddev: billing_info_stddev_fields
  stddev_pop: billing_info_stddev_pop_fields
  stddev_samp: billing_info_stddev_samp_fields
  sum: billing_info_sum_fields
  var_pop: billing_info_var_pop_fields
  var_samp: billing_info_var_samp_fields
  variance: billing_info_variance_fields
}

"""
order by aggregate values of table "billing_info"
"""
input billing_info_aggregate_order_by {
  avg: billing_info_avg_order_by
  count: order_by
  max: billing_info_max_order_by
  min: billing_info_min_order_by
  stddev: billing_info_stddev_order_by
  stddev_pop: billing_info_stddev_pop_order_by
  stddev_samp: billing_info_stddev_samp_order_by
  sum: billing_info_sum_order_by
  var_pop: billing_info_var_pop_order_by
  var_samp: billing_info_var_samp_order_by
  variance: billing_info_variance_order_by
}

"""
input type for inserting array relation for remote table "billing_info"
"""
input billing_info_arr_rel_insert_input {
  data: [billing_info_insert_input!]!

  """on conflict condition"""
  on_conflict: billing_info_on_conflict
}

"""aggregate avg on columns"""
type billing_info_avg_fields {
  account_id: Float
  id: Float
}

"""
order by avg() on columns of table "billing_info"
"""
input billing_info_avg_order_by {
  account_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "billing_info". All fields are combined with a logical 'AND'.
"""
input billing_info_bool_exp {
  _and: [billing_info_bool_exp!]
  _not: billing_info_bool_exp
  _or: [billing_info_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  address: String_comparison_exp
  cardholder: String_comparison_exp
  city: String_comparison_exp
  client_ref: String_comparison_exp
  country: String_comparison_exp
  coupon_code: String_comparison_exp
  exp_month: String_comparison_exp
  exp_year: String_comparison_exp
  id: bigint_comparison_exp
  postalcode: String_comparison_exp
  state: String_comparison_exp
  trans_ref: String_comparison_exp
}

"""
unique or primary key constraints on table "billing_info"
"""
enum billing_info_constraint {
  """unique or primary key constraint"""
  idx_1942921_primary
}

"""
input type for incrementing numeric columns in table "billing_info"
"""
input billing_info_inc_input {
  account_id: bigint
  id: bigint
}

"""
input type for inserting data into table "billing_info"
"""
input billing_info_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  address: String
  cardholder: String
  city: String
  client_ref: String
  country: String
  coupon_code: String
  exp_month: String
  exp_year: String
  id: bigint
  postalcode: String
  state: String
  trans_ref: String
}

"""aggregate max on columns"""
type billing_info_max_fields {
  account_id: bigint
  address: String
  cardholder: String
  city: String
  client_ref: String
  country: String
  coupon_code: String
  exp_month: String
  exp_year: String
  id: bigint
  postalcode: String
  state: String
  trans_ref: String
}

"""
order by max() on columns of table "billing_info"
"""
input billing_info_max_order_by {
  account_id: order_by
  address: order_by
  cardholder: order_by
  city: order_by
  client_ref: order_by
  country: order_by
  coupon_code: order_by
  exp_month: order_by
  exp_year: order_by
  id: order_by
  postalcode: order_by
  state: order_by
  trans_ref: order_by
}

"""aggregate min on columns"""
type billing_info_min_fields {
  account_id: bigint
  address: String
  cardholder: String
  city: String
  client_ref: String
  country: String
  coupon_code: String
  exp_month: String
  exp_year: String
  id: bigint
  postalcode: String
  state: String
  trans_ref: String
}

"""
order by min() on columns of table "billing_info"
"""
input billing_info_min_order_by {
  account_id: order_by
  address: order_by
  cardholder: order_by
  city: order_by
  client_ref: order_by
  country: order_by
  coupon_code: order_by
  exp_month: order_by
  exp_year: order_by
  id: order_by
  postalcode: order_by
  state: order_by
  trans_ref: order_by
}

"""
response of any mutation on the table "billing_info"
"""
type billing_info_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [billing_info!]!
}

"""
on conflict condition type for table "billing_info"
"""
input billing_info_on_conflict {
  constraint: billing_info_constraint!
  update_columns: [billing_info_update_column!]! = []
  where: billing_info_bool_exp
}

"""Ordering options when selecting data from "billing_info"."""
input billing_info_order_by {
  account: account_order_by
  account_id: order_by
  address: order_by
  cardholder: order_by
  city: order_by
  client_ref: order_by
  country: order_by
  coupon_code: order_by
  exp_month: order_by
  exp_year: order_by
  id: order_by
  postalcode: order_by
  state: order_by
  trans_ref: order_by
}

"""primary key columns input for table: billing_info"""
input billing_info_pk_columns_input {
  id: bigint!
}

"""
select columns of table "billing_info"
"""
enum billing_info_select_column {
  """column name"""
  account_id

  """column name"""
  address

  """column name"""
  cardholder

  """column name"""
  city

  """column name"""
  client_ref

  """column name"""
  country

  """column name"""
  coupon_code

  """column name"""
  exp_month

  """column name"""
  exp_year

  """column name"""
  id

  """column name"""
  postalcode

  """column name"""
  state

  """column name"""
  trans_ref
}

"""
input type for updating data in table "billing_info"
"""
input billing_info_set_input {
  account_id: bigint
  address: String
  cardholder: String
  city: String
  client_ref: String
  country: String
  coupon_code: String
  exp_month: String
  exp_year: String
  id: bigint
  postalcode: String
  state: String
  trans_ref: String
}

"""aggregate stddev on columns"""
type billing_info_stddev_fields {
  account_id: Float
  id: Float
}

"""
order by stddev() on columns of table "billing_info"
"""
input billing_info_stddev_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type billing_info_stddev_pop_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "billing_info"
"""
input billing_info_stddev_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type billing_info_stddev_samp_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "billing_info"
"""
input billing_info_stddev_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type billing_info_sum_fields {
  account_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "billing_info"
"""
input billing_info_sum_order_by {
  account_id: order_by
  id: order_by
}

"""
update columns of table "billing_info"
"""
enum billing_info_update_column {
  """column name"""
  account_id

  """column name"""
  address

  """column name"""
  cardholder

  """column name"""
  city

  """column name"""
  client_ref

  """column name"""
  country

  """column name"""
  coupon_code

  """column name"""
  exp_month

  """column name"""
  exp_year

  """column name"""
  id

  """column name"""
  postalcode

  """column name"""
  state

  """column name"""
  trans_ref
}

"""aggregate var_pop on columns"""
type billing_info_var_pop_fields {
  account_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "billing_info"
"""
input billing_info_var_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type billing_info_var_samp_fields {
  account_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "billing_info"
"""
input billing_info_var_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type billing_info_variance_fields {
  account_id: Float
  id: Float
}

"""
order by variance() on columns of table "billing_info"
"""
input billing_info_variance_order_by {
  account_id: order_by
  id: order_by
}

"""
columns and relationships of "client"
"""
type client {
  """An object relationship"""
  account: account
  account_id: bigint

  """An array relationship"""
  account_users(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): [account_user!]!

  """An aggregate relationship"""
  account_users_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): account_user_aggregate!

  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!
  address: String
  address2: String

  """An object relationship"""
  allowed_users: user_client_access
  city: String
  client_type: String
  country: String
  created: timestamptz

  """An array relationship"""
  databases(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): [database!]!

  """An aggregate relationship"""
  databases_aggregate(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): database_aggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!
  fax: String
  hourly_rate: float8
  id: bigint!
  lowercase_name: String
  modified: timestamptz!
  name: String!
  notes: String
  notify_options: String
  phone: String

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!
  retainer_end: timestamptz
  retainer_hours: float8
  retainer_start: timestamptz
  state: String
  status: String

  """An object relationship"""
  time_recorded: client_time_recorded
  website: String
  zipcode: String
}

"""
aggregated selection of "client"
"""
type client_aggregate {
  aggregate: client_aggregate_fields
  nodes: [client!]!
}

"""
aggregate fields of "client"
"""
type client_aggregate_fields {
  avg: client_avg_fields
  count(columns: [client_select_column!], distinct: Boolean): Int!
  max: client_max_fields
  min: client_min_fields
  stddev: client_stddev_fields
  stddev_pop: client_stddev_pop_fields
  stddev_samp: client_stddev_samp_fields
  sum: client_sum_fields
  var_pop: client_var_pop_fields
  var_samp: client_var_samp_fields
  variance: client_variance_fields
}

"""
order by aggregate values of table "client"
"""
input client_aggregate_order_by {
  avg: client_avg_order_by
  count: order_by
  max: client_max_order_by
  min: client_min_order_by
  stddev: client_stddev_order_by
  stddev_pop: client_stddev_pop_order_by
  stddev_samp: client_stddev_samp_order_by
  sum: client_sum_order_by
  var_pop: client_var_pop_order_by
  var_samp: client_var_samp_order_by
  variance: client_variance_order_by
}

"""
input type for inserting array relation for remote table "client"
"""
input client_arr_rel_insert_input {
  data: [client_insert_input!]!

  """on conflict condition"""
  on_conflict: client_on_conflict
}

"""aggregate avg on columns"""
type client_avg_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by avg() on columns of table "client"
"""
input client_avg_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""
Boolean expression to filter rows from the table "client". All fields are combined with a logical 'AND'.
"""
input client_bool_exp {
  _and: [client_bool_exp!]
  _not: client_bool_exp
  _or: [client_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  account_users: account_user_bool_exp
  accounts: account_bool_exp
  address: String_comparison_exp
  address2: String_comparison_exp
  allowed_users: user_client_access_bool_exp
  city: String_comparison_exp
  client_type: String_comparison_exp
  country: String_comparison_exp
  created: timestamptz_comparison_exp
  databases: database_bool_exp
  events: event_bool_exp
  fax: String_comparison_exp
  hourly_rate: float8_comparison_exp
  id: bigint_comparison_exp
  lowercase_name: String_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  notes: String_comparison_exp
  notify_options: String_comparison_exp
  phone: String_comparison_exp
  projects: project_bool_exp
  retainer_end: timestamptz_comparison_exp
  retainer_hours: float8_comparison_exp
  retainer_start: timestamptz_comparison_exp
  state: String_comparison_exp
  status: String_comparison_exp
  time_recorded: client_time_recorded_bool_exp
  website: String_comparison_exp
  zipcode: String_comparison_exp
}

"""
unique or primary key constraints on table "client"
"""
enum client_constraint {
  """unique or primary key constraint"""
  idx_1942930_primary
}

"""
input type for incrementing numeric columns in table "client"
"""
input client_inc_input {
  account_id: bigint
  hourly_rate: float8
  id: bigint
  retainer_hours: float8
}

"""
input type for inserting data into table "client"
"""
input client_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  account_users: account_user_arr_rel_insert_input
  accounts: account_arr_rel_insert_input
  address: String
  address2: String
  allowed_users: user_client_access_obj_rel_insert_input
  city: String
  client_type: String
  country: String
  created: timestamptz
  databases: database_arr_rel_insert_input
  events: event_arr_rel_insert_input
  fax: String
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  notify_options: String
  phone: String
  projects: project_arr_rel_insert_input
  retainer_end: timestamptz
  retainer_hours: float8
  retainer_start: timestamptz
  state: String
  status: String
  time_recorded: client_time_recorded_obj_rel_insert_input
  website: String
  zipcode: String
}

"""aggregate max on columns"""
type client_max_fields {
  account_id: bigint
  address: String
  address2: String
  city: String
  client_type: String
  country: String
  created: timestamptz
  fax: String
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  notify_options: String
  phone: String
  retainer_end: timestamptz
  retainer_hours: float8
  retainer_start: timestamptz
  state: String
  status: String
  website: String
  zipcode: String
}

"""
order by max() on columns of table "client"
"""
input client_max_order_by {
  account_id: order_by
  address: order_by
  address2: order_by
  city: order_by
  client_type: order_by
  country: order_by
  created: order_by
  fax: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  modified: order_by
  name: order_by
  notes: order_by
  notify_options: order_by
  phone: order_by
  retainer_end: order_by
  retainer_hours: order_by
  retainer_start: order_by
  state: order_by
  status: order_by
  website: order_by
  zipcode: order_by
}

"""aggregate min on columns"""
type client_min_fields {
  account_id: bigint
  address: String
  address2: String
  city: String
  client_type: String
  country: String
  created: timestamptz
  fax: String
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  notify_options: String
  phone: String
  retainer_end: timestamptz
  retainer_hours: float8
  retainer_start: timestamptz
  state: String
  status: String
  website: String
  zipcode: String
}

"""
order by min() on columns of table "client"
"""
input client_min_order_by {
  account_id: order_by
  address: order_by
  address2: order_by
  city: order_by
  client_type: order_by
  country: order_by
  created: order_by
  fax: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  modified: order_by
  name: order_by
  notes: order_by
  notify_options: order_by
  phone: order_by
  retainer_end: order_by
  retainer_hours: order_by
  retainer_start: order_by
  state: order_by
  status: order_by
  website: order_by
  zipcode: order_by
}

"""
response of any mutation on the table "client"
"""
type client_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [client!]!
}

"""
input type for inserting object relation for remote table "client"
"""
input client_obj_rel_insert_input {
  data: client_insert_input!

  """on conflict condition"""
  on_conflict: client_on_conflict
}

"""
on conflict condition type for table "client"
"""
input client_on_conflict {
  constraint: client_constraint!
  update_columns: [client_update_column!]! = []
  where: client_bool_exp
}

"""Ordering options when selecting data from "client"."""
input client_order_by {
  account: account_order_by
  account_id: order_by
  account_users_aggregate: account_user_aggregate_order_by
  accounts_aggregate: account_aggregate_order_by
  address: order_by
  address2: order_by
  allowed_users: user_client_access_order_by
  city: order_by
  client_type: order_by
  country: order_by
  created: order_by
  databases_aggregate: database_aggregate_order_by
  events_aggregate: event_aggregate_order_by
  fax: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  modified: order_by
  name: order_by
  notes: order_by
  notify_options: order_by
  phone: order_by
  projects_aggregate: project_aggregate_order_by
  retainer_end: order_by
  retainer_hours: order_by
  retainer_start: order_by
  state: order_by
  status: order_by
  time_recorded: client_time_recorded_order_by
  website: order_by
  zipcode: order_by
}

"""primary key columns input for table: client"""
input client_pk_columns_input {
  id: bigint!
}

"""
select columns of table "client"
"""
enum client_select_column {
  """column name"""
  account_id

  """column name"""
  address

  """column name"""
  address2

  """column name"""
  city

  """column name"""
  client_type

  """column name"""
  country

  """column name"""
  created

  """column name"""
  fax

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  notify_options

  """column name"""
  phone

  """column name"""
  retainer_end

  """column name"""
  retainer_hours

  """column name"""
  retainer_start

  """column name"""
  state

  """column name"""
  status

  """column name"""
  website

  """column name"""
  zipcode
}

"""
input type for updating data in table "client"
"""
input client_set_input {
  account_id: bigint
  address: String
  address2: String
  city: String
  client_type: String
  country: String
  created: timestamptz
  fax: String
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  notify_options: String
  phone: String
  retainer_end: timestamptz
  retainer_hours: float8
  retainer_start: timestamptz
  state: String
  status: String
  website: String
  zipcode: String
}

"""aggregate stddev on columns"""
type client_stddev_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by stddev() on columns of table "client"
"""
input client_stddev_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""aggregate stddev_pop on columns"""
type client_stddev_pop_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by stddev_pop() on columns of table "client"
"""
input client_stddev_pop_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""aggregate stddev_samp on columns"""
type client_stddev_samp_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by stddev_samp() on columns of table "client"
"""
input client_stddev_samp_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""aggregate sum on columns"""
type client_sum_fields {
  account_id: bigint
  hourly_rate: float8
  id: bigint
  retainer_hours: float8
}

"""
order by sum() on columns of table "client"
"""
input client_sum_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""
columns and relationships of "client_time_recorded"
"""
type client_time_recorded {
  """An object relationship"""
  client: client
  client_id: bigint
  hours_worked: float8
}

"""
aggregated selection of "client_time_recorded"
"""
type client_time_recorded_aggregate {
  aggregate: client_time_recorded_aggregate_fields
  nodes: [client_time_recorded!]!
}

"""
aggregate fields of "client_time_recorded"
"""
type client_time_recorded_aggregate_fields {
  avg: client_time_recorded_avg_fields
  count(columns: [client_time_recorded_select_column!], distinct: Boolean): Int!
  max: client_time_recorded_max_fields
  min: client_time_recorded_min_fields
  stddev: client_time_recorded_stddev_fields
  stddev_pop: client_time_recorded_stddev_pop_fields
  stddev_samp: client_time_recorded_stddev_samp_fields
  sum: client_time_recorded_sum_fields
  var_pop: client_time_recorded_var_pop_fields
  var_samp: client_time_recorded_var_samp_fields
  variance: client_time_recorded_variance_fields
}

"""aggregate avg on columns"""
type client_time_recorded_avg_fields {
  client_id: Float
  hours_worked: Float
}

"""
Boolean expression to filter rows from the table "client_time_recorded". All fields are combined with a logical 'AND'.
"""
input client_time_recorded_bool_exp {
  _and: [client_time_recorded_bool_exp!]
  _not: client_time_recorded_bool_exp
  _or: [client_time_recorded_bool_exp!]
  client: client_bool_exp
  client_id: bigint_comparison_exp
  hours_worked: float8_comparison_exp
}

"""
input type for inserting data into table "client_time_recorded"
"""
input client_time_recorded_insert_input {
  client: client_obj_rel_insert_input
  client_id: bigint
  hours_worked: float8
}

"""aggregate max on columns"""
type client_time_recorded_max_fields {
  client_id: bigint
  hours_worked: float8
}

"""aggregate min on columns"""
type client_time_recorded_min_fields {
  client_id: bigint
  hours_worked: float8
}

"""
input type for inserting object relation for remote table "client_time_recorded"
"""
input client_time_recorded_obj_rel_insert_input {
  data: client_time_recorded_insert_input!
}

"""Ordering options when selecting data from "client_time_recorded"."""
input client_time_recorded_order_by {
  client: client_order_by
  client_id: order_by
  hours_worked: order_by
}

"""
select columns of table "client_time_recorded"
"""
enum client_time_recorded_select_column {
  """column name"""
  client_id

  """column name"""
  hours_worked
}

"""aggregate stddev on columns"""
type client_time_recorded_stddev_fields {
  client_id: Float
  hours_worked: Float
}

"""aggregate stddev_pop on columns"""
type client_time_recorded_stddev_pop_fields {
  client_id: Float
  hours_worked: Float
}

"""aggregate stddev_samp on columns"""
type client_time_recorded_stddev_samp_fields {
  client_id: Float
  hours_worked: Float
}

"""aggregate sum on columns"""
type client_time_recorded_sum_fields {
  client_id: bigint
  hours_worked: float8
}

"""aggregate var_pop on columns"""
type client_time_recorded_var_pop_fields {
  client_id: Float
  hours_worked: Float
}

"""aggregate var_samp on columns"""
type client_time_recorded_var_samp_fields {
  client_id: Float
  hours_worked: Float
}

"""aggregate variance on columns"""
type client_time_recorded_variance_fields {
  client_id: Float
  hours_worked: Float
}

"""
update columns of table "client"
"""
enum client_update_column {
  """column name"""
  account_id

  """column name"""
  address

  """column name"""
  address2

  """column name"""
  city

  """column name"""
  client_type

  """column name"""
  country

  """column name"""
  created

  """column name"""
  fax

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  notify_options

  """column name"""
  phone

  """column name"""
  retainer_end

  """column name"""
  retainer_hours

  """column name"""
  retainer_start

  """column name"""
  state

  """column name"""
  status

  """column name"""
  website

  """column name"""
  zipcode
}

"""aggregate var_pop on columns"""
type client_var_pop_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by var_pop() on columns of table "client"
"""
input client_var_pop_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""aggregate var_samp on columns"""
type client_var_samp_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by var_samp() on columns of table "client"
"""
input client_var_samp_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""aggregate variance on columns"""
type client_variance_fields {
  account_id: Float
  hourly_rate: Float
  id: Float
  retainer_hours: Float
}

"""
order by variance() on columns of table "client"
"""
input client_variance_order_by {
  account_id: order_by
  hourly_rate: order_by
  id: order_by
  retainer_hours: order_by
}

"""
columns and relationships of "comment"
"""
type comment {
  create_user: bigint!
  created: timestamptz!
  id: bigint!
  message: String!
  notify_list: String
  parent_id: bigint

  """An object relationship"""
  project: project!
  project_id: bigint!
  subject: String

  """An object relationship"""
  user: users!
  visibility: String
}

"""
aggregated selection of "comment"
"""
type comment_aggregate {
  aggregate: comment_aggregate_fields
  nodes: [comment!]!
}

"""
aggregate fields of "comment"
"""
type comment_aggregate_fields {
  avg: comment_avg_fields
  count(columns: [comment_select_column!], distinct: Boolean): Int!
  max: comment_max_fields
  min: comment_min_fields
  stddev: comment_stddev_fields
  stddev_pop: comment_stddev_pop_fields
  stddev_samp: comment_stddev_samp_fields
  sum: comment_sum_fields
  var_pop: comment_var_pop_fields
  var_samp: comment_var_samp_fields
  variance: comment_variance_fields
}

"""
order by aggregate values of table "comment"
"""
input comment_aggregate_order_by {
  avg: comment_avg_order_by
  count: order_by
  max: comment_max_order_by
  min: comment_min_order_by
  stddev: comment_stddev_order_by
  stddev_pop: comment_stddev_pop_order_by
  stddev_samp: comment_stddev_samp_order_by
  sum: comment_sum_order_by
  var_pop: comment_var_pop_order_by
  var_samp: comment_var_samp_order_by
  variance: comment_variance_order_by
}

"""
input type for inserting array relation for remote table "comment"
"""
input comment_arr_rel_insert_input {
  data: [comment_insert_input!]!

  """on conflict condition"""
  on_conflict: comment_on_conflict
}

"""aggregate avg on columns"""
type comment_avg_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by avg() on columns of table "comment"
"""
input comment_avg_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "comment". All fields are combined with a logical 'AND'.
"""
input comment_bool_exp {
  _and: [comment_bool_exp!]
  _not: comment_bool_exp
  _or: [comment_bool_exp!]
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  id: bigint_comparison_exp
  message: String_comparison_exp
  notify_list: String_comparison_exp
  parent_id: bigint_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  subject: String_comparison_exp
  user: users_bool_exp
  visibility: String_comparison_exp
}

"""
unique or primary key constraints on table "comment"
"""
enum comment_constraint {
  """unique or primary key constraint"""
  idx_1942945_primary
}

"""
input type for incrementing numeric columns in table "comment"
"""
input comment_inc_input {
  create_user: bigint
  id: bigint
  parent_id: bigint
  project_id: bigint
}

"""
input type for inserting data into table "comment"
"""
input comment_insert_input {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  notify_list: String
  parent_id: bigint
  project: project_obj_rel_insert_input
  project_id: bigint
  subject: String
  user: users_obj_rel_insert_input
  visibility: String
}

"""aggregate max on columns"""
type comment_max_fields {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  notify_list: String
  parent_id: bigint
  project_id: bigint
  subject: String
  visibility: String
}

"""
order by max() on columns of table "comment"
"""
input comment_max_order_by {
  create_user: order_by
  created: order_by
  id: order_by
  message: order_by
  notify_list: order_by
  parent_id: order_by
  project_id: order_by
  subject: order_by
  visibility: order_by
}

"""aggregate min on columns"""
type comment_min_fields {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  notify_list: String
  parent_id: bigint
  project_id: bigint
  subject: String
  visibility: String
}

"""
order by min() on columns of table "comment"
"""
input comment_min_order_by {
  create_user: order_by
  created: order_by
  id: order_by
  message: order_by
  notify_list: order_by
  parent_id: order_by
  project_id: order_by
  subject: order_by
  visibility: order_by
}

"""
response of any mutation on the table "comment"
"""
type comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comment!]!
}

"""
on conflict condition type for table "comment"
"""
input comment_on_conflict {
  constraint: comment_constraint!
  update_columns: [comment_update_column!]! = []
  where: comment_bool_exp
}

"""Ordering options when selecting data from "comment"."""
input comment_order_by {
  create_user: order_by
  created: order_by
  id: order_by
  message: order_by
  notify_list: order_by
  parent_id: order_by
  project: project_order_by
  project_id: order_by
  subject: order_by
  user: users_order_by
  visibility: order_by
}

"""primary key columns input for table: comment"""
input comment_pk_columns_input {
  id: bigint!
}

"""
select columns of table "comment"
"""
enum comment_select_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  message

  """column name"""
  notify_list

  """column name"""
  parent_id

  """column name"""
  project_id

  """column name"""
  subject

  """column name"""
  visibility
}

"""
input type for updating data in table "comment"
"""
input comment_set_input {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  notify_list: String
  parent_id: bigint
  project_id: bigint
  subject: String
  visibility: String
}

"""aggregate stddev on columns"""
type comment_stddev_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev() on columns of table "comment"
"""
input comment_stddev_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type comment_stddev_pop_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev_pop() on columns of table "comment"
"""
input comment_stddev_pop_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type comment_stddev_samp_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev_samp() on columns of table "comment"
"""
input comment_stddev_samp_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate sum on columns"""
type comment_sum_fields {
  create_user: bigint
  id: bigint
  parent_id: bigint
  project_id: bigint
}

"""
order by sum() on columns of table "comment"
"""
input comment_sum_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""
update columns of table "comment"
"""
enum comment_update_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  message

  """column name"""
  notify_list

  """column name"""
  parent_id

  """column name"""
  project_id

  """column name"""
  subject

  """column name"""
  visibility
}

"""aggregate var_pop on columns"""
type comment_var_pop_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by var_pop() on columns of table "comment"
"""
input comment_var_pop_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate var_samp on columns"""
type comment_var_samp_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by var_samp() on columns of table "comment"
"""
input comment_var_samp_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate variance on columns"""
type comment_variance_fields {
  create_user: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by variance() on columns of table "comment"
"""
input comment_variance_order_by {
  create_user: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""
columns and relationships of "daily_time_entry"
"""
type daily_time_entry {
  entry_date: timestamp
  entry_user: bigint
  hours: float8

  """An object relationship"""
  task: task
  task_id: bigint

  """An object relationship"""
  user: users
}

"""
aggregated selection of "daily_time_entry"
"""
type daily_time_entry_aggregate {
  aggregate: daily_time_entry_aggregate_fields
  nodes: [daily_time_entry!]!
}

"""
aggregate fields of "daily_time_entry"
"""
type daily_time_entry_aggregate_fields {
  avg: daily_time_entry_avg_fields
  count(columns: [daily_time_entry_select_column!], distinct: Boolean): Int!
  max: daily_time_entry_max_fields
  min: daily_time_entry_min_fields
  stddev: daily_time_entry_stddev_fields
  stddev_pop: daily_time_entry_stddev_pop_fields
  stddev_samp: daily_time_entry_stddev_samp_fields
  sum: daily_time_entry_sum_fields
  var_pop: daily_time_entry_var_pop_fields
  var_samp: daily_time_entry_var_samp_fields
  variance: daily_time_entry_variance_fields
}

"""aggregate avg on columns"""
type daily_time_entry_avg_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""
Boolean expression to filter rows from the table "daily_time_entry". All fields are combined with a logical 'AND'.
"""
input daily_time_entry_bool_exp {
  _and: [daily_time_entry_bool_exp!]
  _not: daily_time_entry_bool_exp
  _or: [daily_time_entry_bool_exp!]
  entry_date: timestamp_comparison_exp
  entry_user: bigint_comparison_exp
  hours: float8_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
  user: users_bool_exp
}

"""aggregate max on columns"""
type daily_time_entry_max_fields {
  entry_date: timestamp
  entry_user: bigint
  hours: float8
  task_id: bigint
}

"""aggregate min on columns"""
type daily_time_entry_min_fields {
  entry_date: timestamp
  entry_user: bigint
  hours: float8
  task_id: bigint
}

"""Ordering options when selecting data from "daily_time_entry"."""
input daily_time_entry_order_by {
  entry_date: order_by
  entry_user: order_by
  hours: order_by
  task: task_order_by
  task_id: order_by
  user: users_order_by
}

"""
select columns of table "daily_time_entry"
"""
enum daily_time_entry_select_column {
  """column name"""
  entry_date

  """column name"""
  entry_user

  """column name"""
  hours

  """column name"""
  task_id
}

"""aggregate stddev on columns"""
type daily_time_entry_stddev_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""aggregate stddev_pop on columns"""
type daily_time_entry_stddev_pop_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""aggregate stddev_samp on columns"""
type daily_time_entry_stddev_samp_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""aggregate sum on columns"""
type daily_time_entry_sum_fields {
  entry_user: bigint
  hours: float8
  task_id: bigint
}

"""aggregate var_pop on columns"""
type daily_time_entry_var_pop_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""aggregate var_samp on columns"""
type daily_time_entry_var_samp_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""aggregate variance on columns"""
type daily_time_entry_variance_fields {
  entry_user: Float
  hours: Float
  task_id: Float
}

"""
columns and relationships of "database"
"""
type database {
  """An object relationship"""
  account: account!
  account_id: bigint!

  """An object relationship"""
  client: client
  client_id: bigint

  """An array relationship"""
  db_fields(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): [db_field!]!

  """An aggregate relationship"""
  db_fields_aggregate(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): db_field_aggregate!

  """An array relationship"""
  db_filters(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): [db_filter!]!

  """An aggregate relationship"""
  db_filters_aggregate(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): db_filter_aggregate!

  """An array relationship"""
  db_records(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): [db_record!]!

  """An aggregate relationship"""
  db_records_aggregate(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): db_record_aggregate!
  description: String
  id: bigint!
  name: String!
  permissions: String
  update_date: timestamptz!
  update_user: bigint!
}

"""
aggregated selection of "database"
"""
type database_aggregate {
  aggregate: database_aggregate_fields
  nodes: [database!]!
}

"""
aggregate fields of "database"
"""
type database_aggregate_fields {
  avg: database_avg_fields
  count(columns: [database_select_column!], distinct: Boolean): Int!
  max: database_max_fields
  min: database_min_fields
  stddev: database_stddev_fields
  stddev_pop: database_stddev_pop_fields
  stddev_samp: database_stddev_samp_fields
  sum: database_sum_fields
  var_pop: database_var_pop_fields
  var_samp: database_var_samp_fields
  variance: database_variance_fields
}

"""
order by aggregate values of table "database"
"""
input database_aggregate_order_by {
  avg: database_avg_order_by
  count: order_by
  max: database_max_order_by
  min: database_min_order_by
  stddev: database_stddev_order_by
  stddev_pop: database_stddev_pop_order_by
  stddev_samp: database_stddev_samp_order_by
  sum: database_sum_order_by
  var_pop: database_var_pop_order_by
  var_samp: database_var_samp_order_by
  variance: database_variance_order_by
}

"""
input type for inserting array relation for remote table "database"
"""
input database_arr_rel_insert_input {
  data: [database_insert_input!]!

  """on conflict condition"""
  on_conflict: database_on_conflict
}

"""aggregate avg on columns"""
type database_avg_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by avg() on columns of table "database"
"""
input database_avg_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "database". All fields are combined with a logical 'AND'.
"""
input database_bool_exp {
  _and: [database_bool_exp!]
  _not: database_bool_exp
  _or: [database_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  db_fields: db_field_bool_exp
  db_filters: db_filter_bool_exp
  db_records: db_record_bool_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  permissions: String_comparison_exp
  update_date: timestamptz_comparison_exp
  update_user: bigint_comparison_exp
}

"""
unique or primary key constraints on table "database"
"""
enum database_constraint {
  """unique or primary key constraint"""
  idx_1942955_primary
}

"""
input type for incrementing numeric columns in table "database"
"""
input database_inc_input {
  account_id: bigint
  client_id: bigint
  id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "database"
"""
input database_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  client: client_obj_rel_insert_input
  client_id: bigint
  db_fields: db_field_arr_rel_insert_input
  db_filters: db_filter_arr_rel_insert_input
  db_records: db_record_arr_rel_insert_input
  description: String
  id: bigint
  name: String
  permissions: String
  update_date: timestamptz
  update_user: bigint
}

"""aggregate max on columns"""
type database_max_fields {
  account_id: bigint
  client_id: bigint
  description: String
  id: bigint
  name: String
  permissions: String
  update_date: timestamptz
  update_user: bigint
}

"""
order by max() on columns of table "database"
"""
input database_max_order_by {
  account_id: order_by
  client_id: order_by
  description: order_by
  id: order_by
  name: order_by
  permissions: order_by
  update_date: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type database_min_fields {
  account_id: bigint
  client_id: bigint
  description: String
  id: bigint
  name: String
  permissions: String
  update_date: timestamptz
  update_user: bigint
}

"""
order by min() on columns of table "database"
"""
input database_min_order_by {
  account_id: order_by
  client_id: order_by
  description: order_by
  id: order_by
  name: order_by
  permissions: order_by
  update_date: order_by
  update_user: order_by
}

"""
response of any mutation on the table "database"
"""
type database_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [database!]!
}

"""
input type for inserting object relation for remote table "database"
"""
input database_obj_rel_insert_input {
  data: database_insert_input!

  """on conflict condition"""
  on_conflict: database_on_conflict
}

"""
on conflict condition type for table "database"
"""
input database_on_conflict {
  constraint: database_constraint!
  update_columns: [database_update_column!]! = []
  where: database_bool_exp
}

"""Ordering options when selecting data from "database"."""
input database_order_by {
  account: account_order_by
  account_id: order_by
  client: client_order_by
  client_id: order_by
  db_fields_aggregate: db_field_aggregate_order_by
  db_filters_aggregate: db_filter_aggregate_order_by
  db_records_aggregate: db_record_aggregate_order_by
  description: order_by
  id: order_by
  name: order_by
  permissions: order_by
  update_date: order_by
  update_user: order_by
}

"""primary key columns input for table: database"""
input database_pk_columns_input {
  id: bigint!
}

"""
select columns of table "database"
"""
enum database_select_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  update_date

  """column name"""
  update_user
}

"""
input type for updating data in table "database"
"""
input database_set_input {
  account_id: bigint
  client_id: bigint
  description: String
  id: bigint
  name: String
  permissions: String
  update_date: timestamptz
  update_user: bigint
}

"""aggregate stddev on columns"""
type database_stddev_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "database"
"""
input database_stddev_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type database_stddev_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "database"
"""
input database_stddev_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type database_stddev_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "database"
"""
input database_stddev_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type database_sum_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "database"
"""
input database_sum_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""
update columns of table "database"
"""
enum database_update_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  update_date

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type database_var_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "database"
"""
input database_var_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type database_var_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "database"
"""
input database_var_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type database_variance_fields {
  account_id: Float
  client_id: Float
  id: Float
  update_user: Float
}

"""
order by variance() on columns of table "database"
"""
input database_variance_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
  update_user: order_by
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "db_field"
"""
type db_field {
  choices: String

  """An object relationship"""
  database: database!
  db_id: bigint!
  description: String
  fld_number: Int!
  fld_order: Int!
  id: bigint!
  name: String!
  options: String
  type: String!
}

"""
aggregated selection of "db_field"
"""
type db_field_aggregate {
  aggregate: db_field_aggregate_fields
  nodes: [db_field!]!
}

"""
aggregate fields of "db_field"
"""
type db_field_aggregate_fields {
  avg: db_field_avg_fields
  count(columns: [db_field_select_column!], distinct: Boolean): Int!
  max: db_field_max_fields
  min: db_field_min_fields
  stddev: db_field_stddev_fields
  stddev_pop: db_field_stddev_pop_fields
  stddev_samp: db_field_stddev_samp_fields
  sum: db_field_sum_fields
  var_pop: db_field_var_pop_fields
  var_samp: db_field_var_samp_fields
  variance: db_field_variance_fields
}

"""
order by aggregate values of table "db_field"
"""
input db_field_aggregate_order_by {
  avg: db_field_avg_order_by
  count: order_by
  max: db_field_max_order_by
  min: db_field_min_order_by
  stddev: db_field_stddev_order_by
  stddev_pop: db_field_stddev_pop_order_by
  stddev_samp: db_field_stddev_samp_order_by
  sum: db_field_sum_order_by
  var_pop: db_field_var_pop_order_by
  var_samp: db_field_var_samp_order_by
  variance: db_field_variance_order_by
}

"""
input type for inserting array relation for remote table "db_field"
"""
input db_field_arr_rel_insert_input {
  data: [db_field_insert_input!]!

  """on conflict condition"""
  on_conflict: db_field_on_conflict
}

"""aggregate avg on columns"""
type db_field_avg_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by avg() on columns of table "db_field"
"""
input db_field_avg_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "db_field". All fields are combined with a logical 'AND'.
"""
input db_field_bool_exp {
  _and: [db_field_bool_exp!]
  _not: db_field_bool_exp
  _or: [db_field_bool_exp!]
  choices: String_comparison_exp
  database: database_bool_exp
  db_id: bigint_comparison_exp
  description: String_comparison_exp
  fld_number: Int_comparison_exp
  fld_order: Int_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  options: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "db_field"
"""
enum db_field_constraint {
  """unique or primary key constraint"""
  idx_1942964_primary
}

"""
input type for incrementing numeric columns in table "db_field"
"""
input db_field_inc_input {
  db_id: bigint
  fld_number: Int
  fld_order: Int
  id: bigint
}

"""
input type for inserting data into table "db_field"
"""
input db_field_insert_input {
  choices: String
  database: database_obj_rel_insert_input
  db_id: bigint
  description: String
  fld_number: Int
  fld_order: Int
  id: bigint
  name: String
  options: String
  type: String
}

"""aggregate max on columns"""
type db_field_max_fields {
  choices: String
  db_id: bigint
  description: String
  fld_number: Int
  fld_order: Int
  id: bigint
  name: String
  options: String
  type: String
}

"""
order by max() on columns of table "db_field"
"""
input db_field_max_order_by {
  choices: order_by
  db_id: order_by
  description: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
  name: order_by
  options: order_by
  type: order_by
}

"""aggregate min on columns"""
type db_field_min_fields {
  choices: String
  db_id: bigint
  description: String
  fld_number: Int
  fld_order: Int
  id: bigint
  name: String
  options: String
  type: String
}

"""
order by min() on columns of table "db_field"
"""
input db_field_min_order_by {
  choices: order_by
  db_id: order_by
  description: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
  name: order_by
  options: order_by
  type: order_by
}

"""
response of any mutation on the table "db_field"
"""
type db_field_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [db_field!]!
}

"""
on conflict condition type for table "db_field"
"""
input db_field_on_conflict {
  constraint: db_field_constraint!
  update_columns: [db_field_update_column!]! = []
  where: db_field_bool_exp
}

"""Ordering options when selecting data from "db_field"."""
input db_field_order_by {
  choices: order_by
  database: database_order_by
  db_id: order_by
  description: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
  name: order_by
  options: order_by
  type: order_by
}

"""primary key columns input for table: db_field"""
input db_field_pk_columns_input {
  id: bigint!
}

"""
select columns of table "db_field"
"""
enum db_field_select_column {
  """column name"""
  choices

  """column name"""
  db_id

  """column name"""
  description

  """column name"""
  fld_number

  """column name"""
  fld_order

  """column name"""
  id

  """column name"""
  name

  """column name"""
  options

  """column name"""
  type
}

"""
input type for updating data in table "db_field"
"""
input db_field_set_input {
  choices: String
  db_id: bigint
  description: String
  fld_number: Int
  fld_order: Int
  id: bigint
  name: String
  options: String
  type: String
}

"""aggregate stddev on columns"""
type db_field_stddev_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by stddev() on columns of table "db_field"
"""
input db_field_stddev_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type db_field_stddev_pop_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "db_field"
"""
input db_field_stddev_pop_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type db_field_stddev_samp_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "db_field"
"""
input db_field_stddev_samp_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""aggregate sum on columns"""
type db_field_sum_fields {
  db_id: bigint
  fld_number: Int
  fld_order: Int
  id: bigint
}

"""
order by sum() on columns of table "db_field"
"""
input db_field_sum_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""
update columns of table "db_field"
"""
enum db_field_update_column {
  """column name"""
  choices

  """column name"""
  db_id

  """column name"""
  description

  """column name"""
  fld_number

  """column name"""
  fld_order

  """column name"""
  id

  """column name"""
  name

  """column name"""
  options

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type db_field_var_pop_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by var_pop() on columns of table "db_field"
"""
input db_field_var_pop_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type db_field_var_samp_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by var_samp() on columns of table "db_field"
"""
input db_field_var_samp_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""aggregate variance on columns"""
type db_field_variance_fields {
  db_id: Float
  fld_number: Float
  fld_order: Float
  id: Float
}

"""
order by variance() on columns of table "db_field"
"""
input db_field_variance_order_by {
  db_id: order_by
  fld_number: order_by
  fld_order: order_by
  id: order_by
}

"""
columns and relationships of "db_filter"
"""
type db_filter {
  criteria: String

  """An object relationship"""
  database: database!
  db_id: bigint!
  id: bigint!
  name: String!
  sort_dir: String!
  sort_order: Int!
}

"""
aggregated selection of "db_filter"
"""
type db_filter_aggregate {
  aggregate: db_filter_aggregate_fields
  nodes: [db_filter!]!
}

"""
aggregate fields of "db_filter"
"""
type db_filter_aggregate_fields {
  avg: db_filter_avg_fields
  count(columns: [db_filter_select_column!], distinct: Boolean): Int!
  max: db_filter_max_fields
  min: db_filter_min_fields
  stddev: db_filter_stddev_fields
  stddev_pop: db_filter_stddev_pop_fields
  stddev_samp: db_filter_stddev_samp_fields
  sum: db_filter_sum_fields
  var_pop: db_filter_var_pop_fields
  var_samp: db_filter_var_samp_fields
  variance: db_filter_variance_fields
}

"""
order by aggregate values of table "db_filter"
"""
input db_filter_aggregate_order_by {
  avg: db_filter_avg_order_by
  count: order_by
  max: db_filter_max_order_by
  min: db_filter_min_order_by
  stddev: db_filter_stddev_order_by
  stddev_pop: db_filter_stddev_pop_order_by
  stddev_samp: db_filter_stddev_samp_order_by
  sum: db_filter_sum_order_by
  var_pop: db_filter_var_pop_order_by
  var_samp: db_filter_var_samp_order_by
  variance: db_filter_variance_order_by
}

"""
input type for inserting array relation for remote table "db_filter"
"""
input db_filter_arr_rel_insert_input {
  data: [db_filter_insert_input!]!

  """on conflict condition"""
  on_conflict: db_filter_on_conflict
}

"""aggregate avg on columns"""
type db_filter_avg_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by avg() on columns of table "db_filter"
"""
input db_filter_avg_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""
Boolean expression to filter rows from the table "db_filter". All fields are combined with a logical 'AND'.
"""
input db_filter_bool_exp {
  _and: [db_filter_bool_exp!]
  _not: db_filter_bool_exp
  _or: [db_filter_bool_exp!]
  criteria: String_comparison_exp
  database: database_bool_exp
  db_id: bigint_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  sort_dir: String_comparison_exp
  sort_order: Int_comparison_exp
}

"""
unique or primary key constraints on table "db_filter"
"""
enum db_filter_constraint {
  """unique or primary key constraint"""
  idx_1942973_primary
}

"""
input type for incrementing numeric columns in table "db_filter"
"""
input db_filter_inc_input {
  db_id: bigint
  id: bigint
  sort_order: Int
}

"""
input type for inserting data into table "db_filter"
"""
input db_filter_insert_input {
  criteria: String
  database: database_obj_rel_insert_input
  db_id: bigint
  id: bigint
  name: String
  sort_dir: String
  sort_order: Int
}

"""aggregate max on columns"""
type db_filter_max_fields {
  criteria: String
  db_id: bigint
  id: bigint
  name: String
  sort_dir: String
  sort_order: Int
}

"""
order by max() on columns of table "db_filter"
"""
input db_filter_max_order_by {
  criteria: order_by
  db_id: order_by
  id: order_by
  name: order_by
  sort_dir: order_by
  sort_order: order_by
}

"""aggregate min on columns"""
type db_filter_min_fields {
  criteria: String
  db_id: bigint
  id: bigint
  name: String
  sort_dir: String
  sort_order: Int
}

"""
order by min() on columns of table "db_filter"
"""
input db_filter_min_order_by {
  criteria: order_by
  db_id: order_by
  id: order_by
  name: order_by
  sort_dir: order_by
  sort_order: order_by
}

"""
response of any mutation on the table "db_filter"
"""
type db_filter_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [db_filter!]!
}

"""
on conflict condition type for table "db_filter"
"""
input db_filter_on_conflict {
  constraint: db_filter_constraint!
  update_columns: [db_filter_update_column!]! = []
  where: db_filter_bool_exp
}

"""Ordering options when selecting data from "db_filter"."""
input db_filter_order_by {
  criteria: order_by
  database: database_order_by
  db_id: order_by
  id: order_by
  name: order_by
  sort_dir: order_by
  sort_order: order_by
}

"""primary key columns input for table: db_filter"""
input db_filter_pk_columns_input {
  id: bigint!
}

"""
select columns of table "db_filter"
"""
enum db_filter_select_column {
  """column name"""
  criteria

  """column name"""
  db_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  sort_dir

  """column name"""
  sort_order
}

"""
input type for updating data in table "db_filter"
"""
input db_filter_set_input {
  criteria: String
  db_id: bigint
  id: bigint
  name: String
  sort_dir: String
  sort_order: Int
}

"""aggregate stddev on columns"""
type db_filter_stddev_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by stddev() on columns of table "db_filter"
"""
input db_filter_stddev_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""aggregate stddev_pop on columns"""
type db_filter_stddev_pop_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by stddev_pop() on columns of table "db_filter"
"""
input db_filter_stddev_pop_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""aggregate stddev_samp on columns"""
type db_filter_stddev_samp_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by stddev_samp() on columns of table "db_filter"
"""
input db_filter_stddev_samp_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""aggregate sum on columns"""
type db_filter_sum_fields {
  db_id: bigint
  id: bigint
  sort_order: Int
}

"""
order by sum() on columns of table "db_filter"
"""
input db_filter_sum_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""
update columns of table "db_filter"
"""
enum db_filter_update_column {
  """column name"""
  criteria

  """column name"""
  db_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  sort_dir

  """column name"""
  sort_order
}

"""aggregate var_pop on columns"""
type db_filter_var_pop_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by var_pop() on columns of table "db_filter"
"""
input db_filter_var_pop_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""aggregate var_samp on columns"""
type db_filter_var_samp_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by var_samp() on columns of table "db_filter"
"""
input db_filter_var_samp_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""aggregate variance on columns"""
type db_filter_variance_fields {
  db_id: Float
  id: Float
  sort_order: Float
}

"""
order by variance() on columns of table "db_filter"
"""
input db_filter_variance_order_by {
  db_id: order_by
  id: order_by
  sort_order: order_by
}

"""
columns and relationships of "db_note"
"""
type db_note {
  """An object relationship"""
  db_record: db_record!
  id: bigint!
  message: String
  record_id: bigint!
  update_date: timestamptz!
  update_user: String!
  update_user_id: bigint!
}

"""
aggregated selection of "db_note"
"""
type db_note_aggregate {
  aggregate: db_note_aggregate_fields
  nodes: [db_note!]!
}

"""
aggregate fields of "db_note"
"""
type db_note_aggregate_fields {
  avg: db_note_avg_fields
  count(columns: [db_note_select_column!], distinct: Boolean): Int!
  max: db_note_max_fields
  min: db_note_min_fields
  stddev: db_note_stddev_fields
  stddev_pop: db_note_stddev_pop_fields
  stddev_samp: db_note_stddev_samp_fields
  sum: db_note_sum_fields
  var_pop: db_note_var_pop_fields
  var_samp: db_note_var_samp_fields
  variance: db_note_variance_fields
}

"""
order by aggregate values of table "db_note"
"""
input db_note_aggregate_order_by {
  avg: db_note_avg_order_by
  count: order_by
  max: db_note_max_order_by
  min: db_note_min_order_by
  stddev: db_note_stddev_order_by
  stddev_pop: db_note_stddev_pop_order_by
  stddev_samp: db_note_stddev_samp_order_by
  sum: db_note_sum_order_by
  var_pop: db_note_var_pop_order_by
  var_samp: db_note_var_samp_order_by
  variance: db_note_variance_order_by
}

"""
input type for inserting array relation for remote table "db_note"
"""
input db_note_arr_rel_insert_input {
  data: [db_note_insert_input!]!

  """on conflict condition"""
  on_conflict: db_note_on_conflict
}

"""aggregate avg on columns"""
type db_note_avg_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by avg() on columns of table "db_note"
"""
input db_note_avg_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""
Boolean expression to filter rows from the table "db_note". All fields are combined with a logical 'AND'.
"""
input db_note_bool_exp {
  _and: [db_note_bool_exp!]
  _not: db_note_bool_exp
  _or: [db_note_bool_exp!]
  db_record: db_record_bool_exp
  id: bigint_comparison_exp
  message: String_comparison_exp
  record_id: bigint_comparison_exp
  update_date: timestamptz_comparison_exp
  update_user: String_comparison_exp
  update_user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "db_note"
"""
enum db_note_constraint {
  """unique or primary key constraint"""
  idx_1942982_primary
}

"""
input type for incrementing numeric columns in table "db_note"
"""
input db_note_inc_input {
  id: bigint
  record_id: bigint
  update_user_id: bigint
}

"""
input type for inserting data into table "db_note"
"""
input db_note_insert_input {
  db_record: db_record_obj_rel_insert_input
  id: bigint
  message: String
  record_id: bigint
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""aggregate max on columns"""
type db_note_max_fields {
  id: bigint
  message: String
  record_id: bigint
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""
order by max() on columns of table "db_note"
"""
input db_note_max_order_by {
  id: order_by
  message: order_by
  record_id: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""aggregate min on columns"""
type db_note_min_fields {
  id: bigint
  message: String
  record_id: bigint
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""
order by min() on columns of table "db_note"
"""
input db_note_min_order_by {
  id: order_by
  message: order_by
  record_id: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""
response of any mutation on the table "db_note"
"""
type db_note_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [db_note!]!
}

"""
on conflict condition type for table "db_note"
"""
input db_note_on_conflict {
  constraint: db_note_constraint!
  update_columns: [db_note_update_column!]! = []
  where: db_note_bool_exp
}

"""Ordering options when selecting data from "db_note"."""
input db_note_order_by {
  db_record: db_record_order_by
  id: order_by
  message: order_by
  record_id: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""primary key columns input for table: db_note"""
input db_note_pk_columns_input {
  id: bigint!
}

"""
select columns of table "db_note"
"""
enum db_note_select_column {
  """column name"""
  id

  """column name"""
  message

  """column name"""
  record_id

  """column name"""
  update_date

  """column name"""
  update_user

  """column name"""
  update_user_id
}

"""
input type for updating data in table "db_note"
"""
input db_note_set_input {
  id: bigint
  message: String
  record_id: bigint
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""aggregate stddev on columns"""
type db_note_stddev_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by stddev() on columns of table "db_note"
"""
input db_note_stddev_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""aggregate stddev_pop on columns"""
type db_note_stddev_pop_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by stddev_pop() on columns of table "db_note"
"""
input db_note_stddev_pop_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""aggregate stddev_samp on columns"""
type db_note_stddev_samp_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by stddev_samp() on columns of table "db_note"
"""
input db_note_stddev_samp_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""aggregate sum on columns"""
type db_note_sum_fields {
  id: bigint
  record_id: bigint
  update_user_id: bigint
}

"""
order by sum() on columns of table "db_note"
"""
input db_note_sum_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""
update columns of table "db_note"
"""
enum db_note_update_column {
  """column name"""
  id

  """column name"""
  message

  """column name"""
  record_id

  """column name"""
  update_date

  """column name"""
  update_user

  """column name"""
  update_user_id
}

"""aggregate var_pop on columns"""
type db_note_var_pop_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by var_pop() on columns of table "db_note"
"""
input db_note_var_pop_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""aggregate var_samp on columns"""
type db_note_var_samp_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by var_samp() on columns of table "db_note"
"""
input db_note_var_samp_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""aggregate variance on columns"""
type db_note_variance_fields {
  id: Float
  record_id: Float
  update_user_id: Float
}

"""
order by variance() on columns of table "db_note"
"""
input db_note_variance_order_by {
  id: order_by
  record_id: order_by
  update_user_id: order_by
}

"""
columns and relationships of "db_record"
"""
type db_record {
  """An object relationship"""
  database: database!
  db_id: bigint!

  """An array relationship"""
  db_notes(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): [db_note!]!

  """An aggregate relationship"""
  db_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): db_note_aggregate!
  fld_1: String
  fld_10: String
  fld_11: String
  fld_12: String
  fld_13: String
  fld_14: String
  fld_15: String
  fld_16: String
  fld_17: String
  fld_18: String
  fld_19: String
  fld_2: String
  fld_20: String
  fld_21: String
  fld_22: String
  fld_23: String
  fld_24: String
  fld_25: String
  fld_26: String
  fld_27: String
  fld_28: String
  fld_29: String
  fld_3: String
  fld_30: String
  fld_31: String
  fld_32: String
  fld_33: String
  fld_34: String
  fld_35: String
  fld_36: String
  fld_37: String
  fld_38: String
  fld_39: String
  fld_4: String
  fld_40: String
  fld_41: String
  fld_42: String
  fld_43: String
  fld_44: String
  fld_45: String
  fld_46: String
  fld_47: String
  fld_48: String
  fld_49: String
  fld_5: String
  fld_50: String
  fld_6: String
  fld_7: String
  fld_8: String
  fld_9: String
  id: bigint!
  update_date: timestamptz!
  update_user: bigint!
}

"""
aggregated selection of "db_record"
"""
type db_record_aggregate {
  aggregate: db_record_aggregate_fields
  nodes: [db_record!]!
}

"""
aggregate fields of "db_record"
"""
type db_record_aggregate_fields {
  avg: db_record_avg_fields
  count(columns: [db_record_select_column!], distinct: Boolean): Int!
  max: db_record_max_fields
  min: db_record_min_fields
  stddev: db_record_stddev_fields
  stddev_pop: db_record_stddev_pop_fields
  stddev_samp: db_record_stddev_samp_fields
  sum: db_record_sum_fields
  var_pop: db_record_var_pop_fields
  var_samp: db_record_var_samp_fields
  variance: db_record_variance_fields
}

"""
order by aggregate values of table "db_record"
"""
input db_record_aggregate_order_by {
  avg: db_record_avg_order_by
  count: order_by
  max: db_record_max_order_by
  min: db_record_min_order_by
  stddev: db_record_stddev_order_by
  stddev_pop: db_record_stddev_pop_order_by
  stddev_samp: db_record_stddev_samp_order_by
  sum: db_record_sum_order_by
  var_pop: db_record_var_pop_order_by
  var_samp: db_record_var_samp_order_by
  variance: db_record_variance_order_by
}

"""
input type for inserting array relation for remote table "db_record"
"""
input db_record_arr_rel_insert_input {
  data: [db_record_insert_input!]!

  """on conflict condition"""
  on_conflict: db_record_on_conflict
}

"""aggregate avg on columns"""
type db_record_avg_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by avg() on columns of table "db_record"
"""
input db_record_avg_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "db_record". All fields are combined with a logical 'AND'.
"""
input db_record_bool_exp {
  _and: [db_record_bool_exp!]
  _not: db_record_bool_exp
  _or: [db_record_bool_exp!]
  database: database_bool_exp
  db_id: bigint_comparison_exp
  db_notes: db_note_bool_exp
  fld_1: String_comparison_exp
  fld_10: String_comparison_exp
  fld_11: String_comparison_exp
  fld_12: String_comparison_exp
  fld_13: String_comparison_exp
  fld_14: String_comparison_exp
  fld_15: String_comparison_exp
  fld_16: String_comparison_exp
  fld_17: String_comparison_exp
  fld_18: String_comparison_exp
  fld_19: String_comparison_exp
  fld_2: String_comparison_exp
  fld_20: String_comparison_exp
  fld_21: String_comparison_exp
  fld_22: String_comparison_exp
  fld_23: String_comparison_exp
  fld_24: String_comparison_exp
  fld_25: String_comparison_exp
  fld_26: String_comparison_exp
  fld_27: String_comparison_exp
  fld_28: String_comparison_exp
  fld_29: String_comparison_exp
  fld_3: String_comparison_exp
  fld_30: String_comparison_exp
  fld_31: String_comparison_exp
  fld_32: String_comparison_exp
  fld_33: String_comparison_exp
  fld_34: String_comparison_exp
  fld_35: String_comparison_exp
  fld_36: String_comparison_exp
  fld_37: String_comparison_exp
  fld_38: String_comparison_exp
  fld_39: String_comparison_exp
  fld_4: String_comparison_exp
  fld_40: String_comparison_exp
  fld_41: String_comparison_exp
  fld_42: String_comparison_exp
  fld_43: String_comparison_exp
  fld_44: String_comparison_exp
  fld_45: String_comparison_exp
  fld_46: String_comparison_exp
  fld_47: String_comparison_exp
  fld_48: String_comparison_exp
  fld_49: String_comparison_exp
  fld_5: String_comparison_exp
  fld_50: String_comparison_exp
  fld_6: String_comparison_exp
  fld_7: String_comparison_exp
  fld_8: String_comparison_exp
  fld_9: String_comparison_exp
  id: bigint_comparison_exp
  update_date: timestamptz_comparison_exp
  update_user: bigint_comparison_exp
}

"""
unique or primary key constraints on table "db_record"
"""
enum db_record_constraint {
  """unique or primary key constraint"""
  idx_1942991_primary
}

"""
input type for incrementing numeric columns in table "db_record"
"""
input db_record_inc_input {
  db_id: bigint
  id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "db_record"
"""
input db_record_insert_input {
  database: database_obj_rel_insert_input
  db_id: bigint
  db_notes: db_note_arr_rel_insert_input
  fld_1: String
  fld_10: String
  fld_11: String
  fld_12: String
  fld_13: String
  fld_14: String
  fld_15: String
  fld_16: String
  fld_17: String
  fld_18: String
  fld_19: String
  fld_2: String
  fld_20: String
  fld_21: String
  fld_22: String
  fld_23: String
  fld_24: String
  fld_25: String
  fld_26: String
  fld_27: String
  fld_28: String
  fld_29: String
  fld_3: String
  fld_30: String
  fld_31: String
  fld_32: String
  fld_33: String
  fld_34: String
  fld_35: String
  fld_36: String
  fld_37: String
  fld_38: String
  fld_39: String
  fld_4: String
  fld_40: String
  fld_41: String
  fld_42: String
  fld_43: String
  fld_44: String
  fld_45: String
  fld_46: String
  fld_47: String
  fld_48: String
  fld_49: String
  fld_5: String
  fld_50: String
  fld_6: String
  fld_7: String
  fld_8: String
  fld_9: String
  id: bigint
  update_date: timestamptz
  update_user: bigint
}

"""aggregate max on columns"""
type db_record_max_fields {
  db_id: bigint
  fld_1: String
  fld_10: String
  fld_11: String
  fld_12: String
  fld_13: String
  fld_14: String
  fld_15: String
  fld_16: String
  fld_17: String
  fld_18: String
  fld_19: String
  fld_2: String
  fld_20: String
  fld_21: String
  fld_22: String
  fld_23: String
  fld_24: String
  fld_25: String
  fld_26: String
  fld_27: String
  fld_28: String
  fld_29: String
  fld_3: String
  fld_30: String
  fld_31: String
  fld_32: String
  fld_33: String
  fld_34: String
  fld_35: String
  fld_36: String
  fld_37: String
  fld_38: String
  fld_39: String
  fld_4: String
  fld_40: String
  fld_41: String
  fld_42: String
  fld_43: String
  fld_44: String
  fld_45: String
  fld_46: String
  fld_47: String
  fld_48: String
  fld_49: String
  fld_5: String
  fld_50: String
  fld_6: String
  fld_7: String
  fld_8: String
  fld_9: String
  id: bigint
  update_date: timestamptz
  update_user: bigint
}

"""
order by max() on columns of table "db_record"
"""
input db_record_max_order_by {
  db_id: order_by
  fld_1: order_by
  fld_10: order_by
  fld_11: order_by
  fld_12: order_by
  fld_13: order_by
  fld_14: order_by
  fld_15: order_by
  fld_16: order_by
  fld_17: order_by
  fld_18: order_by
  fld_19: order_by
  fld_2: order_by
  fld_20: order_by
  fld_21: order_by
  fld_22: order_by
  fld_23: order_by
  fld_24: order_by
  fld_25: order_by
  fld_26: order_by
  fld_27: order_by
  fld_28: order_by
  fld_29: order_by
  fld_3: order_by
  fld_30: order_by
  fld_31: order_by
  fld_32: order_by
  fld_33: order_by
  fld_34: order_by
  fld_35: order_by
  fld_36: order_by
  fld_37: order_by
  fld_38: order_by
  fld_39: order_by
  fld_4: order_by
  fld_40: order_by
  fld_41: order_by
  fld_42: order_by
  fld_43: order_by
  fld_44: order_by
  fld_45: order_by
  fld_46: order_by
  fld_47: order_by
  fld_48: order_by
  fld_49: order_by
  fld_5: order_by
  fld_50: order_by
  fld_6: order_by
  fld_7: order_by
  fld_8: order_by
  fld_9: order_by
  id: order_by
  update_date: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type db_record_min_fields {
  db_id: bigint
  fld_1: String
  fld_10: String
  fld_11: String
  fld_12: String
  fld_13: String
  fld_14: String
  fld_15: String
  fld_16: String
  fld_17: String
  fld_18: String
  fld_19: String
  fld_2: String
  fld_20: String
  fld_21: String
  fld_22: String
  fld_23: String
  fld_24: String
  fld_25: String
  fld_26: String
  fld_27: String
  fld_28: String
  fld_29: String
  fld_3: String
  fld_30: String
  fld_31: String
  fld_32: String
  fld_33: String
  fld_34: String
  fld_35: String
  fld_36: String
  fld_37: String
  fld_38: String
  fld_39: String
  fld_4: String
  fld_40: String
  fld_41: String
  fld_42: String
  fld_43: String
  fld_44: String
  fld_45: String
  fld_46: String
  fld_47: String
  fld_48: String
  fld_49: String
  fld_5: String
  fld_50: String
  fld_6: String
  fld_7: String
  fld_8: String
  fld_9: String
  id: bigint
  update_date: timestamptz
  update_user: bigint
}

"""
order by min() on columns of table "db_record"
"""
input db_record_min_order_by {
  db_id: order_by
  fld_1: order_by
  fld_10: order_by
  fld_11: order_by
  fld_12: order_by
  fld_13: order_by
  fld_14: order_by
  fld_15: order_by
  fld_16: order_by
  fld_17: order_by
  fld_18: order_by
  fld_19: order_by
  fld_2: order_by
  fld_20: order_by
  fld_21: order_by
  fld_22: order_by
  fld_23: order_by
  fld_24: order_by
  fld_25: order_by
  fld_26: order_by
  fld_27: order_by
  fld_28: order_by
  fld_29: order_by
  fld_3: order_by
  fld_30: order_by
  fld_31: order_by
  fld_32: order_by
  fld_33: order_by
  fld_34: order_by
  fld_35: order_by
  fld_36: order_by
  fld_37: order_by
  fld_38: order_by
  fld_39: order_by
  fld_4: order_by
  fld_40: order_by
  fld_41: order_by
  fld_42: order_by
  fld_43: order_by
  fld_44: order_by
  fld_45: order_by
  fld_46: order_by
  fld_47: order_by
  fld_48: order_by
  fld_49: order_by
  fld_5: order_by
  fld_50: order_by
  fld_6: order_by
  fld_7: order_by
  fld_8: order_by
  fld_9: order_by
  id: order_by
  update_date: order_by
  update_user: order_by
}

"""
response of any mutation on the table "db_record"
"""
type db_record_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [db_record!]!
}

"""
input type for inserting object relation for remote table "db_record"
"""
input db_record_obj_rel_insert_input {
  data: db_record_insert_input!

  """on conflict condition"""
  on_conflict: db_record_on_conflict
}

"""
on conflict condition type for table "db_record"
"""
input db_record_on_conflict {
  constraint: db_record_constraint!
  update_columns: [db_record_update_column!]! = []
  where: db_record_bool_exp
}

"""Ordering options when selecting data from "db_record"."""
input db_record_order_by {
  database: database_order_by
  db_id: order_by
  db_notes_aggregate: db_note_aggregate_order_by
  fld_1: order_by
  fld_10: order_by
  fld_11: order_by
  fld_12: order_by
  fld_13: order_by
  fld_14: order_by
  fld_15: order_by
  fld_16: order_by
  fld_17: order_by
  fld_18: order_by
  fld_19: order_by
  fld_2: order_by
  fld_20: order_by
  fld_21: order_by
  fld_22: order_by
  fld_23: order_by
  fld_24: order_by
  fld_25: order_by
  fld_26: order_by
  fld_27: order_by
  fld_28: order_by
  fld_29: order_by
  fld_3: order_by
  fld_30: order_by
  fld_31: order_by
  fld_32: order_by
  fld_33: order_by
  fld_34: order_by
  fld_35: order_by
  fld_36: order_by
  fld_37: order_by
  fld_38: order_by
  fld_39: order_by
  fld_4: order_by
  fld_40: order_by
  fld_41: order_by
  fld_42: order_by
  fld_43: order_by
  fld_44: order_by
  fld_45: order_by
  fld_46: order_by
  fld_47: order_by
  fld_48: order_by
  fld_49: order_by
  fld_5: order_by
  fld_50: order_by
  fld_6: order_by
  fld_7: order_by
  fld_8: order_by
  fld_9: order_by
  id: order_by
  update_date: order_by
  update_user: order_by
}

"""primary key columns input for table: db_record"""
input db_record_pk_columns_input {
  id: bigint!
}

"""
select columns of table "db_record"
"""
enum db_record_select_column {
  """column name"""
  db_id

  """column name"""
  fld_1

  """column name"""
  fld_10

  """column name"""
  fld_11

  """column name"""
  fld_12

  """column name"""
  fld_13

  """column name"""
  fld_14

  """column name"""
  fld_15

  """column name"""
  fld_16

  """column name"""
  fld_17

  """column name"""
  fld_18

  """column name"""
  fld_19

  """column name"""
  fld_2

  """column name"""
  fld_20

  """column name"""
  fld_21

  """column name"""
  fld_22

  """column name"""
  fld_23

  """column name"""
  fld_24

  """column name"""
  fld_25

  """column name"""
  fld_26

  """column name"""
  fld_27

  """column name"""
  fld_28

  """column name"""
  fld_29

  """column name"""
  fld_3

  """column name"""
  fld_30

  """column name"""
  fld_31

  """column name"""
  fld_32

  """column name"""
  fld_33

  """column name"""
  fld_34

  """column name"""
  fld_35

  """column name"""
  fld_36

  """column name"""
  fld_37

  """column name"""
  fld_38

  """column name"""
  fld_39

  """column name"""
  fld_4

  """column name"""
  fld_40

  """column name"""
  fld_41

  """column name"""
  fld_42

  """column name"""
  fld_43

  """column name"""
  fld_44

  """column name"""
  fld_45

  """column name"""
  fld_46

  """column name"""
  fld_47

  """column name"""
  fld_48

  """column name"""
  fld_49

  """column name"""
  fld_5

  """column name"""
  fld_50

  """column name"""
  fld_6

  """column name"""
  fld_7

  """column name"""
  fld_8

  """column name"""
  fld_9

  """column name"""
  id

  """column name"""
  update_date

  """column name"""
  update_user
}

"""
input type for updating data in table "db_record"
"""
input db_record_set_input {
  db_id: bigint
  fld_1: String
  fld_10: String
  fld_11: String
  fld_12: String
  fld_13: String
  fld_14: String
  fld_15: String
  fld_16: String
  fld_17: String
  fld_18: String
  fld_19: String
  fld_2: String
  fld_20: String
  fld_21: String
  fld_22: String
  fld_23: String
  fld_24: String
  fld_25: String
  fld_26: String
  fld_27: String
  fld_28: String
  fld_29: String
  fld_3: String
  fld_30: String
  fld_31: String
  fld_32: String
  fld_33: String
  fld_34: String
  fld_35: String
  fld_36: String
  fld_37: String
  fld_38: String
  fld_39: String
  fld_4: String
  fld_40: String
  fld_41: String
  fld_42: String
  fld_43: String
  fld_44: String
  fld_45: String
  fld_46: String
  fld_47: String
  fld_48: String
  fld_49: String
  fld_5: String
  fld_50: String
  fld_6: String
  fld_7: String
  fld_8: String
  fld_9: String
  id: bigint
  update_date: timestamptz
  update_user: bigint
}

"""aggregate stddev on columns"""
type db_record_stddev_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "db_record"
"""
input db_record_stddev_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type db_record_stddev_pop_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "db_record"
"""
input db_record_stddev_pop_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type db_record_stddev_samp_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "db_record"
"""
input db_record_stddev_samp_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type db_record_sum_fields {
  db_id: bigint
  id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "db_record"
"""
input db_record_sum_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""
update columns of table "db_record"
"""
enum db_record_update_column {
  """column name"""
  db_id

  """column name"""
  fld_1

  """column name"""
  fld_10

  """column name"""
  fld_11

  """column name"""
  fld_12

  """column name"""
  fld_13

  """column name"""
  fld_14

  """column name"""
  fld_15

  """column name"""
  fld_16

  """column name"""
  fld_17

  """column name"""
  fld_18

  """column name"""
  fld_19

  """column name"""
  fld_2

  """column name"""
  fld_20

  """column name"""
  fld_21

  """column name"""
  fld_22

  """column name"""
  fld_23

  """column name"""
  fld_24

  """column name"""
  fld_25

  """column name"""
  fld_26

  """column name"""
  fld_27

  """column name"""
  fld_28

  """column name"""
  fld_29

  """column name"""
  fld_3

  """column name"""
  fld_30

  """column name"""
  fld_31

  """column name"""
  fld_32

  """column name"""
  fld_33

  """column name"""
  fld_34

  """column name"""
  fld_35

  """column name"""
  fld_36

  """column name"""
  fld_37

  """column name"""
  fld_38

  """column name"""
  fld_39

  """column name"""
  fld_4

  """column name"""
  fld_40

  """column name"""
  fld_41

  """column name"""
  fld_42

  """column name"""
  fld_43

  """column name"""
  fld_44

  """column name"""
  fld_45

  """column name"""
  fld_46

  """column name"""
  fld_47

  """column name"""
  fld_48

  """column name"""
  fld_49

  """column name"""
  fld_5

  """column name"""
  fld_50

  """column name"""
  fld_6

  """column name"""
  fld_7

  """column name"""
  fld_8

  """column name"""
  fld_9

  """column name"""
  id

  """column name"""
  update_date

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type db_record_var_pop_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "db_record"
"""
input db_record_var_pop_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type db_record_var_samp_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "db_record"
"""
input db_record_var_samp_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type db_record_variance_fields {
  db_id: Float
  id: Float
  update_user: Float
}

"""
order by variance() on columns of table "db_record"
"""
input db_record_variance_order_by {
  db_id: order_by
  id: order_by
  update_user: order_by
}

"""
columns and relationships of "document"
"""
type document {
  content: String

  """An object relationship"""
  file: file!
  file_id: bigint!
  id: bigint!
  notes: String
  update_date: timestamptz!
  update_user: String
  update_user_id: bigint!
}

"""
aggregated selection of "document"
"""
type document_aggregate {
  aggregate: document_aggregate_fields
  nodes: [document!]!
}

"""
aggregate fields of "document"
"""
type document_aggregate_fields {
  avg: document_avg_fields
  count(columns: [document_select_column!], distinct: Boolean): Int!
  max: document_max_fields
  min: document_min_fields
  stddev: document_stddev_fields
  stddev_pop: document_stddev_pop_fields
  stddev_samp: document_stddev_samp_fields
  sum: document_sum_fields
  var_pop: document_var_pop_fields
  var_samp: document_var_samp_fields
  variance: document_variance_fields
}

"""
order by aggregate values of table "document"
"""
input document_aggregate_order_by {
  avg: document_avg_order_by
  count: order_by
  max: document_max_order_by
  min: document_min_order_by
  stddev: document_stddev_order_by
  stddev_pop: document_stddev_pop_order_by
  stddev_samp: document_stddev_samp_order_by
  sum: document_sum_order_by
  var_pop: document_var_pop_order_by
  var_samp: document_var_samp_order_by
  variance: document_variance_order_by
}

"""
input type for inserting array relation for remote table "document"
"""
input document_arr_rel_insert_input {
  data: [document_insert_input!]!

  """on conflict condition"""
  on_conflict: document_on_conflict
}

"""aggregate avg on columns"""
type document_avg_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by avg() on columns of table "document"
"""
input document_avg_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""
Boolean expression to filter rows from the table "document". All fields are combined with a logical 'AND'.
"""
input document_bool_exp {
  _and: [document_bool_exp!]
  _not: document_bool_exp
  _or: [document_bool_exp!]
  content: String_comparison_exp
  file: file_bool_exp
  file_id: bigint_comparison_exp
  id: bigint_comparison_exp
  notes: String_comparison_exp
  update_date: timestamptz_comparison_exp
  update_user: String_comparison_exp
  update_user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "document"
"""
enum document_constraint {
  """unique or primary key constraint"""
  idx_1943000_primary
}

"""
input type for incrementing numeric columns in table "document"
"""
input document_inc_input {
  file_id: bigint
  id: bigint
  update_user_id: bigint
}

"""
input type for inserting data into table "document"
"""
input document_insert_input {
  content: String
  file: file_obj_rel_insert_input
  file_id: bigint
  id: bigint
  notes: String
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""aggregate max on columns"""
type document_max_fields {
  content: String
  file_id: bigint
  id: bigint
  notes: String
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""
order by max() on columns of table "document"
"""
input document_max_order_by {
  content: order_by
  file_id: order_by
  id: order_by
  notes: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""aggregate min on columns"""
type document_min_fields {
  content: String
  file_id: bigint
  id: bigint
  notes: String
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""
order by min() on columns of table "document"
"""
input document_min_order_by {
  content: order_by
  file_id: order_by
  id: order_by
  notes: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""
response of any mutation on the table "document"
"""
type document_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [document!]!
}

"""
on conflict condition type for table "document"
"""
input document_on_conflict {
  constraint: document_constraint!
  update_columns: [document_update_column!]! = []
  where: document_bool_exp
}

"""Ordering options when selecting data from "document"."""
input document_order_by {
  content: order_by
  file: file_order_by
  file_id: order_by
  id: order_by
  notes: order_by
  update_date: order_by
  update_user: order_by
  update_user_id: order_by
}

"""primary key columns input for table: document"""
input document_pk_columns_input {
  id: bigint!
}

"""
select columns of table "document"
"""
enum document_select_column {
  """column name"""
  content

  """column name"""
  file_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  update_date

  """column name"""
  update_user

  """column name"""
  update_user_id
}

"""
input type for updating data in table "document"
"""
input document_set_input {
  content: String
  file_id: bigint
  id: bigint
  notes: String
  update_date: timestamptz
  update_user: String
  update_user_id: bigint
}

"""aggregate stddev on columns"""
type document_stddev_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by stddev() on columns of table "document"
"""
input document_stddev_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""aggregate stddev_pop on columns"""
type document_stddev_pop_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by stddev_pop() on columns of table "document"
"""
input document_stddev_pop_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""aggregate stddev_samp on columns"""
type document_stddev_samp_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by stddev_samp() on columns of table "document"
"""
input document_stddev_samp_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""aggregate sum on columns"""
type document_sum_fields {
  file_id: bigint
  id: bigint
  update_user_id: bigint
}

"""
order by sum() on columns of table "document"
"""
input document_sum_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""
update columns of table "document"
"""
enum document_update_column {
  """column name"""
  content

  """column name"""
  file_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  update_date

  """column name"""
  update_user

  """column name"""
  update_user_id
}

"""aggregate var_pop on columns"""
type document_var_pop_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by var_pop() on columns of table "document"
"""
input document_var_pop_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""aggregate var_samp on columns"""
type document_var_samp_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by var_samp() on columns of table "document"
"""
input document_var_samp_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""aggregate variance on columns"""
type document_variance_fields {
  file_id: Float
  id: Float
  update_user_id: Float
}

"""
order by variance() on columns of table "document"
"""
input document_variance_order_by {
  file_id: order_by
  id: order_by
  update_user_id: order_by
}

"""
columns and relationships of "event"
"""
type event {
  """An object relationship"""
  account: account!
  account_id: bigint!

  """An object relationship"""
  client: client
  client_id: bigint
  description: String
  end_date: timestamp!
  id: bigint!
  modified: timestamptz!
  name: String!
  start_date: timestamp!
}

"""
aggregated selection of "event"
"""
type event_aggregate {
  aggregate: event_aggregate_fields
  nodes: [event!]!
}

"""
aggregate fields of "event"
"""
type event_aggregate_fields {
  avg: event_avg_fields
  count(columns: [event_select_column!], distinct: Boolean): Int!
  max: event_max_fields
  min: event_min_fields
  stddev: event_stddev_fields
  stddev_pop: event_stddev_pop_fields
  stddev_samp: event_stddev_samp_fields
  sum: event_sum_fields
  var_pop: event_var_pop_fields
  var_samp: event_var_samp_fields
  variance: event_variance_fields
}

"""
order by aggregate values of table "event"
"""
input event_aggregate_order_by {
  avg: event_avg_order_by
  count: order_by
  max: event_max_order_by
  min: event_min_order_by
  stddev: event_stddev_order_by
  stddev_pop: event_stddev_pop_order_by
  stddev_samp: event_stddev_samp_order_by
  sum: event_sum_order_by
  var_pop: event_var_pop_order_by
  var_samp: event_var_samp_order_by
  variance: event_variance_order_by
}

"""
input type for inserting array relation for remote table "event"
"""
input event_arr_rel_insert_input {
  data: [event_insert_input!]!

  """on conflict condition"""
  on_conflict: event_on_conflict
}

"""aggregate avg on columns"""
type event_avg_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by avg() on columns of table "event"
"""
input event_avg_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
"""
input event_bool_exp {
  _and: [event_bool_exp!]
  _not: event_bool_exp
  _or: [event_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  description: String_comparison_exp
  end_date: timestamp_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  start_date: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "event"
"""
enum event_constraint {
  """unique or primary key constraint"""
  idx_1943009_primary
}

"""
input type for incrementing numeric columns in table "event"
"""
input event_inc_input {
  account_id: bigint
  client_id: bigint
  id: bigint
}

"""
input type for inserting data into table "event"
"""
input event_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  client: client_obj_rel_insert_input
  client_id: bigint
  description: String
  end_date: timestamp
  id: bigint
  modified: timestamptz
  name: String
  start_date: timestamp
}

"""aggregate max on columns"""
type event_max_fields {
  account_id: bigint
  client_id: bigint
  description: String
  end_date: timestamp
  id: bigint
  modified: timestamptz
  name: String
  start_date: timestamp
}

"""
order by max() on columns of table "event"
"""
input event_max_order_by {
  account_id: order_by
  client_id: order_by
  description: order_by
  end_date: order_by
  id: order_by
  modified: order_by
  name: order_by
  start_date: order_by
}

"""aggregate min on columns"""
type event_min_fields {
  account_id: bigint
  client_id: bigint
  description: String
  end_date: timestamp
  id: bigint
  modified: timestamptz
  name: String
  start_date: timestamp
}

"""
order by min() on columns of table "event"
"""
input event_min_order_by {
  account_id: order_by
  client_id: order_by
  description: order_by
  end_date: order_by
  id: order_by
  modified: order_by
  name: order_by
  start_date: order_by
}

"""
response of any mutation on the table "event"
"""
type event_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [event!]!
}

"""
on conflict condition type for table "event"
"""
input event_on_conflict {
  constraint: event_constraint!
  update_columns: [event_update_column!]! = []
  where: event_bool_exp
}

"""Ordering options when selecting data from "event"."""
input event_order_by {
  account: account_order_by
  account_id: order_by
  client: client_order_by
  client_id: order_by
  description: order_by
  end_date: order_by
  id: order_by
  modified: order_by
  name: order_by
  start_date: order_by
}

"""primary key columns input for table: event"""
input event_pk_columns_input {
  id: bigint!
}

"""
select columns of table "event"
"""
enum event_select_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  description

  """column name"""
  end_date

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  start_date
}

"""
input type for updating data in table "event"
"""
input event_set_input {
  account_id: bigint
  client_id: bigint
  description: String
  end_date: timestamp
  id: bigint
  modified: timestamptz
  name: String
  start_date: timestamp
}

"""aggregate stddev on columns"""
type event_stddev_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by stddev() on columns of table "event"
"""
input event_stddev_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type event_stddev_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "event"
"""
input event_stddev_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type event_stddev_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "event"
"""
input event_stddev_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type event_sum_fields {
  account_id: bigint
  client_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "event"
"""
input event_sum_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""
update columns of table "event"
"""
enum event_update_column {
  """column name"""
  account_id

  """column name"""
  client_id

  """column name"""
  description

  """column name"""
  end_date

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  start_date
}

"""aggregate var_pop on columns"""
type event_var_pop_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "event"
"""
input event_var_pop_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type event_var_samp_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "event"
"""
input event_var_samp_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type event_variance_fields {
  account_id: Float
  client_id: Float
  id: Float
}

"""
order by variance() on columns of table "event"
"""
input event_variance_order_by {
  account_id: order_by
  client_id: order_by
  id: order_by
}

"""
columns and relationships of "file"
"""
type file {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): [file!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): file_aggregate!
  create_user: bigint
  created: timestamptz

  """An object relationship"""
  created_by: users
  description: String
  display_name: String!

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): [document!]!

  """An aggregate relationship"""
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): document_aggregate!
  file_name: String!
  file_size: Int!
  file_type: String!
  id: bigint!

  """An object relationship"""
  parent: file
  parent_id: bigint

  """An object relationship"""
  project: project!
  project_id: bigint!

  """An array relationship"""
  task_file_links(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): [task_file_link!]!

  """An aggregate relationship"""
  task_file_links_aggregate(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): task_file_link_aggregate!
  visibility: String
}

"""
aggregated selection of "file"
"""
type file_aggregate {
  aggregate: file_aggregate_fields
  nodes: [file!]!
}

"""
aggregate fields of "file"
"""
type file_aggregate_fields {
  avg: file_avg_fields
  count(columns: [file_select_column!], distinct: Boolean): Int!
  max: file_max_fields
  min: file_min_fields
  stddev: file_stddev_fields
  stddev_pop: file_stddev_pop_fields
  stddev_samp: file_stddev_samp_fields
  sum: file_sum_fields
  var_pop: file_var_pop_fields
  var_samp: file_var_samp_fields
  variance: file_variance_fields
}

"""
order by aggregate values of table "file"
"""
input file_aggregate_order_by {
  avg: file_avg_order_by
  count: order_by
  max: file_max_order_by
  min: file_min_order_by
  stddev: file_stddev_order_by
  stddev_pop: file_stddev_pop_order_by
  stddev_samp: file_stddev_samp_order_by
  sum: file_sum_order_by
  var_pop: file_var_pop_order_by
  var_samp: file_var_samp_order_by
  variance: file_variance_order_by
}

"""
input type for inserting array relation for remote table "file"
"""
input file_arr_rel_insert_input {
  data: [file_insert_input!]!

  """on conflict condition"""
  on_conflict: file_on_conflict
}

"""aggregate avg on columns"""
type file_avg_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by avg() on columns of table "file"
"""
input file_avg_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "file". All fields are combined with a logical 'AND'.
"""
input file_bool_exp {
  _and: [file_bool_exp!]
  _not: file_bool_exp
  _or: [file_bool_exp!]
  children: file_bool_exp
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  created_by: users_bool_exp
  description: String_comparison_exp
  display_name: String_comparison_exp
  documents: document_bool_exp
  file_name: String_comparison_exp
  file_size: Int_comparison_exp
  file_type: String_comparison_exp
  id: bigint_comparison_exp
  parent: file_bool_exp
  parent_id: bigint_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  task_file_links: task_file_link_bool_exp
  visibility: String_comparison_exp
}

"""
unique or primary key constraints on table "file"
"""
enum file_constraint {
  """unique or primary key constraint"""
  idx_1943019_primary
}

"""
input type for incrementing numeric columns in table "file"
"""
input file_inc_input {
  create_user: bigint
  file_size: Int
  id: bigint
  parent_id: bigint
  project_id: bigint
}

"""
input type for inserting data into table "file"
"""
input file_insert_input {
  children: file_arr_rel_insert_input
  create_user: bigint
  created: timestamptz
  created_by: users_obj_rel_insert_input
  description: String
  display_name: String
  documents: document_arr_rel_insert_input
  file_name: String
  file_size: Int
  file_type: String
  id: bigint
  parent: file_obj_rel_insert_input
  parent_id: bigint
  project: project_obj_rel_insert_input
  project_id: bigint
  task_file_links: task_file_link_arr_rel_insert_input
  visibility: String
}

"""aggregate max on columns"""
type file_max_fields {
  create_user: bigint
  created: timestamptz
  description: String
  display_name: String
  file_name: String
  file_size: Int
  file_type: String
  id: bigint
  parent_id: bigint
  project_id: bigint
  visibility: String
}

"""
order by max() on columns of table "file"
"""
input file_max_order_by {
  create_user: order_by
  created: order_by
  description: order_by
  display_name: order_by
  file_name: order_by
  file_size: order_by
  file_type: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
  visibility: order_by
}

"""aggregate min on columns"""
type file_min_fields {
  create_user: bigint
  created: timestamptz
  description: String
  display_name: String
  file_name: String
  file_size: Int
  file_type: String
  id: bigint
  parent_id: bigint
  project_id: bigint
  visibility: String
}

"""
order by min() on columns of table "file"
"""
input file_min_order_by {
  create_user: order_by
  created: order_by
  description: order_by
  display_name: order_by
  file_name: order_by
  file_size: order_by
  file_type: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
  visibility: order_by
}

"""
response of any mutation on the table "file"
"""
type file_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [file!]!
}

"""
input type for inserting object relation for remote table "file"
"""
input file_obj_rel_insert_input {
  data: file_insert_input!

  """on conflict condition"""
  on_conflict: file_on_conflict
}

"""
on conflict condition type for table "file"
"""
input file_on_conflict {
  constraint: file_constraint!
  update_columns: [file_update_column!]! = []
  where: file_bool_exp
}

"""Ordering options when selecting data from "file"."""
input file_order_by {
  children_aggregate: file_aggregate_order_by
  create_user: order_by
  created: order_by
  created_by: users_order_by
  description: order_by
  display_name: order_by
  documents_aggregate: document_aggregate_order_by
  file_name: order_by
  file_size: order_by
  file_type: order_by
  id: order_by
  parent: file_order_by
  parent_id: order_by
  project: project_order_by
  project_id: order_by
  task_file_links_aggregate: task_file_link_aggregate_order_by
  visibility: order_by
}

"""primary key columns input for table: file"""
input file_pk_columns_input {
  id: bigint!
}

"""
select columns of table "file"
"""
enum file_select_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  description

  """column name"""
  display_name

  """column name"""
  file_name

  """column name"""
  file_size

  """column name"""
  file_type

  """column name"""
  id

  """column name"""
  parent_id

  """column name"""
  project_id

  """column name"""
  visibility
}

"""
input type for updating data in table "file"
"""
input file_set_input {
  create_user: bigint
  created: timestamptz
  description: String
  display_name: String
  file_name: String
  file_size: Int
  file_type: String
  id: bigint
  parent_id: bigint
  project_id: bigint
  visibility: String
}

"""aggregate stddev on columns"""
type file_stddev_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev() on columns of table "file"
"""
input file_stddev_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type file_stddev_pop_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev_pop() on columns of table "file"
"""
input file_stddev_pop_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type file_stddev_samp_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by stddev_samp() on columns of table "file"
"""
input file_stddev_samp_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate sum on columns"""
type file_sum_fields {
  create_user: bigint
  file_size: Int
  id: bigint
  parent_id: bigint
  project_id: bigint
}

"""
order by sum() on columns of table "file"
"""
input file_sum_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""
update columns of table "file"
"""
enum file_update_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  description

  """column name"""
  display_name

  """column name"""
  file_name

  """column name"""
  file_size

  """column name"""
  file_type

  """column name"""
  id

  """column name"""
  parent_id

  """column name"""
  project_id

  """column name"""
  visibility
}

"""aggregate var_pop on columns"""
type file_var_pop_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by var_pop() on columns of table "file"
"""
input file_var_pop_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate var_samp on columns"""
type file_var_samp_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by var_samp() on columns of table "file"
"""
input file_var_samp_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

"""aggregate variance on columns"""
type file_variance_fields {
  create_user: Float
  file_size: Float
  id: Float
  parent_id: Float
  project_id: Float
}

"""
order by variance() on columns of table "file"
"""
input file_variance_order_by {
  create_user: order_by
  file_size: order_by
  id: order_by
  parent_id: order_by
  project_id: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "form"
"""
type form {
  """An object relationship"""
  account: account!
  account_id: bigint!
  contents(
    """JSON select path"""
    path: String
  ): jsonb!
  create_user: bigint!
  created: timestamptz!

  """An object relationship"""
  created_by: users!
  display_logo: Boolean!
  id: bigint!
  modified: timestamptz!
  name: String!
  notify_email: String!
  submit_btn: String
  success_message: String
  update_user: bigint!

  """An object relationship"""
  updated_by: users!
}

"""
aggregated selection of "form"
"""
type form_aggregate {
  aggregate: form_aggregate_fields
  nodes: [form!]!
}

"""
aggregate fields of "form"
"""
type form_aggregate_fields {
  avg: form_avg_fields
  count(columns: [form_select_column!], distinct: Boolean): Int!
  max: form_max_fields
  min: form_min_fields
  stddev: form_stddev_fields
  stddev_pop: form_stddev_pop_fields
  stddev_samp: form_stddev_samp_fields
  sum: form_sum_fields
  var_pop: form_var_pop_fields
  var_samp: form_var_samp_fields
  variance: form_variance_fields
}

"""
order by aggregate values of table "form"
"""
input form_aggregate_order_by {
  avg: form_avg_order_by
  count: order_by
  max: form_max_order_by
  min: form_min_order_by
  stddev: form_stddev_order_by
  stddev_pop: form_stddev_pop_order_by
  stddev_samp: form_stddev_samp_order_by
  sum: form_sum_order_by
  var_pop: form_var_pop_order_by
  var_samp: form_var_samp_order_by
  variance: form_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input form_append_input {
  contents: jsonb
}

"""
input type for inserting array relation for remote table "form"
"""
input form_arr_rel_insert_input {
  data: [form_insert_input!]!

  """on conflict condition"""
  on_conflict: form_on_conflict
}

"""aggregate avg on columns"""
type form_avg_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by avg() on columns of table "form"
"""
input form_avg_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "form". All fields are combined with a logical 'AND'.
"""
input form_bool_exp {
  _and: [form_bool_exp!]
  _not: form_bool_exp
  _or: [form_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  contents: jsonb_comparison_exp
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  created_by: users_bool_exp
  display_logo: Boolean_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  notify_email: String_comparison_exp
  submit_btn: String_comparison_exp
  success_message: String_comparison_exp
  update_user: bigint_comparison_exp
  updated_by: users_bool_exp
}

"""
unique or primary key constraints on table "form"
"""
enum form_constraint {
  """unique or primary key constraint"""
  embed_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input form_delete_at_path_input {
  contents: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input form_delete_elem_input {
  contents: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input form_delete_key_input {
  contents: String
}

"""
input type for incrementing numeric columns in table "form"
"""
input form_inc_input {
  account_id: bigint
  create_user: bigint
  id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "form"
"""
input form_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  contents: jsonb
  create_user: bigint
  created: timestamptz
  created_by: users_obj_rel_insert_input
  display_logo: Boolean
  id: bigint
  modified: timestamptz
  name: String
  notify_email: String
  submit_btn: String
  success_message: String
  update_user: bigint
  updated_by: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type form_max_fields {
  account_id: bigint
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  notify_email: String
  submit_btn: String
  success_message: String
  update_user: bigint
}

"""
order by max() on columns of table "form"
"""
input form_max_order_by {
  account_id: order_by
  create_user: order_by
  created: order_by
  id: order_by
  modified: order_by
  name: order_by
  notify_email: order_by
  submit_btn: order_by
  success_message: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type form_min_fields {
  account_id: bigint
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  notify_email: String
  submit_btn: String
  success_message: String
  update_user: bigint
}

"""
order by min() on columns of table "form"
"""
input form_min_order_by {
  account_id: order_by
  create_user: order_by
  created: order_by
  id: order_by
  modified: order_by
  name: order_by
  notify_email: order_by
  submit_btn: order_by
  success_message: order_by
  update_user: order_by
}

"""
response of any mutation on the table "form"
"""
type form_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [form!]!
}

"""
on conflict condition type for table "form"
"""
input form_on_conflict {
  constraint: form_constraint!
  update_columns: [form_update_column!]! = []
  where: form_bool_exp
}

"""Ordering options when selecting data from "form"."""
input form_order_by {
  account: account_order_by
  account_id: order_by
  contents: order_by
  create_user: order_by
  created: order_by
  created_by: users_order_by
  display_logo: order_by
  id: order_by
  modified: order_by
  name: order_by
  notify_email: order_by
  submit_btn: order_by
  success_message: order_by
  update_user: order_by
  updated_by: users_order_by
}

"""primary key columns input for table: form"""
input form_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input form_prepend_input {
  contents: jsonb
}

"""
select columns of table "form"
"""
enum form_select_column {
  """column name"""
  account_id

  """column name"""
  contents

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  display_logo

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notify_email

  """column name"""
  submit_btn

  """column name"""
  success_message

  """column name"""
  update_user
}

"""
input type for updating data in table "form"
"""
input form_set_input {
  account_id: bigint
  contents: jsonb
  create_user: bigint
  created: timestamptz
  display_logo: Boolean
  id: bigint
  modified: timestamptz
  name: String
  notify_email: String
  submit_btn: String
  success_message: String
  update_user: bigint
}

"""aggregate stddev on columns"""
type form_stddev_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "form"
"""
input form_stddev_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type form_stddev_pop_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "form"
"""
input form_stddev_pop_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type form_stddev_samp_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "form"
"""
input form_stddev_samp_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type form_sum_fields {
  account_id: bigint
  create_user: bigint
  id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "form"
"""
input form_sum_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""
update columns of table "form"
"""
enum form_update_column {
  """column name"""
  account_id

  """column name"""
  contents

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  display_logo

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notify_email

  """column name"""
  submit_btn

  """column name"""
  success_message

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type form_var_pop_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "form"
"""
input form_var_pop_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type form_var_samp_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "form"
"""
input form_var_samp_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type form_variance_fields {
  account_id: Float
  create_user: Float
  id: Float
  update_user: Float
}

"""
order by variance() on columns of table "form"
"""
input form_variance_order_by {
  account_id: order_by
  create_user: order_by
  id: order_by
  update_user: order_by
}

"""
columns and relationships of "integration"
"""
type integration {
  client_id: String!
  domain: String!
  secret: String!

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): token_aggregate!
}

"""
aggregated selection of "integration"
"""
type integration_aggregate {
  aggregate: integration_aggregate_fields
  nodes: [integration!]!
}

"""
aggregate fields of "integration"
"""
type integration_aggregate_fields {
  count(columns: [integration_select_column!], distinct: Boolean): Int!
  max: integration_max_fields
  min: integration_min_fields
}

"""
Boolean expression to filter rows from the table "integration". All fields are combined with a logical 'AND'.
"""
input integration_bool_exp {
  _and: [integration_bool_exp!]
  _not: integration_bool_exp
  _or: [integration_bool_exp!]
  client_id: String_comparison_exp
  domain: String_comparison_exp
  secret: String_comparison_exp
  tokens: token_bool_exp
}

"""
unique or primary key constraints on table "integration"
"""
enum integration_constraint {
  """unique or primary key constraint"""
  integration_pkey
}

"""
input type for inserting data into table "integration"
"""
input integration_insert_input {
  client_id: String
  domain: String
  secret: String
  tokens: token_arr_rel_insert_input
}

"""aggregate max on columns"""
type integration_max_fields {
  client_id: String
  domain: String
  secret: String
}

"""aggregate min on columns"""
type integration_min_fields {
  client_id: String
  domain: String
  secret: String
}

"""
response of any mutation on the table "integration"
"""
type integration_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [integration!]!
}

"""
input type for inserting object relation for remote table "integration"
"""
input integration_obj_rel_insert_input {
  data: integration_insert_input!

  """on conflict condition"""
  on_conflict: integration_on_conflict
}

"""
on conflict condition type for table "integration"
"""
input integration_on_conflict {
  constraint: integration_constraint!
  update_columns: [integration_update_column!]! = []
  where: integration_bool_exp
}

"""Ordering options when selecting data from "integration"."""
input integration_order_by {
  client_id: order_by
  domain: order_by
  secret: order_by
  tokens_aggregate: token_aggregate_order_by
}

"""primary key columns input for table: integration"""
input integration_pk_columns_input {
  client_id: String!
}

"""
select columns of table "integration"
"""
enum integration_select_column {
  """column name"""
  client_id

  """column name"""
  domain

  """column name"""
  secret
}

"""
input type for updating data in table "integration"
"""
input integration_set_input {
  client_id: String
  domain: String
  secret: String
}

"""
update columns of table "integration"
"""
enum integration_update_column {
  """column name"""
  client_id

  """column name"""
  domain

  """column name"""
  secret
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "message"
"""
type message {
  archived: Boolean!
  body: String
  created: timestamptz!
  data(
    """JSON select path"""
    path: String
  ): jsonb
  form_id: bigint!
  id: bigint!
  modified: timestamptz!
  sender: String
  subject: String
  update_user: bigint
}

"""
aggregated selection of "message"
"""
type message_aggregate {
  aggregate: message_aggregate_fields
  nodes: [message!]!
}

"""
aggregate fields of "message"
"""
type message_aggregate_fields {
  avg: message_avg_fields
  count(columns: [message_select_column!], distinct: Boolean): Int!
  max: message_max_fields
  min: message_min_fields
  stddev: message_stddev_fields
  stddev_pop: message_stddev_pop_fields
  stddev_samp: message_stddev_samp_fields
  sum: message_sum_fields
  var_pop: message_var_pop_fields
  var_samp: message_var_samp_fields
  variance: message_variance_fields
}

"""
order by aggregate values of table "message"
"""
input message_aggregate_order_by {
  avg: message_avg_order_by
  count: order_by
  max: message_max_order_by
  min: message_min_order_by
  stddev: message_stddev_order_by
  stddev_pop: message_stddev_pop_order_by
  stddev_samp: message_stddev_samp_order_by
  sum: message_sum_order_by
  var_pop: message_var_pop_order_by
  var_samp: message_var_samp_order_by
  variance: message_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input message_append_input {
  data: jsonb
}

"""
input type for inserting array relation for remote table "message"
"""
input message_arr_rel_insert_input {
  data: [message_insert_input!]!

  """on conflict condition"""
  on_conflict: message_on_conflict
}

"""aggregate avg on columns"""
type message_avg_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by avg() on columns of table "message"
"""
input message_avg_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
"""
input message_bool_exp {
  _and: [message_bool_exp!]
  _not: message_bool_exp
  _or: [message_bool_exp!]
  archived: Boolean_comparison_exp
  body: String_comparison_exp
  created: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  form_id: bigint_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  sender: String_comparison_exp
  subject: String_comparison_exp
  update_user: bigint_comparison_exp
}

"""
unique or primary key constraints on table "message"
"""
enum message_constraint {
  """unique or primary key constraint"""
  message_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input message_delete_at_path_input {
  data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input message_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input message_delete_key_input {
  data: String
}

"""
input type for incrementing numeric columns in table "message"
"""
input message_inc_input {
  form_id: bigint
  id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "message"
"""
input message_insert_input {
  archived: Boolean
  body: String
  created: timestamptz
  data: jsonb
  form_id: bigint
  id: bigint
  modified: timestamptz
  sender: String
  subject: String
  update_user: bigint
}

"""aggregate max on columns"""
type message_max_fields {
  body: String
  created: timestamptz
  form_id: bigint
  id: bigint
  modified: timestamptz
  sender: String
  subject: String
  update_user: bigint
}

"""
order by max() on columns of table "message"
"""
input message_max_order_by {
  body: order_by
  created: order_by
  form_id: order_by
  id: order_by
  modified: order_by
  sender: order_by
  subject: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type message_min_fields {
  body: String
  created: timestamptz
  form_id: bigint
  id: bigint
  modified: timestamptz
  sender: String
  subject: String
  update_user: bigint
}

"""
order by min() on columns of table "message"
"""
input message_min_order_by {
  body: order_by
  created: order_by
  form_id: order_by
  id: order_by
  modified: order_by
  sender: order_by
  subject: order_by
  update_user: order_by
}

"""
response of any mutation on the table "message"
"""
type message_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message!]!
}

"""
on conflict condition type for table "message"
"""
input message_on_conflict {
  constraint: message_constraint!
  update_columns: [message_update_column!]! = []
  where: message_bool_exp
}

"""Ordering options when selecting data from "message"."""
input message_order_by {
  archived: order_by
  body: order_by
  created: order_by
  data: order_by
  form_id: order_by
  id: order_by
  modified: order_by
  sender: order_by
  subject: order_by
  update_user: order_by
}

"""primary key columns input for table: message"""
input message_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input message_prepend_input {
  data: jsonb
}

"""
select columns of table "message"
"""
enum message_select_column {
  """column name"""
  archived

  """column name"""
  body

  """column name"""
  created

  """column name"""
  data

  """column name"""
  form_id

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  sender

  """column name"""
  subject

  """column name"""
  update_user
}

"""
input type for updating data in table "message"
"""
input message_set_input {
  archived: Boolean
  body: String
  created: timestamptz
  data: jsonb
  form_id: bigint
  id: bigint
  modified: timestamptz
  sender: String
  subject: String
  update_user: bigint
}

"""aggregate stddev on columns"""
type message_stddev_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "message"
"""
input message_stddev_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type message_stddev_pop_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "message"
"""
input message_stddev_pop_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type message_stddev_samp_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "message"
"""
input message_stddev_samp_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type message_sum_fields {
  form_id: bigint
  id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "message"
"""
input message_sum_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""
update columns of table "message"
"""
enum message_update_column {
  """column name"""
  archived

  """column name"""
  body

  """column name"""
  created

  """column name"""
  data

  """column name"""
  form_id

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  sender

  """column name"""
  subject

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type message_var_pop_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "message"
"""
input message_var_pop_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type message_var_samp_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "message"
"""
input message_var_samp_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type message_variance_fields {
  form_id: Float
  id: Float
  update_user: Float
}

"""
order by variance() on columns of table "message"
"""
input message_variance_order_by {
  form_id: order_by
  id: order_by
  update_user: order_by
}

"""
columns and relationships of "milestone"
"""
type milestone {
  assigned_user: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  id: bigint!
  modified: timestamptz!
  name: String!

  """An object relationship"""
  project: project!
  project_id: bigint!
  reminder_sent: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""
aggregated selection of "milestone"
"""
type milestone_aggregate {
  aggregate: milestone_aggregate_fields
  nodes: [milestone!]!
}

"""
aggregate fields of "milestone"
"""
type milestone_aggregate_fields {
  avg: milestone_avg_fields
  count(columns: [milestone_select_column!], distinct: Boolean): Int!
  max: milestone_max_fields
  min: milestone_min_fields
  stddev: milestone_stddev_fields
  stddev_pop: milestone_stddev_pop_fields
  stddev_samp: milestone_stddev_samp_fields
  sum: milestone_sum_fields
  var_pop: milestone_var_pop_fields
  var_samp: milestone_var_samp_fields
  variance: milestone_variance_fields
}

"""
order by aggregate values of table "milestone"
"""
input milestone_aggregate_order_by {
  avg: milestone_avg_order_by
  count: order_by
  max: milestone_max_order_by
  min: milestone_min_order_by
  stddev: milestone_stddev_order_by
  stddev_pop: milestone_stddev_pop_order_by
  stddev_samp: milestone_stddev_samp_order_by
  sum: milestone_sum_order_by
  var_pop: milestone_var_pop_order_by
  var_samp: milestone_var_samp_order_by
  variance: milestone_variance_order_by
}

"""
input type for inserting array relation for remote table "milestone"
"""
input milestone_arr_rel_insert_input {
  data: [milestone_insert_input!]!

  """on conflict condition"""
  on_conflict: milestone_on_conflict
}

"""aggregate avg on columns"""
type milestone_avg_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by avg() on columns of table "milestone"
"""
input milestone_avg_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "milestone". All fields are combined with a logical 'AND'.
"""
input milestone_bool_exp {
  _and: [milestone_bool_exp!]
  _not: milestone_bool_exp
  _or: [milestone_bool_exp!]
  assigned_user: bigint_comparison_exp
  completed: timestamptz_comparison_exp
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  reminder_sent: timestamptz_comparison_exp
  status: String_comparison_exp
  target_date: timestamptz_comparison_exp
  update_user: bigint_comparison_exp
}

"""
unique or primary key constraints on table "milestone"
"""
enum milestone_constraint {
  """unique or primary key constraint"""
  idx_1943029_primary
}

"""
input type for incrementing numeric columns in table "milestone"
"""
input milestone_inc_input {
  assigned_user: bigint
  create_user: bigint
  id: bigint
  project_id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "milestone"
"""
input milestone_insert_input {
  assigned_user: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  project: project_obj_rel_insert_input
  project_id: bigint
  reminder_sent: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""aggregate max on columns"""
type milestone_max_fields {
  assigned_user: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  project_id: bigint
  reminder_sent: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""
order by max() on columns of table "milestone"
"""
input milestone_max_order_by {
  assigned_user: order_by
  completed: order_by
  create_user: order_by
  created: order_by
  id: order_by
  modified: order_by
  name: order_by
  project_id: order_by
  reminder_sent: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type milestone_min_fields {
  assigned_user: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  project_id: bigint
  reminder_sent: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""
order by min() on columns of table "milestone"
"""
input milestone_min_order_by {
  assigned_user: order_by
  completed: order_by
  create_user: order_by
  created: order_by
  id: order_by
  modified: order_by
  name: order_by
  project_id: order_by
  reminder_sent: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
}

"""
response of any mutation on the table "milestone"
"""
type milestone_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [milestone!]!
}

"""
input type for inserting object relation for remote table "milestone"
"""
input milestone_obj_rel_insert_input {
  data: milestone_insert_input!

  """on conflict condition"""
  on_conflict: milestone_on_conflict
}

"""
on conflict condition type for table "milestone"
"""
input milestone_on_conflict {
  constraint: milestone_constraint!
  update_columns: [milestone_update_column!]! = []
  where: milestone_bool_exp
}

"""Ordering options when selecting data from "milestone"."""
input milestone_order_by {
  assigned_user: order_by
  completed: order_by
  create_user: order_by
  created: order_by
  id: order_by
  modified: order_by
  name: order_by
  project: project_order_by
  project_id: order_by
  reminder_sent: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
}

"""primary key columns input for table: milestone"""
input milestone_pk_columns_input {
  id: bigint!
}

"""
select columns of table "milestone"
"""
enum milestone_select_column {
  """column name"""
  assigned_user

  """column name"""
  completed

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  project_id

  """column name"""
  reminder_sent

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user
}

"""
input type for updating data in table "milestone"
"""
input milestone_set_input {
  assigned_user: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  id: bigint
  modified: timestamptz
  name: String
  project_id: bigint
  reminder_sent: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""aggregate stddev on columns"""
type milestone_stddev_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "milestone"
"""
input milestone_stddev_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type milestone_stddev_pop_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "milestone"
"""
input milestone_stddev_pop_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type milestone_stddev_samp_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "milestone"
"""
input milestone_stddev_samp_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type milestone_sum_fields {
  assigned_user: bigint
  create_user: bigint
  id: bigint
  project_id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "milestone"
"""
input milestone_sum_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""
update columns of table "milestone"
"""
enum milestone_update_column {
  """column name"""
  assigned_user

  """column name"""
  completed

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  project_id

  """column name"""
  reminder_sent

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type milestone_var_pop_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "milestone"
"""
input milestone_var_pop_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type milestone_var_samp_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "milestone"
"""
input milestone_var_samp_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type milestone_variance_fields {
  assigned_user: Float
  create_user: Float
  id: Float
  project_id: Float
  update_user: Float
}

"""
order by variance() on columns of table "milestone"
"""
input milestone_variance_order_by {
  assigned_user: order_by
  create_user: order_by
  id: order_by
  project_id: order_by
  update_user: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: bigint!): account

  """
  delete data from the table: "account_user"
  """
  delete_account_user(
    """filter the rows which have to be deleted"""
    where: account_user_bool_exp!
  ): account_user_mutation_response

  """
  delete single row from the table: "account_user"
  """
  delete_account_user_by_pk(id: bigint!): account_user

  """
  delete data from the table: "availability"
  """
  delete_availability(
    """filter the rows which have to be deleted"""
    where: availability_bool_exp!
  ): availability_mutation_response

  """
  delete single row from the table: "availability"
  """
  delete_availability_by_pk(id: bigint!): availability

  """
  delete data from the table: "billing_info"
  """
  delete_billing_info(
    """filter the rows which have to be deleted"""
    where: billing_info_bool_exp!
  ): billing_info_mutation_response

  """
  delete single row from the table: "billing_info"
  """
  delete_billing_info_by_pk(id: bigint!): billing_info

  """
  delete data from the table: "client"
  """
  delete_client(
    """filter the rows which have to be deleted"""
    where: client_bool_exp!
  ): client_mutation_response

  """
  delete single row from the table: "client"
  """
  delete_client_by_pk(id: bigint!): client

  """
  delete data from the table: "comment"
  """
  delete_comment(
    """filter the rows which have to be deleted"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  delete single row from the table: "comment"
  """
  delete_comment_by_pk(id: bigint!): comment

  """
  delete data from the table: "database"
  """
  delete_database(
    """filter the rows which have to be deleted"""
    where: database_bool_exp!
  ): database_mutation_response

  """
  delete single row from the table: "database"
  """
  delete_database_by_pk(id: bigint!): database

  """
  delete data from the table: "db_field"
  """
  delete_db_field(
    """filter the rows which have to be deleted"""
    where: db_field_bool_exp!
  ): db_field_mutation_response

  """
  delete single row from the table: "db_field"
  """
  delete_db_field_by_pk(id: bigint!): db_field

  """
  delete data from the table: "db_filter"
  """
  delete_db_filter(
    """filter the rows which have to be deleted"""
    where: db_filter_bool_exp!
  ): db_filter_mutation_response

  """
  delete single row from the table: "db_filter"
  """
  delete_db_filter_by_pk(id: bigint!): db_filter

  """
  delete data from the table: "db_note"
  """
  delete_db_note(
    """filter the rows which have to be deleted"""
    where: db_note_bool_exp!
  ): db_note_mutation_response

  """
  delete single row from the table: "db_note"
  """
  delete_db_note_by_pk(id: bigint!): db_note

  """
  delete data from the table: "db_record"
  """
  delete_db_record(
    """filter the rows which have to be deleted"""
    where: db_record_bool_exp!
  ): db_record_mutation_response

  """
  delete single row from the table: "db_record"
  """
  delete_db_record_by_pk(id: bigint!): db_record

  """
  delete data from the table: "document"
  """
  delete_document(
    """filter the rows which have to be deleted"""
    where: document_bool_exp!
  ): document_mutation_response

  """
  delete single row from the table: "document"
  """
  delete_document_by_pk(id: bigint!): document

  """
  delete data from the table: "event"
  """
  delete_event(
    """filter the rows which have to be deleted"""
    where: event_bool_exp!
  ): event_mutation_response

  """
  delete single row from the table: "event"
  """
  delete_event_by_pk(id: bigint!): event

  """
  delete data from the table: "file"
  """
  delete_file(
    """filter the rows which have to be deleted"""
    where: file_bool_exp!
  ): file_mutation_response

  """
  delete single row from the table: "file"
  """
  delete_file_by_pk(id: bigint!): file

  """
  delete data from the table: "form"
  """
  delete_form(
    """filter the rows which have to be deleted"""
    where: form_bool_exp!
  ): form_mutation_response

  """
  delete single row from the table: "form"
  """
  delete_form_by_pk(id: bigint!): form

  """
  delete data from the table: "integration"
  """
  delete_integration(
    """filter the rows which have to be deleted"""
    where: integration_bool_exp!
  ): integration_mutation_response

  """
  delete single row from the table: "integration"
  """
  delete_integration_by_pk(client_id: String!): integration

  """
  delete data from the table: "message"
  """
  delete_message(
    """filter the rows which have to be deleted"""
    where: message_bool_exp!
  ): message_mutation_response

  """
  delete single row from the table: "message"
  """
  delete_message_by_pk(id: bigint!): message

  """
  delete data from the table: "milestone"
  """
  delete_milestone(
    """filter the rows which have to be deleted"""
    where: milestone_bool_exp!
  ): milestone_mutation_response

  """
  delete single row from the table: "milestone"
  """
  delete_milestone_by_pk(id: bigint!): milestone

  """
  delete data from the table: "permissions"
  """
  delete_permissions(
    """filter the rows which have to be deleted"""
    where: permissions_bool_exp!
  ): permissions_mutation_response

  """
  delete single row from the table: "permissions"
  """
  delete_permissions_by_pk(project_id: bigint!): permissions

  """
  delete data from the table: "project"
  """
  delete_project(
    """filter the rows which have to be deleted"""
    where: project_bool_exp!
  ): project_mutation_response

  """
  delete single row from the table: "project"
  """
  delete_project_by_pk(id: bigint!): project

  """
  delete data from the table: "project_category"
  """
  delete_project_category(
    """filter the rows which have to be deleted"""
    where: project_category_bool_exp!
  ): project_category_mutation_response

  """
  delete single row from the table: "project_category"
  """
  delete_project_category_by_pk(id: bigint!): project_category

  """
  delete data from the table: "sessions"
  """
  delete_sessions(
    """filter the rows which have to be deleted"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  delete single row from the table: "sessions"
  """
  delete_sessions_by_pk(session_id: String!): sessions

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(id: bigint!): settings

  """
  delete data from the table: "task"
  """
  delete_task(
    """filter the rows which have to be deleted"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  delete single row from the table: "task"
  """
  delete_task_by_pk(id: bigint!): task

  """
  delete data from the table: "task_category"
  """
  delete_task_category(
    """filter the rows which have to be deleted"""
    where: task_category_bool_exp!
  ): task_category_mutation_response

  """
  delete single row from the table: "task_category"
  """
  delete_task_category_by_pk(id: bigint!): task_category

  """
  delete data from the table: "task_comment"
  """
  delete_task_comment(
    """filter the rows which have to be deleted"""
    where: task_comment_bool_exp!
  ): task_comment_mutation_response

  """
  delete single row from the table: "task_comment"
  """
  delete_task_comment_by_pk(id: bigint!): task_comment

  """
  delete data from the table: "task_file_link"
  """
  delete_task_file_link(
    """filter the rows which have to be deleted"""
    where: task_file_link_bool_exp!
  ): task_file_link_mutation_response

  """
  delete single row from the table: "task_file_link"
  """
  delete_task_file_link_by_pk(id: bigint!): task_file_link

  """
  delete data from the table: "task_timer"
  """
  delete_task_timer(
    """filter the rows which have to be deleted"""
    where: task_timer_bool_exp!
  ): task_timer_mutation_response

  """
  delete single row from the table: "task_timer"
  """
  delete_task_timer_by_pk(id: bigint!): task_timer

  """
  delete data from the table: "task_user"
  """
  delete_task_user(
    """filter the rows which have to be deleted"""
    where: task_user_bool_exp!
  ): task_user_mutation_response

  """
  delete single row from the table: "task_user"
  """
  delete_task_user_by_pk(id: bigint!): task_user

  """
  delete data from the table: "time_entry"
  """
  delete_time_entry(
    """filter the rows which have to be deleted"""
    where: time_entry_bool_exp!
  ): time_entry_mutation_response

  """
  delete single row from the table: "time_entry"
  """
  delete_time_entry_by_pk(id: bigint!): time_entry

  """
  delete data from the table: "time_entry_location"
  """
  delete_time_entry_location(
    """filter the rows which have to be deleted"""
    where: time_entry_location_bool_exp!
  ): time_entry_location_mutation_response

  """
  delete single row from the table: "time_entry_location"
  """
  delete_time_entry_location_by_pk(id: bigint!): time_entry_location

  """
  delete data from the table: "token"
  """
  delete_token(
    """filter the rows which have to be deleted"""
    where: token_bool_exp!
  ): token_mutation_response

  """
  delete single row from the table: "token"
  """
  delete_token_by_pk(id: bigint!): token

  """
  delete data from the table: "user_temp"
  """
  delete_user_temp(
    """filter the rows which have to be deleted"""
    where: user_temp_bool_exp!
  ): user_temp_mutation_response

  """
  delete single row from the table: "user_temp"
  """
  delete_user_temp_by_pk(id: bigint!): user_temp

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: bigint!): users

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """on conflict condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """on conflict condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "account_user"
  """
  insert_account_user(
    """the rows to be inserted"""
    objects: [account_user_insert_input!]!

    """on conflict condition"""
    on_conflict: account_user_on_conflict
  ): account_user_mutation_response

  """
  insert a single row into the table: "account_user"
  """
  insert_account_user_one(
    """the row to be inserted"""
    object: account_user_insert_input!

    """on conflict condition"""
    on_conflict: account_user_on_conflict
  ): account_user

  """
  insert data into the table: "availability"
  """
  insert_availability(
    """the rows to be inserted"""
    objects: [availability_insert_input!]!

    """on conflict condition"""
    on_conflict: availability_on_conflict
  ): availability_mutation_response

  """
  insert a single row into the table: "availability"
  """
  insert_availability_one(
    """the row to be inserted"""
    object: availability_insert_input!

    """on conflict condition"""
    on_conflict: availability_on_conflict
  ): availability

  """
  insert data into the table: "billing_info"
  """
  insert_billing_info(
    """the rows to be inserted"""
    objects: [billing_info_insert_input!]!

    """on conflict condition"""
    on_conflict: billing_info_on_conflict
  ): billing_info_mutation_response

  """
  insert a single row into the table: "billing_info"
  """
  insert_billing_info_one(
    """the row to be inserted"""
    object: billing_info_insert_input!

    """on conflict condition"""
    on_conflict: billing_info_on_conflict
  ): billing_info

  """
  insert data into the table: "client"
  """
  insert_client(
    """the rows to be inserted"""
    objects: [client_insert_input!]!

    """on conflict condition"""
    on_conflict: client_on_conflict
  ): client_mutation_response

  """
  insert a single row into the table: "client"
  """
  insert_client_one(
    """the row to be inserted"""
    object: client_insert_input!

    """on conflict condition"""
    on_conflict: client_on_conflict
  ): client

  """
  insert data into the table: "comment"
  """
  insert_comment(
    """the rows to be inserted"""
    objects: [comment_insert_input!]!

    """on conflict condition"""
    on_conflict: comment_on_conflict
  ): comment_mutation_response

  """
  insert a single row into the table: "comment"
  """
  insert_comment_one(
    """the row to be inserted"""
    object: comment_insert_input!

    """on conflict condition"""
    on_conflict: comment_on_conflict
  ): comment

  """
  insert data into the table: "database"
  """
  insert_database(
    """the rows to be inserted"""
    objects: [database_insert_input!]!

    """on conflict condition"""
    on_conflict: database_on_conflict
  ): database_mutation_response

  """
  insert a single row into the table: "database"
  """
  insert_database_one(
    """the row to be inserted"""
    object: database_insert_input!

    """on conflict condition"""
    on_conflict: database_on_conflict
  ): database

  """
  insert data into the table: "db_field"
  """
  insert_db_field(
    """the rows to be inserted"""
    objects: [db_field_insert_input!]!

    """on conflict condition"""
    on_conflict: db_field_on_conflict
  ): db_field_mutation_response

  """
  insert a single row into the table: "db_field"
  """
  insert_db_field_one(
    """the row to be inserted"""
    object: db_field_insert_input!

    """on conflict condition"""
    on_conflict: db_field_on_conflict
  ): db_field

  """
  insert data into the table: "db_filter"
  """
  insert_db_filter(
    """the rows to be inserted"""
    objects: [db_filter_insert_input!]!

    """on conflict condition"""
    on_conflict: db_filter_on_conflict
  ): db_filter_mutation_response

  """
  insert a single row into the table: "db_filter"
  """
  insert_db_filter_one(
    """the row to be inserted"""
    object: db_filter_insert_input!

    """on conflict condition"""
    on_conflict: db_filter_on_conflict
  ): db_filter

  """
  insert data into the table: "db_note"
  """
  insert_db_note(
    """the rows to be inserted"""
    objects: [db_note_insert_input!]!

    """on conflict condition"""
    on_conflict: db_note_on_conflict
  ): db_note_mutation_response

  """
  insert a single row into the table: "db_note"
  """
  insert_db_note_one(
    """the row to be inserted"""
    object: db_note_insert_input!

    """on conflict condition"""
    on_conflict: db_note_on_conflict
  ): db_note

  """
  insert data into the table: "db_record"
  """
  insert_db_record(
    """the rows to be inserted"""
    objects: [db_record_insert_input!]!

    """on conflict condition"""
    on_conflict: db_record_on_conflict
  ): db_record_mutation_response

  """
  insert a single row into the table: "db_record"
  """
  insert_db_record_one(
    """the row to be inserted"""
    object: db_record_insert_input!

    """on conflict condition"""
    on_conflict: db_record_on_conflict
  ): db_record

  """
  insert data into the table: "document"
  """
  insert_document(
    """the rows to be inserted"""
    objects: [document_insert_input!]!

    """on conflict condition"""
    on_conflict: document_on_conflict
  ): document_mutation_response

  """
  insert a single row into the table: "document"
  """
  insert_document_one(
    """the row to be inserted"""
    object: document_insert_input!

    """on conflict condition"""
    on_conflict: document_on_conflict
  ): document

  """
  insert data into the table: "event"
  """
  insert_event(
    """the rows to be inserted"""
    objects: [event_insert_input!]!

    """on conflict condition"""
    on_conflict: event_on_conflict
  ): event_mutation_response

  """
  insert a single row into the table: "event"
  """
  insert_event_one(
    """the row to be inserted"""
    object: event_insert_input!

    """on conflict condition"""
    on_conflict: event_on_conflict
  ): event

  """
  insert data into the table: "file"
  """
  insert_file(
    """the rows to be inserted"""
    objects: [file_insert_input!]!

    """on conflict condition"""
    on_conflict: file_on_conflict
  ): file_mutation_response

  """
  insert a single row into the table: "file"
  """
  insert_file_one(
    """the row to be inserted"""
    object: file_insert_input!

    """on conflict condition"""
    on_conflict: file_on_conflict
  ): file

  """
  insert data into the table: "form"
  """
  insert_form(
    """the rows to be inserted"""
    objects: [form_insert_input!]!

    """on conflict condition"""
    on_conflict: form_on_conflict
  ): form_mutation_response

  """
  insert a single row into the table: "form"
  """
  insert_form_one(
    """the row to be inserted"""
    object: form_insert_input!

    """on conflict condition"""
    on_conflict: form_on_conflict
  ): form

  """
  insert data into the table: "integration"
  """
  insert_integration(
    """the rows to be inserted"""
    objects: [integration_insert_input!]!

    """on conflict condition"""
    on_conflict: integration_on_conflict
  ): integration_mutation_response

  """
  insert a single row into the table: "integration"
  """
  insert_integration_one(
    """the row to be inserted"""
    object: integration_insert_input!

    """on conflict condition"""
    on_conflict: integration_on_conflict
  ): integration

  """
  insert data into the table: "message"
  """
  insert_message(
    """the rows to be inserted"""
    objects: [message_insert_input!]!

    """on conflict condition"""
    on_conflict: message_on_conflict
  ): message_mutation_response

  """
  insert a single row into the table: "message"
  """
  insert_message_one(
    """the row to be inserted"""
    object: message_insert_input!

    """on conflict condition"""
    on_conflict: message_on_conflict
  ): message

  """
  insert data into the table: "milestone"
  """
  insert_milestone(
    """the rows to be inserted"""
    objects: [milestone_insert_input!]!

    """on conflict condition"""
    on_conflict: milestone_on_conflict
  ): milestone_mutation_response

  """
  insert a single row into the table: "milestone"
  """
  insert_milestone_one(
    """the row to be inserted"""
    object: milestone_insert_input!

    """on conflict condition"""
    on_conflict: milestone_on_conflict
  ): milestone

  """
  insert data into the table: "permissions"
  """
  insert_permissions(
    """the rows to be inserted"""
    objects: [permissions_insert_input!]!

    """on conflict condition"""
    on_conflict: permissions_on_conflict
  ): permissions_mutation_response

  """
  insert a single row into the table: "permissions"
  """
  insert_permissions_one(
    """the row to be inserted"""
    object: permissions_insert_input!

    """on conflict condition"""
    on_conflict: permissions_on_conflict
  ): permissions

  """
  insert data into the table: "project"
  """
  insert_project(
    """the rows to be inserted"""
    objects: [project_insert_input!]!

    """on conflict condition"""
    on_conflict: project_on_conflict
  ): project_mutation_response

  """
  insert data into the table: "project_category"
  """
  insert_project_category(
    """the rows to be inserted"""
    objects: [project_category_insert_input!]!

    """on conflict condition"""
    on_conflict: project_category_on_conflict
  ): project_category_mutation_response

  """
  insert a single row into the table: "project_category"
  """
  insert_project_category_one(
    """the row to be inserted"""
    object: project_category_insert_input!

    """on conflict condition"""
    on_conflict: project_category_on_conflict
  ): project_category

  """
  insert a single row into the table: "project"
  """
  insert_project_one(
    """the row to be inserted"""
    object: project_insert_input!

    """on conflict condition"""
    on_conflict: project_on_conflict
  ): project

  """
  insert data into the table: "sessions"
  """
  insert_sessions(
    """the rows to be inserted"""
    objects: [sessions_insert_input!]!

    """on conflict condition"""
    on_conflict: sessions_on_conflict
  ): sessions_mutation_response

  """
  insert a single row into the table: "sessions"
  """
  insert_sessions_one(
    """the row to be inserted"""
    object: sessions_insert_input!

    """on conflict condition"""
    on_conflict: sessions_on_conflict
  ): sessions

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "task"
  """
  insert_task(
    """the rows to be inserted"""
    objects: [task_insert_input!]!

    """on conflict condition"""
    on_conflict: task_on_conflict
  ): task_mutation_response

  """
  insert data into the table: "task_category"
  """
  insert_task_category(
    """the rows to be inserted"""
    objects: [task_category_insert_input!]!

    """on conflict condition"""
    on_conflict: task_category_on_conflict
  ): task_category_mutation_response

  """
  insert a single row into the table: "task_category"
  """
  insert_task_category_one(
    """the row to be inserted"""
    object: task_category_insert_input!

    """on conflict condition"""
    on_conflict: task_category_on_conflict
  ): task_category

  """
  insert data into the table: "task_comment"
  """
  insert_task_comment(
    """the rows to be inserted"""
    objects: [task_comment_insert_input!]!

    """on conflict condition"""
    on_conflict: task_comment_on_conflict
  ): task_comment_mutation_response

  """
  insert a single row into the table: "task_comment"
  """
  insert_task_comment_one(
    """the row to be inserted"""
    object: task_comment_insert_input!

    """on conflict condition"""
    on_conflict: task_comment_on_conflict
  ): task_comment

  """
  insert data into the table: "task_file_link"
  """
  insert_task_file_link(
    """the rows to be inserted"""
    objects: [task_file_link_insert_input!]!

    """on conflict condition"""
    on_conflict: task_file_link_on_conflict
  ): task_file_link_mutation_response

  """
  insert a single row into the table: "task_file_link"
  """
  insert_task_file_link_one(
    """the row to be inserted"""
    object: task_file_link_insert_input!

    """on conflict condition"""
    on_conflict: task_file_link_on_conflict
  ): task_file_link

  """
  insert a single row into the table: "task"
  """
  insert_task_one(
    """the row to be inserted"""
    object: task_insert_input!

    """on conflict condition"""
    on_conflict: task_on_conflict
  ): task

  """
  insert data into the table: "task_timer"
  """
  insert_task_timer(
    """the rows to be inserted"""
    objects: [task_timer_insert_input!]!

    """on conflict condition"""
    on_conflict: task_timer_on_conflict
  ): task_timer_mutation_response

  """
  insert a single row into the table: "task_timer"
  """
  insert_task_timer_one(
    """the row to be inserted"""
    object: task_timer_insert_input!

    """on conflict condition"""
    on_conflict: task_timer_on_conflict
  ): task_timer

  """
  insert data into the table: "task_user"
  """
  insert_task_user(
    """the rows to be inserted"""
    objects: [task_user_insert_input!]!

    """on conflict condition"""
    on_conflict: task_user_on_conflict
  ): task_user_mutation_response

  """
  insert a single row into the table: "task_user"
  """
  insert_task_user_one(
    """the row to be inserted"""
    object: task_user_insert_input!

    """on conflict condition"""
    on_conflict: task_user_on_conflict
  ): task_user

  """
  insert data into the table: "time_entry"
  """
  insert_time_entry(
    """the rows to be inserted"""
    objects: [time_entry_insert_input!]!

    """on conflict condition"""
    on_conflict: time_entry_on_conflict
  ): time_entry_mutation_response

  """
  insert data into the table: "time_entry_location"
  """
  insert_time_entry_location(
    """the rows to be inserted"""
    objects: [time_entry_location_insert_input!]!

    """on conflict condition"""
    on_conflict: time_entry_location_on_conflict
  ): time_entry_location_mutation_response

  """
  insert a single row into the table: "time_entry_location"
  """
  insert_time_entry_location_one(
    """the row to be inserted"""
    object: time_entry_location_insert_input!

    """on conflict condition"""
    on_conflict: time_entry_location_on_conflict
  ): time_entry_location

  """
  insert a single row into the table: "time_entry"
  """
  insert_time_entry_one(
    """the row to be inserted"""
    object: time_entry_insert_input!

    """on conflict condition"""
    on_conflict: time_entry_on_conflict
  ): time_entry

  """
  insert data into the table: "token"
  """
  insert_token(
    """the rows to be inserted"""
    objects: [token_insert_input!]!

    """on conflict condition"""
    on_conflict: token_on_conflict
  ): token_mutation_response

  """
  insert a single row into the table: "token"
  """
  insert_token_one(
    """the row to be inserted"""
    object: token_insert_input!

    """on conflict condition"""
    on_conflict: token_on_conflict
  ): token

  """
  insert data into the table: "user_temp"
  """
  insert_user_temp(
    """the rows to be inserted"""
    objects: [user_temp_insert_input!]!

    """on conflict condition"""
    on_conflict: user_temp_on_conflict
  ): user_temp_mutation_response

  """
  insert a single row into the table: "user_temp"
  """
  insert_user_temp_one(
    """the row to be inserted"""
    object: user_temp_insert_input!

    """on conflict condition"""
    on_conflict: user_temp_on_conflict
  ): user_temp

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "account"
  """
  update_account(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update data of the table: "account_user"
  """
  update_account_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_user_set_input

    """filter the rows which have to be updated"""
    where: account_user_bool_exp!
  ): account_user_mutation_response

  """
  update single row of the table: "account_user"
  """
  update_account_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_user_set_input
    pk_columns: account_user_pk_columns_input!
  ): account_user

  """
  update data of the table: "availability"
  """
  update_availability(
    """increments the numeric columns with given value of the filtered values"""
    _inc: availability_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: availability_set_input

    """filter the rows which have to be updated"""
    where: availability_bool_exp!
  ): availability_mutation_response

  """
  update single row of the table: "availability"
  """
  update_availability_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: availability_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: availability_set_input
    pk_columns: availability_pk_columns_input!
  ): availability

  """
  update data of the table: "billing_info"
  """
  update_billing_info(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billing_info_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billing_info_set_input

    """filter the rows which have to be updated"""
    where: billing_info_bool_exp!
  ): billing_info_mutation_response

  """
  update single row of the table: "billing_info"
  """
  update_billing_info_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billing_info_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billing_info_set_input
    pk_columns: billing_info_pk_columns_input!
  ): billing_info

  """
  update data of the table: "client"
  """
  update_client(
    """increments the numeric columns with given value of the filtered values"""
    _inc: client_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: client_set_input

    """filter the rows which have to be updated"""
    where: client_bool_exp!
  ): client_mutation_response

  """
  update single row of the table: "client"
  """
  update_client_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: client_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: client_set_input
    pk_columns: client_pk_columns_input!
  ): client

  """
  update data of the table: "comment"
  """
  update_comment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input

    """filter the rows which have to be updated"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  update single row of the table: "comment"
  """
  update_comment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input
    pk_columns: comment_pk_columns_input!
  ): comment

  """
  update data of the table: "database"
  """
  update_database(
    """increments the numeric columns with given value of the filtered values"""
    _inc: database_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: database_set_input

    """filter the rows which have to be updated"""
    where: database_bool_exp!
  ): database_mutation_response

  """
  update single row of the table: "database"
  """
  update_database_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: database_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: database_set_input
    pk_columns: database_pk_columns_input!
  ): database

  """
  update data of the table: "db_field"
  """
  update_db_field(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_field_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_field_set_input

    """filter the rows which have to be updated"""
    where: db_field_bool_exp!
  ): db_field_mutation_response

  """
  update single row of the table: "db_field"
  """
  update_db_field_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_field_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_field_set_input
    pk_columns: db_field_pk_columns_input!
  ): db_field

  """
  update data of the table: "db_filter"
  """
  update_db_filter(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_filter_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_filter_set_input

    """filter the rows which have to be updated"""
    where: db_filter_bool_exp!
  ): db_filter_mutation_response

  """
  update single row of the table: "db_filter"
  """
  update_db_filter_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_filter_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_filter_set_input
    pk_columns: db_filter_pk_columns_input!
  ): db_filter

  """
  update data of the table: "db_note"
  """
  update_db_note(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_note_set_input

    """filter the rows which have to be updated"""
    where: db_note_bool_exp!
  ): db_note_mutation_response

  """
  update single row of the table: "db_note"
  """
  update_db_note_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_note_set_input
    pk_columns: db_note_pk_columns_input!
  ): db_note

  """
  update data of the table: "db_record"
  """
  update_db_record(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_record_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_record_set_input

    """filter the rows which have to be updated"""
    where: db_record_bool_exp!
  ): db_record_mutation_response

  """
  update single row of the table: "db_record"
  """
  update_db_record_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: db_record_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: db_record_set_input
    pk_columns: db_record_pk_columns_input!
  ): db_record

  """
  update data of the table: "document"
  """
  update_document(
    """increments the numeric columns with given value of the filtered values"""
    _inc: document_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_set_input

    """filter the rows which have to be updated"""
    where: document_bool_exp!
  ): document_mutation_response

  """
  update single row of the table: "document"
  """
  update_document_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: document_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_set_input
    pk_columns: document_pk_columns_input!
  ): document

  """
  update data of the table: "event"
  """
  update_event(
    """increments the numeric columns with given value of the filtered values"""
    _inc: event_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_set_input

    """filter the rows which have to be updated"""
    where: event_bool_exp!
  ): event_mutation_response

  """
  update single row of the table: "event"
  """
  update_event_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: event_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_set_input
    pk_columns: event_pk_columns_input!
  ): event

  """
  update data of the table: "file"
  """
  update_file(
    """increments the numeric columns with given value of the filtered values"""
    _inc: file_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: file_set_input

    """filter the rows which have to be updated"""
    where: file_bool_exp!
  ): file_mutation_response

  """
  update single row of the table: "file"
  """
  update_file_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: file_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: file_set_input
    pk_columns: file_pk_columns_input!
  ): file

  """
  update data of the table: "form"
  """
  update_form(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: form_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: form_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: form_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: form_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: form_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: form_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: form_set_input

    """filter the rows which have to be updated"""
    where: form_bool_exp!
  ): form_mutation_response

  """
  update single row of the table: "form"
  """
  update_form_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: form_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: form_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: form_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: form_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: form_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: form_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: form_set_input
    pk_columns: form_pk_columns_input!
  ): form

  """
  update data of the table: "integration"
  """
  update_integration(
    """sets the columns of the filtered rows to the given values"""
    _set: integration_set_input

    """filter the rows which have to be updated"""
    where: integration_bool_exp!
  ): integration_mutation_response

  """
  update single row of the table: "integration"
  """
  update_integration_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: integration_set_input
    pk_columns: integration_pk_columns_input!
  ): integration

  """
  update data of the table: "message"
  """
  update_message(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: message_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: message_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: message_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: message_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: message_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: message_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: message_set_input

    """filter the rows which have to be updated"""
    where: message_bool_exp!
  ): message_mutation_response

  """
  update single row of the table: "message"
  """
  update_message_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: message_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: message_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: message_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: message_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: message_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: message_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: message_set_input
    pk_columns: message_pk_columns_input!
  ): message

  """
  update data of the table: "milestone"
  """
  update_milestone(
    """increments the numeric columns with given value of the filtered values"""
    _inc: milestone_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: milestone_set_input

    """filter the rows which have to be updated"""
    where: milestone_bool_exp!
  ): milestone_mutation_response

  """
  update single row of the table: "milestone"
  """
  update_milestone_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: milestone_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: milestone_set_input
    pk_columns: milestone_pk_columns_input!
  ): milestone

  """
  update data of the table: "permissions"
  """
  update_permissions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: permissions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: permissions_set_input

    """filter the rows which have to be updated"""
    where: permissions_bool_exp!
  ): permissions_mutation_response

  """
  update single row of the table: "permissions"
  """
  update_permissions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: permissions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: permissions_set_input
    pk_columns: permissions_pk_columns_input!
  ): permissions

  """
  update data of the table: "project"
  """
  update_project(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_set_input

    """filter the rows which have to be updated"""
    where: project_bool_exp!
  ): project_mutation_response

  """
  update single row of the table: "project"
  """
  update_project_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_set_input
    pk_columns: project_pk_columns_input!
  ): project

  """
  update data of the table: "project_category"
  """
  update_project_category(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_category_set_input

    """filter the rows which have to be updated"""
    where: project_category_bool_exp!
  ): project_category_mutation_response

  """
  update single row of the table: "project_category"
  """
  update_project_category_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_category_set_input
    pk_columns: project_category_pk_columns_input!
  ): project_category

  """
  update data of the table: "sessions"
  """
  update_sessions(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: sessions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: sessions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: sessions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: sessions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: sessions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: sessions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input

    """filter the rows which have to be updated"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  update single row of the table: "sessions"
  """
  update_sessions_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: sessions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: sessions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: sessions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: sessions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: sessions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: sessions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input
    pk_columns: sessions_pk_columns_input!
  ): sessions

  """
  update data of the table: "settings"
  """
  update_settings(
    """increments the numeric columns with given value of the filtered values"""
    _inc: settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update data of the table: "task"
  """
  update_task(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input

    """filter the rows which have to be updated"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  update single row of the table: "task"
  """
  update_task_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input
    pk_columns: task_pk_columns_input!
  ): task

  """
  update data of the table: "task_category"
  """
  update_task_category(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_category_set_input

    """filter the rows which have to be updated"""
    where: task_category_bool_exp!
  ): task_category_mutation_response

  """
  update single row of the table: "task_category"
  """
  update_task_category_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_category_set_input
    pk_columns: task_category_pk_columns_input!
  ): task_category

  """
  update data of the table: "task_comment"
  """
  update_task_comment(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: task_comment_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: task_comment_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: task_comment_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: task_comment_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: task_comment_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: task_comment_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_comment_set_input

    """filter the rows which have to be updated"""
    where: task_comment_bool_exp!
  ): task_comment_mutation_response

  """
  update single row of the table: "task_comment"
  """
  update_task_comment_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: task_comment_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: task_comment_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: task_comment_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: task_comment_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: task_comment_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: task_comment_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_comment_set_input
    pk_columns: task_comment_pk_columns_input!
  ): task_comment

  """
  update data of the table: "task_file_link"
  """
  update_task_file_link(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_file_link_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_file_link_set_input

    """filter the rows which have to be updated"""
    where: task_file_link_bool_exp!
  ): task_file_link_mutation_response

  """
  update single row of the table: "task_file_link"
  """
  update_task_file_link_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_file_link_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_file_link_set_input
    pk_columns: task_file_link_pk_columns_input!
  ): task_file_link

  """
  update data of the table: "task_timer"
  """
  update_task_timer(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_timer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_timer_set_input

    """filter the rows which have to be updated"""
    where: task_timer_bool_exp!
  ): task_timer_mutation_response

  """
  update single row of the table: "task_timer"
  """
  update_task_timer_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_timer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_timer_set_input
    pk_columns: task_timer_pk_columns_input!
  ): task_timer

  """
  update data of the table: "task_user"
  """
  update_task_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_user_set_input

    """filter the rows which have to be updated"""
    where: task_user_bool_exp!
  ): task_user_mutation_response

  """
  update single row of the table: "task_user"
  """
  update_task_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: task_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_user_set_input
    pk_columns: task_user_pk_columns_input!
  ): task_user

  """
  update data of the table: "time_entry"
  """
  update_time_entry(
    """increments the numeric columns with given value of the filtered values"""
    _inc: time_entry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: time_entry_set_input

    """filter the rows which have to be updated"""
    where: time_entry_bool_exp!
  ): time_entry_mutation_response

  """
  update single row of the table: "time_entry"
  """
  update_time_entry_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: time_entry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: time_entry_set_input
    pk_columns: time_entry_pk_columns_input!
  ): time_entry

  """
  update data of the table: "time_entry_location"
  """
  update_time_entry_location(
    """increments the numeric columns with given value of the filtered values"""
    _inc: time_entry_location_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: time_entry_location_set_input

    """filter the rows which have to be updated"""
    where: time_entry_location_bool_exp!
  ): time_entry_location_mutation_response

  """
  update single row of the table: "time_entry_location"
  """
  update_time_entry_location_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: time_entry_location_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: time_entry_location_set_input
    pk_columns: time_entry_location_pk_columns_input!
  ): time_entry_location

  """
  update data of the table: "token"
  """
  update_token(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: token_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: token_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: token_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: token_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: token_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: token_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_set_input

    """filter the rows which have to be updated"""
    where: token_bool_exp!
  ): token_mutation_response

  """
  update single row of the table: "token"
  """
  update_token_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: token_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: token_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: token_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: token_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: token_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: token_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_set_input
    pk_columns: token_pk_columns_input!
  ): token

  """
  update data of the table: "user_temp"
  """
  update_user_temp(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_temp_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_temp_set_input

    """filter the rows which have to be updated"""
    where: user_temp_bool_exp!
  ): user_temp_mutation_response

  """
  update single row of the table: "user_temp"
  """
  update_user_temp_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_temp_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_temp_set_input
    pk_columns: user_temp_pk_columns_input!
  ): user_temp

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "permissions"
"""
type permissions {
  permissions: _int8

  """An object relationship"""
  project: project!
  project_id: bigint!
}

"""
aggregated selection of "permissions"
"""
type permissions_aggregate {
  aggregate: permissions_aggregate_fields
  nodes: [permissions!]!
}

"""
aggregate fields of "permissions"
"""
type permissions_aggregate_fields {
  avg: permissions_avg_fields
  count(columns: [permissions_select_column!], distinct: Boolean): Int!
  max: permissions_max_fields
  min: permissions_min_fields
  stddev: permissions_stddev_fields
  stddev_pop: permissions_stddev_pop_fields
  stddev_samp: permissions_stddev_samp_fields
  sum: permissions_sum_fields
  var_pop: permissions_var_pop_fields
  var_samp: permissions_var_samp_fields
  variance: permissions_variance_fields
}

"""aggregate avg on columns"""
type permissions_avg_fields {
  project_id: Float
}

"""
Boolean expression to filter rows from the table "permissions". All fields are combined with a logical 'AND'.
"""
input permissions_bool_exp {
  _and: [permissions_bool_exp!]
  _not: permissions_bool_exp
  _or: [permissions_bool_exp!]
  permissions: _int8_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "permissions"
"""
enum permissions_constraint {
  """unique or primary key constraint"""
  idx_1943037_primary
}

"""
input type for incrementing numeric columns in table "permissions"
"""
input permissions_inc_input {
  project_id: bigint
}

"""
input type for inserting data into table "permissions"
"""
input permissions_insert_input {
  permissions: _int8
  project: project_obj_rel_insert_input
  project_id: bigint
}

"""aggregate max on columns"""
type permissions_max_fields {
  project_id: bigint
}

"""aggregate min on columns"""
type permissions_min_fields {
  project_id: bigint
}

"""
response of any mutation on the table "permissions"
"""
type permissions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [permissions!]!
}

"""
input type for inserting object relation for remote table "permissions"
"""
input permissions_obj_rel_insert_input {
  data: permissions_insert_input!

  """on conflict condition"""
  on_conflict: permissions_on_conflict
}

"""
on conflict condition type for table "permissions"
"""
input permissions_on_conflict {
  constraint: permissions_constraint!
  update_columns: [permissions_update_column!]! = []
  where: permissions_bool_exp
}

"""Ordering options when selecting data from "permissions"."""
input permissions_order_by {
  permissions: order_by
  project: project_order_by
  project_id: order_by
}

"""primary key columns input for table: permissions"""
input permissions_pk_columns_input {
  project_id: bigint!
}

"""
select columns of table "permissions"
"""
enum permissions_select_column {
  """column name"""
  permissions

  """column name"""
  project_id
}

"""
input type for updating data in table "permissions"
"""
input permissions_set_input {
  permissions: _int8
  project_id: bigint
}

"""aggregate stddev on columns"""
type permissions_stddev_fields {
  project_id: Float
}

"""aggregate stddev_pop on columns"""
type permissions_stddev_pop_fields {
  project_id: Float
}

"""aggregate stddev_samp on columns"""
type permissions_stddev_samp_fields {
  project_id: Float
}

"""aggregate sum on columns"""
type permissions_sum_fields {
  project_id: bigint
}

"""
update columns of table "permissions"
"""
enum permissions_update_column {
  """column name"""
  permissions

  """column name"""
  project_id
}

"""aggregate var_pop on columns"""
type permissions_var_pop_fields {
  project_id: Float
}

"""aggregate var_samp on columns"""
type permissions_var_samp_fields {
  project_id: Float
}

"""aggregate variance on columns"""
type permissions_variance_fields {
  project_id: Float
}

"""
columns and relationships of "project"
"""
type project {
  """An array relationship"""
  allowed_clients(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): [user_client_access!]!

  """An aggregate relationship"""
  allowed_clients_aggregate(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): user_client_access_aggregate!

  """An array relationship"""
  allowed_users(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): [project_allowed_users!]!

  """An aggregate relationship"""
  allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): project_allowed_users_aggregate!
  assigned_user: bigint
  budget: float8
  category: String

  """An object relationship"""
  client: client!
  client_id: bigint!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!
  create_user: bigint
  created: timestamptz

  """An object relationship"""
  created_by: users
  estimated_hours: bigint

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): [file!]!

  """An aggregate relationship"""
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): file_aggregate!
  hourly_rate: float8
  id: bigint!
  lowercase_name: String

  """An array relationship"""
  milestones(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): [milestone!]!

  """An aggregate relationship"""
  milestones_aggregate(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): milestone_aggregate!
  modified: timestamptz!
  name: String!
  notes: String
  options: String

  """An object relationship"""
  pcat: project_category

  """An object relationship"""
  permissions: permissions
  reminder_sent: timestamptz

  """An object relationship"""
  responsible: users
  start_date: timestamptz
  status: String
  target_date: timestamptz

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """An array relationship"""
  time_entries(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): [time_entry!]!

  """An aggregate relationship"""
  time_entries_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): time_entry_aggregate!

  """An object relationship"""
  time_entry_cutoff: project_time_cutoff
  update_user: bigint

  """An object relationship"""
  updated_by: users
}

"""
aggregated selection of "project"
"""
type project_aggregate {
  aggregate: project_aggregate_fields
  nodes: [project!]!
}

"""
aggregate fields of "project"
"""
type project_aggregate_fields {
  avg: project_avg_fields
  count(columns: [project_select_column!], distinct: Boolean): Int!
  max: project_max_fields
  min: project_min_fields
  stddev: project_stddev_fields
  stddev_pop: project_stddev_pop_fields
  stddev_samp: project_stddev_samp_fields
  sum: project_sum_fields
  var_pop: project_var_pop_fields
  var_samp: project_var_samp_fields
  variance: project_variance_fields
}

"""
order by aggregate values of table "project"
"""
input project_aggregate_order_by {
  avg: project_avg_order_by
  count: order_by
  max: project_max_order_by
  min: project_min_order_by
  stddev: project_stddev_order_by
  stddev_pop: project_stddev_pop_order_by
  stddev_samp: project_stddev_samp_order_by
  sum: project_sum_order_by
  var_pop: project_var_pop_order_by
  var_samp: project_var_samp_order_by
  variance: project_variance_order_by
}

"""
columns and relationships of "project_allowed_users"
"""
type project_allowed_users {
  project_id: bigint
  role: String
  user_id: bigint
}

"""
aggregated selection of "project_allowed_users"
"""
type project_allowed_users_aggregate {
  aggregate: project_allowed_users_aggregate_fields
  nodes: [project_allowed_users!]!
}

"""
aggregate fields of "project_allowed_users"
"""
type project_allowed_users_aggregate_fields {
  avg: project_allowed_users_avg_fields
  count(columns: [project_allowed_users_select_column!], distinct: Boolean): Int!
  max: project_allowed_users_max_fields
  min: project_allowed_users_min_fields
  stddev: project_allowed_users_stddev_fields
  stddev_pop: project_allowed_users_stddev_pop_fields
  stddev_samp: project_allowed_users_stddev_samp_fields
  sum: project_allowed_users_sum_fields
  var_pop: project_allowed_users_var_pop_fields
  var_samp: project_allowed_users_var_samp_fields
  variance: project_allowed_users_variance_fields
}

"""
order by aggregate values of table "project_allowed_users"
"""
input project_allowed_users_aggregate_order_by {
  avg: project_allowed_users_avg_order_by
  count: order_by
  max: project_allowed_users_max_order_by
  min: project_allowed_users_min_order_by
  stddev: project_allowed_users_stddev_order_by
  stddev_pop: project_allowed_users_stddev_pop_order_by
  stddev_samp: project_allowed_users_stddev_samp_order_by
  sum: project_allowed_users_sum_order_by
  var_pop: project_allowed_users_var_pop_order_by
  var_samp: project_allowed_users_var_samp_order_by
  variance: project_allowed_users_variance_order_by
}

"""
input type for inserting array relation for remote table "project_allowed_users"
"""
input project_allowed_users_arr_rel_insert_input {
  data: [project_allowed_users_insert_input!]!
}

"""aggregate avg on columns"""
type project_allowed_users_avg_fields {
  project_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "project_allowed_users"
"""
input project_allowed_users_avg_order_by {
  project_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "project_allowed_users". All fields are combined with a logical 'AND'.
"""
input project_allowed_users_bool_exp {
  _and: [project_allowed_users_bool_exp!]
  _not: project_allowed_users_bool_exp
  _or: [project_allowed_users_bool_exp!]
  project_id: bigint_comparison_exp
  role: String_comparison_exp
  user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "project_allowed_users"
"""
input project_allowed_users_insert_input {
  project_id: bigint
  role: String
  user_id: bigint
}

"""aggregate max on columns"""
type project_allowed_users_max_fields {
  project_id: bigint
  role: String
  user_id: bigint
}

"""
order by max() on columns of table "project_allowed_users"
"""
input project_allowed_users_max_order_by {
  project_id: order_by
  role: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type project_allowed_users_min_fields {
  project_id: bigint
  role: String
  user_id: bigint
}

"""
order by min() on columns of table "project_allowed_users"
"""
input project_allowed_users_min_order_by {
  project_id: order_by
  role: order_by
  user_id: order_by
}

"""Ordering options when selecting data from "project_allowed_users"."""
input project_allowed_users_order_by {
  project_id: order_by
  role: order_by
  user_id: order_by
}

"""
select columns of table "project_allowed_users"
"""
enum project_allowed_users_select_column {
  """column name"""
  project_id

  """column name"""
  role

  """column name"""
  user_id
}

"""aggregate stddev on columns"""
type project_allowed_users_stddev_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "project_allowed_users"
"""
input project_allowed_users_stddev_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type project_allowed_users_stddev_pop_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "project_allowed_users"
"""
input project_allowed_users_stddev_pop_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type project_allowed_users_stddev_samp_fields {
  project_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "project_allowed_users"
"""
input project_allowed_users_stddev_samp_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type project_allowed_users_sum_fields {
  project_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "project_allowed_users"
"""
input project_allowed_users_sum_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type project_allowed_users_var_pop_fields {
  project_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "project_allowed_users"
"""
input project_allowed_users_var_pop_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type project_allowed_users_var_samp_fields {
  project_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "project_allowed_users"
"""
input project_allowed_users_var_samp_order_by {
  project_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type project_allowed_users_variance_fields {
  project_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "project_allowed_users"
"""
input project_allowed_users_variance_order_by {
  project_id: order_by
  user_id: order_by
}

"""
input type for inserting array relation for remote table "project"
"""
input project_arr_rel_insert_input {
  data: [project_insert_input!]!

  """on conflict condition"""
  on_conflict: project_on_conflict
}

"""aggregate avg on columns"""
type project_avg_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by avg() on columns of table "project"
"""
input project_avg_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'.
"""
input project_bool_exp {
  _and: [project_bool_exp!]
  _not: project_bool_exp
  _or: [project_bool_exp!]
  allowed_clients: user_client_access_bool_exp
  allowed_users: project_allowed_users_bool_exp
  assigned_user: bigint_comparison_exp
  budget: float8_comparison_exp
  category: String_comparison_exp
  client: client_bool_exp
  client_id: bigint_comparison_exp
  comments: comment_bool_exp
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  created_by: users_bool_exp
  estimated_hours: bigint_comparison_exp
  files: file_bool_exp
  hourly_rate: float8_comparison_exp
  id: bigint_comparison_exp
  lowercase_name: String_comparison_exp
  milestones: milestone_bool_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  notes: String_comparison_exp
  options: String_comparison_exp
  pcat: project_category_bool_exp
  permissions: permissions_bool_exp
  reminder_sent: timestamptz_comparison_exp
  responsible: users_bool_exp
  start_date: timestamptz_comparison_exp
  status: String_comparison_exp
  target_date: timestamptz_comparison_exp
  tasks: task_bool_exp
  time_entries: time_entry_bool_exp
  time_entry_cutoff: project_time_cutoff_bool_exp
  update_user: bigint_comparison_exp
  updated_by: users_bool_exp
}

"""
columns and relationships of "project_category"
"""
type project_category {
  """An object relationship"""
  account: account!
  account_id: bigint!
  id: bigint!
  name: String!
}

"""
aggregated selection of "project_category"
"""
type project_category_aggregate {
  aggregate: project_category_aggregate_fields
  nodes: [project_category!]!
}

"""
aggregate fields of "project_category"
"""
type project_category_aggregate_fields {
  avg: project_category_avg_fields
  count(columns: [project_category_select_column!], distinct: Boolean): Int!
  max: project_category_max_fields
  min: project_category_min_fields
  stddev: project_category_stddev_fields
  stddev_pop: project_category_stddev_pop_fields
  stddev_samp: project_category_stddev_samp_fields
  sum: project_category_sum_fields
  var_pop: project_category_var_pop_fields
  var_samp: project_category_var_samp_fields
  variance: project_category_variance_fields
}

"""
order by aggregate values of table "project_category"
"""
input project_category_aggregate_order_by {
  avg: project_category_avg_order_by
  count: order_by
  max: project_category_max_order_by
  min: project_category_min_order_by
  stddev: project_category_stddev_order_by
  stddev_pop: project_category_stddev_pop_order_by
  stddev_samp: project_category_stddev_samp_order_by
  sum: project_category_sum_order_by
  var_pop: project_category_var_pop_order_by
  var_samp: project_category_var_samp_order_by
  variance: project_category_variance_order_by
}

"""
input type for inserting array relation for remote table "project_category"
"""
input project_category_arr_rel_insert_input {
  data: [project_category_insert_input!]!

  """on conflict condition"""
  on_conflict: project_category_on_conflict
}

"""aggregate avg on columns"""
type project_category_avg_fields {
  account_id: Float
  id: Float
}

"""
order by avg() on columns of table "project_category"
"""
input project_category_avg_order_by {
  account_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "project_category". All fields are combined with a logical 'AND'.
"""
input project_category_bool_exp {
  _and: [project_category_bool_exp!]
  _not: project_category_bool_exp
  _or: [project_category_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "project_category"
"""
enum project_category_constraint {
  """unique or primary key constraint"""
  idx_1943057_primary
}

"""
input type for incrementing numeric columns in table "project_category"
"""
input project_category_inc_input {
  account_id: bigint
  id: bigint
}

"""
input type for inserting data into table "project_category"
"""
input project_category_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  id: bigint
  name: String
}

"""aggregate max on columns"""
type project_category_max_fields {
  account_id: bigint
  id: bigint
  name: String
}

"""
order by max() on columns of table "project_category"
"""
input project_category_max_order_by {
  account_id: order_by
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type project_category_min_fields {
  account_id: bigint
  id: bigint
  name: String
}

"""
order by min() on columns of table "project_category"
"""
input project_category_min_order_by {
  account_id: order_by
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "project_category"
"""
type project_category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_category!]!
}

"""
input type for inserting object relation for remote table "project_category"
"""
input project_category_obj_rel_insert_input {
  data: project_category_insert_input!

  """on conflict condition"""
  on_conflict: project_category_on_conflict
}

"""
on conflict condition type for table "project_category"
"""
input project_category_on_conflict {
  constraint: project_category_constraint!
  update_columns: [project_category_update_column!]! = []
  where: project_category_bool_exp
}

"""Ordering options when selecting data from "project_category"."""
input project_category_order_by {
  account: account_order_by
  account_id: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: project_category"""
input project_category_pk_columns_input {
  id: bigint!
}

"""
select columns of table "project_category"
"""
enum project_category_select_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "project_category"
"""
input project_category_set_input {
  account_id: bigint
  id: bigint
  name: String
}

"""aggregate stddev on columns"""
type project_category_stddev_fields {
  account_id: Float
  id: Float
}

"""
order by stddev() on columns of table "project_category"
"""
input project_category_stddev_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type project_category_stddev_pop_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "project_category"
"""
input project_category_stddev_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type project_category_stddev_samp_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "project_category"
"""
input project_category_stddev_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type project_category_sum_fields {
  account_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "project_category"
"""
input project_category_sum_order_by {
  account_id: order_by
  id: order_by
}

"""
update columns of table "project_category"
"""
enum project_category_update_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type project_category_var_pop_fields {
  account_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "project_category"
"""
input project_category_var_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type project_category_var_samp_fields {
  account_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "project_category"
"""
input project_category_var_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type project_category_variance_fields {
  account_id: Float
  id: Float
}

"""
order by variance() on columns of table "project_category"
"""
input project_category_variance_order_by {
  account_id: order_by
  id: order_by
}

"""
unique or primary key constraints on table "project"
"""
enum project_constraint {
  """unique or primary key constraint"""
  idx_1943045_primary
}

"""
input type for incrementing numeric columns in table "project"
"""
input project_inc_input {
  assigned_user: bigint
  budget: float8
  client_id: bigint
  create_user: bigint
  estimated_hours: bigint
  hourly_rate: float8
  id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "project"
"""
input project_insert_input {
  allowed_clients: user_client_access_arr_rel_insert_input
  allowed_users: project_allowed_users_arr_rel_insert_input
  assigned_user: bigint
  budget: float8
  category: String
  client: client_obj_rel_insert_input
  client_id: bigint
  comments: comment_arr_rel_insert_input
  create_user: bigint
  created: timestamptz
  created_by: users_obj_rel_insert_input
  estimated_hours: bigint
  files: file_arr_rel_insert_input
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  milestones: milestone_arr_rel_insert_input
  modified: timestamptz
  name: String
  notes: String
  options: String
  pcat: project_category_obj_rel_insert_input
  permissions: permissions_obj_rel_insert_input
  reminder_sent: timestamptz
  responsible: users_obj_rel_insert_input
  start_date: timestamptz
  status: String
  target_date: timestamptz
  tasks: task_arr_rel_insert_input
  time_entries: time_entry_arr_rel_insert_input
  time_entry_cutoff: project_time_cutoff_obj_rel_insert_input
  update_user: bigint
  updated_by: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type project_max_fields {
  assigned_user: bigint
  budget: float8
  category: String
  client_id: bigint
  create_user: bigint
  created: timestamptz
  estimated_hours: bigint
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  options: String
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""
order by max() on columns of table "project"
"""
input project_max_order_by {
  assigned_user: order_by
  budget: order_by
  category: order_by
  client_id: order_by
  create_user: order_by
  created: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  modified: order_by
  name: order_by
  notes: order_by
  options: order_by
  reminder_sent: order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
}

"""aggregate min on columns"""
type project_min_fields {
  assigned_user: bigint
  budget: float8
  category: String
  client_id: bigint
  create_user: bigint
  created: timestamptz
  estimated_hours: bigint
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  options: String
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""
order by min() on columns of table "project"
"""
input project_min_order_by {
  assigned_user: order_by
  budget: order_by
  category: order_by
  client_id: order_by
  create_user: order_by
  created: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  modified: order_by
  name: order_by
  notes: order_by
  options: order_by
  reminder_sent: order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
}

"""
response of any mutation on the table "project"
"""
type project_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project!]!
}

"""
input type for inserting object relation for remote table "project"
"""
input project_obj_rel_insert_input {
  data: project_insert_input!

  """on conflict condition"""
  on_conflict: project_on_conflict
}

"""
on conflict condition type for table "project"
"""
input project_on_conflict {
  constraint: project_constraint!
  update_columns: [project_update_column!]! = []
  where: project_bool_exp
}

"""Ordering options when selecting data from "project"."""
input project_order_by {
  allowed_clients_aggregate: user_client_access_aggregate_order_by
  allowed_users_aggregate: project_allowed_users_aggregate_order_by
  assigned_user: order_by
  budget: order_by
  category: order_by
  client: client_order_by
  client_id: order_by
  comments_aggregate: comment_aggregate_order_by
  create_user: order_by
  created: order_by
  created_by: users_order_by
  estimated_hours: order_by
  files_aggregate: file_aggregate_order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  milestones_aggregate: milestone_aggregate_order_by
  modified: order_by
  name: order_by
  notes: order_by
  options: order_by
  pcat: project_category_order_by
  permissions: permissions_order_by
  reminder_sent: order_by
  responsible: users_order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  tasks_aggregate: task_aggregate_order_by
  time_entries_aggregate: time_entry_aggregate_order_by
  time_entry_cutoff: project_time_cutoff_order_by
  update_user: order_by
  updated_by: users_order_by
}

"""primary key columns input for table: project"""
input project_pk_columns_input {
  id: bigint!
}

"""
select columns of table "project"
"""
enum project_select_column {
  """column name"""
  assigned_user

  """column name"""
  budget

  """column name"""
  category

  """column name"""
  client_id

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  estimated_hours

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  options

  """column name"""
  reminder_sent

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user
}

"""
input type for updating data in table "project"
"""
input project_set_input {
  assigned_user: bigint
  budget: float8
  category: String
  client_id: bigint
  create_user: bigint
  created: timestamptz
  estimated_hours: bigint
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  modified: timestamptz
  name: String
  notes: String
  options: String
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
}

"""aggregate stddev on columns"""
type project_stddev_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "project"
"""
input project_stddev_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type project_stddev_pop_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "project"
"""
input project_stddev_pop_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type project_stddev_samp_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "project"
"""
input project_stddev_samp_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type project_sum_fields {
  assigned_user: bigint
  budget: float8
  client_id: bigint
  create_user: bigint
  estimated_hours: bigint
  hourly_rate: float8
  id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "project"
"""
input project_sum_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""
columns and relationships of "project_time_cutoff"
"""
type project_time_cutoff {
  cutoff_date: date
  project_id: bigint
}

"""
aggregated selection of "project_time_cutoff"
"""
type project_time_cutoff_aggregate {
  aggregate: project_time_cutoff_aggregate_fields
  nodes: [project_time_cutoff!]!
}

"""
aggregate fields of "project_time_cutoff"
"""
type project_time_cutoff_aggregate_fields {
  avg: project_time_cutoff_avg_fields
  count(columns: [project_time_cutoff_select_column!], distinct: Boolean): Int!
  max: project_time_cutoff_max_fields
  min: project_time_cutoff_min_fields
  stddev: project_time_cutoff_stddev_fields
  stddev_pop: project_time_cutoff_stddev_pop_fields
  stddev_samp: project_time_cutoff_stddev_samp_fields
  sum: project_time_cutoff_sum_fields
  var_pop: project_time_cutoff_var_pop_fields
  var_samp: project_time_cutoff_var_samp_fields
  variance: project_time_cutoff_variance_fields
}

"""aggregate avg on columns"""
type project_time_cutoff_avg_fields {
  project_id: Float
}

"""
Boolean expression to filter rows from the table "project_time_cutoff". All fields are combined with a logical 'AND'.
"""
input project_time_cutoff_bool_exp {
  _and: [project_time_cutoff_bool_exp!]
  _not: project_time_cutoff_bool_exp
  _or: [project_time_cutoff_bool_exp!]
  cutoff_date: date_comparison_exp
  project_id: bigint_comparison_exp
}

"""
input type for inserting data into table "project_time_cutoff"
"""
input project_time_cutoff_insert_input {
  cutoff_date: date
  project_id: bigint
}

"""aggregate max on columns"""
type project_time_cutoff_max_fields {
  cutoff_date: date
  project_id: bigint
}

"""aggregate min on columns"""
type project_time_cutoff_min_fields {
  cutoff_date: date
  project_id: bigint
}

"""
input type for inserting object relation for remote table "project_time_cutoff"
"""
input project_time_cutoff_obj_rel_insert_input {
  data: project_time_cutoff_insert_input!
}

"""Ordering options when selecting data from "project_time_cutoff"."""
input project_time_cutoff_order_by {
  cutoff_date: order_by
  project_id: order_by
}

"""
select columns of table "project_time_cutoff"
"""
enum project_time_cutoff_select_column {
  """column name"""
  cutoff_date

  """column name"""
  project_id
}

"""aggregate stddev on columns"""
type project_time_cutoff_stddev_fields {
  project_id: Float
}

"""aggregate stddev_pop on columns"""
type project_time_cutoff_stddev_pop_fields {
  project_id: Float
}

"""aggregate stddev_samp on columns"""
type project_time_cutoff_stddev_samp_fields {
  project_id: Float
}

"""aggregate sum on columns"""
type project_time_cutoff_sum_fields {
  project_id: bigint
}

"""aggregate var_pop on columns"""
type project_time_cutoff_var_pop_fields {
  project_id: Float
}

"""aggregate var_samp on columns"""
type project_time_cutoff_var_samp_fields {
  project_id: Float
}

"""aggregate variance on columns"""
type project_time_cutoff_variance_fields {
  project_id: Float
}

"""
update columns of table "project"
"""
enum project_update_column {
  """column name"""
  assigned_user

  """column name"""
  budget

  """column name"""
  category

  """column name"""
  client_id

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  estimated_hours

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  options

  """column name"""
  reminder_sent

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user
}

"""aggregate var_pop on columns"""
type project_var_pop_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "project"
"""
input project_var_pop_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type project_var_samp_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "project"
"""
input project_var_samp_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type project_variance_fields {
  assigned_user: Float
  budget: Float
  client_id: Float
  create_user: Float
  estimated_hours: Float
  hourly_rate: Float
  id: Float
  update_user: Float
}

"""
order by variance() on columns of table "project"
"""
input project_variance_order_by {
  assigned_user: order_by
  budget: order_by
  client_id: order_by
  create_user: order_by
  estimated_hours: order_by
  hourly_rate: order_by
  id: order_by
  update_user: order_by
}

type query_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: bigint!): account

  """
  fetch data from the table: "account_settings"
  """
  account_settings(
    """distinct select on columns"""
    distinct_on: [account_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_settings_order_by!]

    """filter the rows returned"""
    where: account_settings_bool_exp
  ): [account_settings!]!

  """
  fetch aggregated fields from the table: "account_settings"
  """
  account_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [account_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_settings_order_by!]

    """filter the rows returned"""
    where: account_settings_bool_exp
  ): account_settings_aggregate!

  """
  fetch data from the table: "account_user"
  """
  account_user(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): [account_user!]!

  """
  fetch aggregated fields from the table: "account_user"
  """
  account_user_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): account_user_aggregate!

  """fetch data from the table: "account_user" using primary key columns"""
  account_user_by_pk(id: bigint!): account_user

  """An array relationship"""
  account_user_role(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): [account_user_role!]!

  """An aggregate relationship"""
  account_user_role_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): account_user_role_aggregate!

  """
  fetch data from the table: "availability"
  """
  availability(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): [availability!]!

  """
  fetch aggregated fields from the table: "availability"
  """
  availability_aggregate(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): availability_aggregate!

  """fetch data from the table: "availability" using primary key columns"""
  availability_by_pk(id: bigint!): availability

  """
  fetch data from the table: "billing_info"
  """
  billing_info(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): [billing_info!]!

  """
  fetch aggregated fields from the table: "billing_info"
  """
  billing_info_aggregate(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): billing_info_aggregate!

  """fetch data from the table: "billing_info" using primary key columns"""
  billing_info_by_pk(id: bigint!): billing_info

  """
  fetch data from the table: "client"
  """
  client(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): [client!]!

  """
  fetch aggregated fields from the table: "client"
  """
  client_aggregate(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): client_aggregate!

  """fetch data from the table: "client" using primary key columns"""
  client_by_pk(id: bigint!): client

  """
  fetch data from the table: "client_time_recorded"
  """
  client_time_recorded(
    """distinct select on columns"""
    distinct_on: [client_time_recorded_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_time_recorded_order_by!]

    """filter the rows returned"""
    where: client_time_recorded_bool_exp
  ): [client_time_recorded!]!

  """
  fetch aggregated fields from the table: "client_time_recorded"
  """
  client_time_recorded_aggregate(
    """distinct select on columns"""
    distinct_on: [client_time_recorded_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_time_recorded_order_by!]

    """filter the rows returned"""
    where: client_time_recorded_bool_exp
  ): client_time_recorded_aggregate!

  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: bigint!): comment

  """
  fetch data from the table: "daily_time_entry"
  """
  daily_time_entry(
    """distinct select on columns"""
    distinct_on: [daily_time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daily_time_entry_order_by!]

    """filter the rows returned"""
    where: daily_time_entry_bool_exp
  ): [daily_time_entry!]!

  """
  fetch aggregated fields from the table: "daily_time_entry"
  """
  daily_time_entry_aggregate(
    """distinct select on columns"""
    distinct_on: [daily_time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daily_time_entry_order_by!]

    """filter the rows returned"""
    where: daily_time_entry_bool_exp
  ): daily_time_entry_aggregate!

  """
  fetch data from the table: "database"
  """
  database(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): [database!]!

  """
  fetch aggregated fields from the table: "database"
  """
  database_aggregate(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): database_aggregate!

  """fetch data from the table: "database" using primary key columns"""
  database_by_pk(id: bigint!): database

  """
  fetch data from the table: "db_field"
  """
  db_field(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): [db_field!]!

  """
  fetch aggregated fields from the table: "db_field"
  """
  db_field_aggregate(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): db_field_aggregate!

  """fetch data from the table: "db_field" using primary key columns"""
  db_field_by_pk(id: bigint!): db_field

  """
  fetch data from the table: "db_filter"
  """
  db_filter(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): [db_filter!]!

  """
  fetch aggregated fields from the table: "db_filter"
  """
  db_filter_aggregate(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): db_filter_aggregate!

  """fetch data from the table: "db_filter" using primary key columns"""
  db_filter_by_pk(id: bigint!): db_filter

  """
  fetch data from the table: "db_note"
  """
  db_note(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): [db_note!]!

  """
  fetch aggregated fields from the table: "db_note"
  """
  db_note_aggregate(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): db_note_aggregate!

  """fetch data from the table: "db_note" using primary key columns"""
  db_note_by_pk(id: bigint!): db_note

  """
  fetch data from the table: "db_record"
  """
  db_record(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): [db_record!]!

  """
  fetch aggregated fields from the table: "db_record"
  """
  db_record_aggregate(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): db_record_aggregate!

  """fetch data from the table: "db_record" using primary key columns"""
  db_record_by_pk(id: bigint!): db_record

  """
  fetch data from the table: "document"
  """
  document(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): [document!]!

  """
  fetch aggregated fields from the table: "document"
  """
  document_aggregate(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): document_aggregate!

  """fetch data from the table: "document" using primary key columns"""
  document_by_pk(id: bigint!): document

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  event_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!

  """fetch data from the table: "event" using primary key columns"""
  event_by_pk(id: bigint!): event

  """
  fetch data from the table: "file"
  """
  file(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): [file!]!

  """
  fetch aggregated fields from the table: "file"
  """
  file_aggregate(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): file_aggregate!

  """fetch data from the table: "file" using primary key columns"""
  file_by_pk(id: bigint!): file

  """
  fetch data from the table: "form"
  """
  form(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): [form!]!

  """
  fetch aggregated fields from the table: "form"
  """
  form_aggregate(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): form_aggregate!

  """fetch data from the table: "form" using primary key columns"""
  form_by_pk(id: bigint!): form

  """
  fetch data from the table: "integration"
  """
  integration(
    """distinct select on columns"""
    distinct_on: [integration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [integration_order_by!]

    """filter the rows returned"""
    where: integration_bool_exp
  ): [integration!]!

  """
  fetch aggregated fields from the table: "integration"
  """
  integration_aggregate(
    """distinct select on columns"""
    distinct_on: [integration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [integration_order_by!]

    """filter the rows returned"""
    where: integration_bool_exp
  ): integration_aggregate!

  """fetch data from the table: "integration" using primary key columns"""
  integration_by_pk(client_id: String!): integration

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  message_aggregate(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): message_aggregate!

  """fetch data from the table: "message" using primary key columns"""
  message_by_pk(id: bigint!): message

  """
  fetch data from the table: "milestone"
  """
  milestone(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): [milestone!]!

  """
  fetch aggregated fields from the table: "milestone"
  """
  milestone_aggregate(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): milestone_aggregate!

  """fetch data from the table: "milestone" using primary key columns"""
  milestone_by_pk(id: bigint!): milestone

  """
  fetch data from the table: "permissions"
  """
  permissions(
    """distinct select on columns"""
    distinct_on: [permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permissions_order_by!]

    """filter the rows returned"""
    where: permissions_bool_exp
  ): [permissions!]!

  """
  fetch aggregated fields from the table: "permissions"
  """
  permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permissions_order_by!]

    """filter the rows returned"""
    where: permissions_bool_exp
  ): permissions_aggregate!

  """fetch data from the table: "permissions" using primary key columns"""
  permissions_by_pk(project_id: bigint!): permissions

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  project_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """
  fetch data from the table: "project_allowed_users"
  """
  project_allowed_users(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): [project_allowed_users!]!

  """
  fetch aggregated fields from the table: "project_allowed_users"
  """
  project_allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): project_allowed_users_aggregate!

  """fetch data from the table: "project" using primary key columns"""
  project_by_pk(id: bigint!): project

  """
  fetch data from the table: "project_category"
  """
  project_category(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): [project_category!]!

  """
  fetch aggregated fields from the table: "project_category"
  """
  project_category_aggregate(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): project_category_aggregate!

  """
  fetch data from the table: "project_category" using primary key columns
  """
  project_category_by_pk(id: bigint!): project_category

  """
  fetch data from the table: "project_time_cutoff"
  """
  project_time_cutoff(
    """distinct select on columns"""
    distinct_on: [project_time_cutoff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_time_cutoff_order_by!]

    """filter the rows returned"""
    where: project_time_cutoff_bool_exp
  ): [project_time_cutoff!]!

  """
  fetch aggregated fields from the table: "project_time_cutoff"
  """
  project_time_cutoff_aggregate(
    """distinct select on columns"""
    distinct_on: [project_time_cutoff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_time_cutoff_order_by!]

    """filter the rows returned"""
    where: project_time_cutoff_bool_exp
  ): project_time_cutoff_aggregate!

  """
  fetch data from the table: "sessions"
  """
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch aggregated fields from the table: "sessions"
  """
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(session_id: String!): sessions

  """An array relationship"""
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """An aggregate relationship"""
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: bigint!): settings

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """
  fetch data from the table: "task_allowed_users"
  """
  task_allowed_users(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): [task_allowed_users!]!

  """
  fetch aggregated fields from the table: "task_allowed_users"
  """
  task_allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): task_allowed_users_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: bigint!): task

  """
  fetch data from the table: "task_category"
  """
  task_category(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): [task_category!]!

  """
  fetch aggregated fields from the table: "task_category"
  """
  task_category_aggregate(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): task_category_aggregate!

  """fetch data from the table: "task_category" using primary key columns"""
  task_category_by_pk(id: bigint!): task_category

  """
  fetch data from the table: "task_comment"
  """
  task_comment(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): [task_comment!]!

  """
  fetch aggregated fields from the table: "task_comment"
  """
  task_comment_aggregate(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): task_comment_aggregate!

  """fetch data from the table: "task_comment" using primary key columns"""
  task_comment_by_pk(id: bigint!): task_comment

  """
  fetch data from the table: "task_file_link"
  """
  task_file_link(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): [task_file_link!]!

  """
  fetch aggregated fields from the table: "task_file_link"
  """
  task_file_link_aggregate(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): task_file_link_aggregate!

  """fetch data from the table: "task_file_link" using primary key columns"""
  task_file_link_by_pk(id: bigint!): task_file_link

  """
  fetch data from the table: "task_timer"
  """
  task_timer(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): [task_timer!]!

  """
  fetch aggregated fields from the table: "task_timer"
  """
  task_timer_aggregate(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): task_timer_aggregate!

  """fetch data from the table: "task_timer" using primary key columns"""
  task_timer_by_pk(id: bigint!): task_timer

  """
  fetch data from the table: "task_user"
  """
  task_user(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): [task_user!]!

  """
  fetch aggregated fields from the table: "task_user"
  """
  task_user_aggregate(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): task_user_aggregate!

  """fetch data from the table: "task_user" using primary key columns"""
  task_user_by_pk(id: bigint!): task_user

  """
  fetch data from the table: "time_entry"
  """
  time_entry(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): [time_entry!]!

  """
  fetch aggregated fields from the table: "time_entry"
  """
  time_entry_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): time_entry_aggregate!

  """fetch data from the table: "time_entry" using primary key columns"""
  time_entry_by_pk(id: bigint!): time_entry

  """
  fetch data from the table: "time_entry_location"
  """
  time_entry_location(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): [time_entry_location!]!

  """
  fetch aggregated fields from the table: "time_entry_location"
  """
  time_entry_location_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): time_entry_location_aggregate!

  """
  fetch data from the table: "time_entry_location" using primary key columns
  """
  time_entry_location_by_pk(id: bigint!): time_entry_location

  """
  fetch data from the table: "token"
  """
  token(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """
  fetch aggregated fields from the table: "token"
  """
  token_aggregate(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  token_by_pk(id: bigint!): token

  """
  fetch data from the table: "user_client_access"
  """
  user_client_access(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): [user_client_access!]!

  """
  fetch aggregated fields from the table: "user_client_access"
  """
  user_client_access_aggregate(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): user_client_access_aggregate!

  """
  fetch data from the table: "user_temp"
  """
  user_temp(
    """distinct select on columns"""
    distinct_on: [user_temp_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_temp_order_by!]

    """filter the rows returned"""
    where: user_temp_bool_exp
  ): [user_temp!]!

  """
  fetch aggregated fields from the table: "user_temp"
  """
  user_temp_aggregate(
    """distinct select on columns"""
    distinct_on: [user_temp_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_temp_order_by!]

    """filter the rows returned"""
    where: user_temp_bool_exp
  ): user_temp_aggregate!

  """fetch data from the table: "user_temp" using primary key columns"""
  user_temp_by_pk(id: bigint!): user_temp

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!): users

  """
  fetch data from the table: "visible_settings"
  """
  visible_settings(
    """distinct select on columns"""
    distinct_on: [visible_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_settings_order_by!]

    """filter the rows returned"""
    where: visible_settings_bool_exp
  ): [visible_settings!]!

  """
  fetch aggregated fields from the table: "visible_settings"
  """
  visible_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [visible_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_settings_order_by!]

    """filter the rows returned"""
    where: visible_settings_bool_exp
  ): visible_settings_aggregate!

  """
  fetch data from the table: "visible_users"
  """
  visible_users(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): [visible_users!]!

  """
  fetch aggregated fields from the table: "visible_users"
  """
  visible_users_aggregate(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): visible_users_aggregate!
}

"""
columns and relationships of "sessions"
"""
type sessions {
  ip_address: String!
  last_activity: bigint!
  session_data(
    """JSON select path"""
    path: String
  ): jsonb
  session_id: String!
  user_agent: String!
  user_name: String
}

"""
aggregated selection of "sessions"
"""
type sessions_aggregate {
  aggregate: sessions_aggregate_fields
  nodes: [sessions!]!
}

"""
aggregate fields of "sessions"
"""
type sessions_aggregate_fields {
  avg: sessions_avg_fields
  count(columns: [sessions_select_column!], distinct: Boolean): Int!
  max: sessions_max_fields
  min: sessions_min_fields
  stddev: sessions_stddev_fields
  stddev_pop: sessions_stddev_pop_fields
  stddev_samp: sessions_stddev_samp_fields
  sum: sessions_sum_fields
  var_pop: sessions_var_pop_fields
  var_samp: sessions_var_samp_fields
  variance: sessions_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input sessions_append_input {
  session_data: jsonb
}

"""aggregate avg on columns"""
type sessions_avg_fields {
  last_activity: Float
}

"""
Boolean expression to filter rows from the table "sessions". All fields are combined with a logical 'AND'.
"""
input sessions_bool_exp {
  _and: [sessions_bool_exp!]
  _not: sessions_bool_exp
  _or: [sessions_bool_exp!]
  ip_address: String_comparison_exp
  last_activity: bigint_comparison_exp
  session_data: jsonb_comparison_exp
  session_id: String_comparison_exp
  user_agent: String_comparison_exp
  user_name: String_comparison_exp
}

"""
unique or primary key constraints on table "sessions"
"""
enum sessions_constraint {
  """unique or primary key constraint"""
  idx_1942885_primary
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input sessions_delete_at_path_input {
  session_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input sessions_delete_elem_input {
  session_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input sessions_delete_key_input {
  session_data: String
}

"""
input type for incrementing numeric columns in table "sessions"
"""
input sessions_inc_input {
  last_activity: bigint
}

"""
input type for inserting data into table "sessions"
"""
input sessions_insert_input {
  ip_address: String
  last_activity: bigint
  session_data: jsonb
  session_id: String
  user_agent: String
  user_name: String
}

"""aggregate max on columns"""
type sessions_max_fields {
  ip_address: String
  last_activity: bigint
  session_id: String
  user_agent: String
  user_name: String
}

"""aggregate min on columns"""
type sessions_min_fields {
  ip_address: String
  last_activity: bigint
  session_id: String
  user_agent: String
  user_name: String
}

"""
response of any mutation on the table "sessions"
"""
type sessions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sessions!]!
}

"""
on conflict condition type for table "sessions"
"""
input sessions_on_conflict {
  constraint: sessions_constraint!
  update_columns: [sessions_update_column!]! = []
  where: sessions_bool_exp
}

"""Ordering options when selecting data from "sessions"."""
input sessions_order_by {
  ip_address: order_by
  last_activity: order_by
  session_data: order_by
  session_id: order_by
  user_agent: order_by
  user_name: order_by
}

"""primary key columns input for table: sessions"""
input sessions_pk_columns_input {
  session_id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input sessions_prepend_input {
  session_data: jsonb
}

"""
select columns of table "sessions"
"""
enum sessions_select_column {
  """column name"""
  ip_address

  """column name"""
  last_activity

  """column name"""
  session_data

  """column name"""
  session_id

  """column name"""
  user_agent

  """column name"""
  user_name
}

"""
input type for updating data in table "sessions"
"""
input sessions_set_input {
  ip_address: String
  last_activity: bigint
  session_data: jsonb
  session_id: String
  user_agent: String
  user_name: String
}

"""aggregate stddev on columns"""
type sessions_stddev_fields {
  last_activity: Float
}

"""aggregate stddev_pop on columns"""
type sessions_stddev_pop_fields {
  last_activity: Float
}

"""aggregate stddev_samp on columns"""
type sessions_stddev_samp_fields {
  last_activity: Float
}

"""aggregate sum on columns"""
type sessions_sum_fields {
  last_activity: bigint
}

"""
update columns of table "sessions"
"""
enum sessions_update_column {
  """column name"""
  ip_address

  """column name"""
  last_activity

  """column name"""
  session_data

  """column name"""
  session_id

  """column name"""
  user_agent

  """column name"""
  user_name
}

"""aggregate var_pop on columns"""
type sessions_var_pop_fields {
  last_activity: Float
}

"""aggregate var_samp on columns"""
type sessions_var_samp_fields {
  last_activity: Float
}

"""aggregate variance on columns"""
type sessions_variance_fields {
  last_activity: Float
}

"""
columns and relationships of "settings"
"""
type settings {
  """An object relationship"""
  account: account!
  account_id: bigint!
  id: bigint!
  modified: timestamptz!
  name: String!
  user_id: bigint
  value: String
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  avg: settings_avg_fields
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
  stddev: settings_stddev_fields
  stddev_pop: settings_stddev_pop_fields
  stddev_samp: settings_stddev_samp_fields
  sum: settings_sum_fields
  var_pop: settings_var_pop_fields
  var_samp: settings_var_samp_fields
  variance: settings_variance_fields
}

"""
order by aggregate values of table "settings"
"""
input settings_aggregate_order_by {
  avg: settings_avg_order_by
  count: order_by
  max: settings_max_order_by
  min: settings_min_order_by
  stddev: settings_stddev_order_by
  stddev_pop: settings_stddev_pop_order_by
  stddev_samp: settings_stddev_samp_order_by
  sum: settings_sum_order_by
  var_pop: settings_var_pop_order_by
  var_samp: settings_var_samp_order_by
  variance: settings_variance_order_by
}

"""
input type for inserting array relation for remote table "settings"
"""
input settings_arr_rel_insert_input {
  data: [settings_insert_input!]!

  """on conflict condition"""
  on_conflict: settings_on_conflict
}

"""aggregate avg on columns"""
type settings_avg_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "settings"
"""
input settings_avg_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  user_id: bigint_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """unique or primary key constraint"""
  idx_1943066_primary
}

"""
input type for incrementing numeric columns in table "settings"
"""
input settings_inc_input {
  account_id: bigint
  id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  id: bigint
  modified: timestamptz
  name: String
  user_id: bigint
  value: String
}

"""aggregate max on columns"""
type settings_max_fields {
  account_id: bigint
  id: bigint
  modified: timestamptz
  name: String
  user_id: bigint
  value: String
}

"""
order by max() on columns of table "settings"
"""
input settings_max_order_by {
  account_id: order_by
  id: order_by
  modified: order_by
  name: order_by
  user_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type settings_min_fields {
  account_id: bigint
  id: bigint
  modified: timestamptz
  name: String
  user_id: bigint
  value: String
}

"""
order by min() on columns of table "settings"
"""
input settings_min_order_by {
  account_id: order_by
  id: order_by
  modified: order_by
  name: order_by
  user_id: order_by
  value: order_by
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  account: account_order_by
  account_id: order_by
  id: order_by
  modified: order_by
  name: order_by
  user_id: order_by
  value: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  id: bigint!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  user_id

  """column name"""
  value
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  account_id: bigint
  id: bigint
  modified: timestamptz
  name: String
  user_id: bigint
  value: String
}

"""aggregate stddev on columns"""
type settings_stddev_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "settings"
"""
input settings_stddev_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type settings_stddev_pop_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "settings"
"""
input settings_stddev_pop_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type settings_stddev_samp_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "settings"
"""
input settings_stddev_samp_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type settings_sum_fields {
  account_id: bigint
  id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "settings"
"""
input settings_sum_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  user_id

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type settings_var_pop_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "settings"
"""
input settings_var_pop_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type settings_var_samp_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "settings"
"""
input settings_var_samp_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type settings_variance_fields {
  account_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "settings"
"""
input settings_variance_order_by {
  account_id: order_by
  id: order_by
  user_id: order_by
}

type subscription_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: bigint!): account

  """
  fetch data from the table: "account_settings"
  """
  account_settings(
    """distinct select on columns"""
    distinct_on: [account_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_settings_order_by!]

    """filter the rows returned"""
    where: account_settings_bool_exp
  ): [account_settings!]!

  """
  fetch aggregated fields from the table: "account_settings"
  """
  account_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [account_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_settings_order_by!]

    """filter the rows returned"""
    where: account_settings_bool_exp
  ): account_settings_aggregate!

  """
  fetch data from the table: "account_user"
  """
  account_user(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): [account_user!]!

  """
  fetch aggregated fields from the table: "account_user"
  """
  account_user_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): account_user_aggregate!

  """fetch data from the table: "account_user" using primary key columns"""
  account_user_by_pk(id: bigint!): account_user

  """An array relationship"""
  account_user_role(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): [account_user_role!]!

  """An aggregate relationship"""
  account_user_role_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_role_order_by!]

    """filter the rows returned"""
    where: account_user_role_bool_exp
  ): account_user_role_aggregate!

  """
  fetch data from the table: "availability"
  """
  availability(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): [availability!]!

  """
  fetch aggregated fields from the table: "availability"
  """
  availability_aggregate(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): availability_aggregate!

  """fetch data from the table: "availability" using primary key columns"""
  availability_by_pk(id: bigint!): availability

  """
  fetch data from the table: "billing_info"
  """
  billing_info(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): [billing_info!]!

  """
  fetch aggregated fields from the table: "billing_info"
  """
  billing_info_aggregate(
    """distinct select on columns"""
    distinct_on: [billing_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billing_info_order_by!]

    """filter the rows returned"""
    where: billing_info_bool_exp
  ): billing_info_aggregate!

  """fetch data from the table: "billing_info" using primary key columns"""
  billing_info_by_pk(id: bigint!): billing_info

  """
  fetch data from the table: "client"
  """
  client(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): [client!]!

  """
  fetch aggregated fields from the table: "client"
  """
  client_aggregate(
    """distinct select on columns"""
    distinct_on: [client_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_order_by!]

    """filter the rows returned"""
    where: client_bool_exp
  ): client_aggregate!

  """fetch data from the table: "client" using primary key columns"""
  client_by_pk(id: bigint!): client

  """
  fetch data from the table: "client_time_recorded"
  """
  client_time_recorded(
    """distinct select on columns"""
    distinct_on: [client_time_recorded_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_time_recorded_order_by!]

    """filter the rows returned"""
    where: client_time_recorded_bool_exp
  ): [client_time_recorded!]!

  """
  fetch aggregated fields from the table: "client_time_recorded"
  """
  client_time_recorded_aggregate(
    """distinct select on columns"""
    distinct_on: [client_time_recorded_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [client_time_recorded_order_by!]

    """filter the rows returned"""
    where: client_time_recorded_bool_exp
  ): client_time_recorded_aggregate!

  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: bigint!): comment

  """
  fetch data from the table: "daily_time_entry"
  """
  daily_time_entry(
    """distinct select on columns"""
    distinct_on: [daily_time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daily_time_entry_order_by!]

    """filter the rows returned"""
    where: daily_time_entry_bool_exp
  ): [daily_time_entry!]!

  """
  fetch aggregated fields from the table: "daily_time_entry"
  """
  daily_time_entry_aggregate(
    """distinct select on columns"""
    distinct_on: [daily_time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daily_time_entry_order_by!]

    """filter the rows returned"""
    where: daily_time_entry_bool_exp
  ): daily_time_entry_aggregate!

  """
  fetch data from the table: "database"
  """
  database(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): [database!]!

  """
  fetch aggregated fields from the table: "database"
  """
  database_aggregate(
    """distinct select on columns"""
    distinct_on: [database_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [database_order_by!]

    """filter the rows returned"""
    where: database_bool_exp
  ): database_aggregate!

  """fetch data from the table: "database" using primary key columns"""
  database_by_pk(id: bigint!): database

  """
  fetch data from the table: "db_field"
  """
  db_field(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): [db_field!]!

  """
  fetch aggregated fields from the table: "db_field"
  """
  db_field_aggregate(
    """distinct select on columns"""
    distinct_on: [db_field_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_field_order_by!]

    """filter the rows returned"""
    where: db_field_bool_exp
  ): db_field_aggregate!

  """fetch data from the table: "db_field" using primary key columns"""
  db_field_by_pk(id: bigint!): db_field

  """
  fetch data from the table: "db_filter"
  """
  db_filter(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): [db_filter!]!

  """
  fetch aggregated fields from the table: "db_filter"
  """
  db_filter_aggregate(
    """distinct select on columns"""
    distinct_on: [db_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_filter_order_by!]

    """filter the rows returned"""
    where: db_filter_bool_exp
  ): db_filter_aggregate!

  """fetch data from the table: "db_filter" using primary key columns"""
  db_filter_by_pk(id: bigint!): db_filter

  """
  fetch data from the table: "db_note"
  """
  db_note(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): [db_note!]!

  """
  fetch aggregated fields from the table: "db_note"
  """
  db_note_aggregate(
    """distinct select on columns"""
    distinct_on: [db_note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_note_order_by!]

    """filter the rows returned"""
    where: db_note_bool_exp
  ): db_note_aggregate!

  """fetch data from the table: "db_note" using primary key columns"""
  db_note_by_pk(id: bigint!): db_note

  """
  fetch data from the table: "db_record"
  """
  db_record(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): [db_record!]!

  """
  fetch aggregated fields from the table: "db_record"
  """
  db_record_aggregate(
    """distinct select on columns"""
    distinct_on: [db_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [db_record_order_by!]

    """filter the rows returned"""
    where: db_record_bool_exp
  ): db_record_aggregate!

  """fetch data from the table: "db_record" using primary key columns"""
  db_record_by_pk(id: bigint!): db_record

  """
  fetch data from the table: "document"
  """
  document(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): [document!]!

  """
  fetch aggregated fields from the table: "document"
  """
  document_aggregate(
    """distinct select on columns"""
    distinct_on: [document_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_order_by!]

    """filter the rows returned"""
    where: document_bool_exp
  ): document_aggregate!

  """fetch data from the table: "document" using primary key columns"""
  document_by_pk(id: bigint!): document

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  event_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!

  """fetch data from the table: "event" using primary key columns"""
  event_by_pk(id: bigint!): event

  """
  fetch data from the table: "file"
  """
  file(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): [file!]!

  """
  fetch aggregated fields from the table: "file"
  """
  file_aggregate(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): file_aggregate!

  """fetch data from the table: "file" using primary key columns"""
  file_by_pk(id: bigint!): file

  """
  fetch data from the table: "form"
  """
  form(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): [form!]!

  """
  fetch aggregated fields from the table: "form"
  """
  form_aggregate(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): form_aggregate!

  """fetch data from the table: "form" using primary key columns"""
  form_by_pk(id: bigint!): form

  """
  fetch data from the table: "integration"
  """
  integration(
    """distinct select on columns"""
    distinct_on: [integration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [integration_order_by!]

    """filter the rows returned"""
    where: integration_bool_exp
  ): [integration!]!

  """
  fetch aggregated fields from the table: "integration"
  """
  integration_aggregate(
    """distinct select on columns"""
    distinct_on: [integration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [integration_order_by!]

    """filter the rows returned"""
    where: integration_bool_exp
  ): integration_aggregate!

  """fetch data from the table: "integration" using primary key columns"""
  integration_by_pk(client_id: String!): integration

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  message_aggregate(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): message_aggregate!

  """fetch data from the table: "message" using primary key columns"""
  message_by_pk(id: bigint!): message

  """
  fetch data from the table: "milestone"
  """
  milestone(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): [milestone!]!

  """
  fetch aggregated fields from the table: "milestone"
  """
  milestone_aggregate(
    """distinct select on columns"""
    distinct_on: [milestone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [milestone_order_by!]

    """filter the rows returned"""
    where: milestone_bool_exp
  ): milestone_aggregate!

  """fetch data from the table: "milestone" using primary key columns"""
  milestone_by_pk(id: bigint!): milestone

  """
  fetch data from the table: "permissions"
  """
  permissions(
    """distinct select on columns"""
    distinct_on: [permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permissions_order_by!]

    """filter the rows returned"""
    where: permissions_bool_exp
  ): [permissions!]!

  """
  fetch aggregated fields from the table: "permissions"
  """
  permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permissions_order_by!]

    """filter the rows returned"""
    where: permissions_bool_exp
  ): permissions_aggregate!

  """fetch data from the table: "permissions" using primary key columns"""
  permissions_by_pk(project_id: bigint!): permissions

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  project_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """
  fetch data from the table: "project_allowed_users"
  """
  project_allowed_users(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): [project_allowed_users!]!

  """
  fetch aggregated fields from the table: "project_allowed_users"
  """
  project_allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [project_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_allowed_users_order_by!]

    """filter the rows returned"""
    where: project_allowed_users_bool_exp
  ): project_allowed_users_aggregate!

  """fetch data from the table: "project" using primary key columns"""
  project_by_pk(id: bigint!): project

  """
  fetch data from the table: "project_category"
  """
  project_category(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): [project_category!]!

  """
  fetch aggregated fields from the table: "project_category"
  """
  project_category_aggregate(
    """distinct select on columns"""
    distinct_on: [project_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_category_order_by!]

    """filter the rows returned"""
    where: project_category_bool_exp
  ): project_category_aggregate!

  """
  fetch data from the table: "project_category" using primary key columns
  """
  project_category_by_pk(id: bigint!): project_category

  """
  fetch data from the table: "project_time_cutoff"
  """
  project_time_cutoff(
    """distinct select on columns"""
    distinct_on: [project_time_cutoff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_time_cutoff_order_by!]

    """filter the rows returned"""
    where: project_time_cutoff_bool_exp
  ): [project_time_cutoff!]!

  """
  fetch aggregated fields from the table: "project_time_cutoff"
  """
  project_time_cutoff_aggregate(
    """distinct select on columns"""
    distinct_on: [project_time_cutoff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_time_cutoff_order_by!]

    """filter the rows returned"""
    where: project_time_cutoff_bool_exp
  ): project_time_cutoff_aggregate!

  """
  fetch data from the table: "sessions"
  """
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch aggregated fields from the table: "sessions"
  """
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(session_id: String!): sessions

  """An array relationship"""
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """An aggregate relationship"""
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: bigint!): settings

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """
  fetch data from the table: "task_allowed_users"
  """
  task_allowed_users(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): [task_allowed_users!]!

  """
  fetch aggregated fields from the table: "task_allowed_users"
  """
  task_allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): task_allowed_users_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: bigint!): task

  """
  fetch data from the table: "task_category"
  """
  task_category(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): [task_category!]!

  """
  fetch aggregated fields from the table: "task_category"
  """
  task_category_aggregate(
    """distinct select on columns"""
    distinct_on: [task_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_category_order_by!]

    """filter the rows returned"""
    where: task_category_bool_exp
  ): task_category_aggregate!

  """fetch data from the table: "task_category" using primary key columns"""
  task_category_by_pk(id: bigint!): task_category

  """
  fetch data from the table: "task_comment"
  """
  task_comment(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): [task_comment!]!

  """
  fetch aggregated fields from the table: "task_comment"
  """
  task_comment_aggregate(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): task_comment_aggregate!

  """fetch data from the table: "task_comment" using primary key columns"""
  task_comment_by_pk(id: bigint!): task_comment

  """
  fetch data from the table: "task_file_link"
  """
  task_file_link(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): [task_file_link!]!

  """
  fetch aggregated fields from the table: "task_file_link"
  """
  task_file_link_aggregate(
    """distinct select on columns"""
    distinct_on: [task_file_link_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_file_link_order_by!]

    """filter the rows returned"""
    where: task_file_link_bool_exp
  ): task_file_link_aggregate!

  """fetch data from the table: "task_file_link" using primary key columns"""
  task_file_link_by_pk(id: bigint!): task_file_link

  """
  fetch data from the table: "task_timer"
  """
  task_timer(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): [task_timer!]!

  """
  fetch aggregated fields from the table: "task_timer"
  """
  task_timer_aggregate(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): task_timer_aggregate!

  """fetch data from the table: "task_timer" using primary key columns"""
  task_timer_by_pk(id: bigint!): task_timer

  """
  fetch data from the table: "task_user"
  """
  task_user(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): [task_user!]!

  """
  fetch aggregated fields from the table: "task_user"
  """
  task_user_aggregate(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): task_user_aggregate!

  """fetch data from the table: "task_user" using primary key columns"""
  task_user_by_pk(id: bigint!): task_user

  """
  fetch data from the table: "time_entry"
  """
  time_entry(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): [time_entry!]!

  """
  fetch aggregated fields from the table: "time_entry"
  """
  time_entry_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): time_entry_aggregate!

  """fetch data from the table: "time_entry" using primary key columns"""
  time_entry_by_pk(id: bigint!): time_entry

  """
  fetch data from the table: "time_entry_location"
  """
  time_entry_location(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): [time_entry_location!]!

  """
  fetch aggregated fields from the table: "time_entry_location"
  """
  time_entry_location_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_location_order_by!]

    """filter the rows returned"""
    where: time_entry_location_bool_exp
  ): time_entry_location_aggregate!

  """
  fetch data from the table: "time_entry_location" using primary key columns
  """
  time_entry_location_by_pk(id: bigint!): time_entry_location

  """
  fetch data from the table: "token"
  """
  token(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): [token!]!

  """
  fetch aggregated fields from the table: "token"
  """
  token_aggregate(
    """distinct select on columns"""
    distinct_on: [token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_order_by!]

    """filter the rows returned"""
    where: token_bool_exp
  ): token_aggregate!

  """fetch data from the table: "token" using primary key columns"""
  token_by_pk(id: bigint!): token

  """
  fetch data from the table: "user_client_access"
  """
  user_client_access(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): [user_client_access!]!

  """
  fetch aggregated fields from the table: "user_client_access"
  """
  user_client_access_aggregate(
    """distinct select on columns"""
    distinct_on: [user_client_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_client_access_order_by!]

    """filter the rows returned"""
    where: user_client_access_bool_exp
  ): user_client_access_aggregate!

  """
  fetch data from the table: "user_temp"
  """
  user_temp(
    """distinct select on columns"""
    distinct_on: [user_temp_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_temp_order_by!]

    """filter the rows returned"""
    where: user_temp_bool_exp
  ): [user_temp!]!

  """
  fetch aggregated fields from the table: "user_temp"
  """
  user_temp_aggregate(
    """distinct select on columns"""
    distinct_on: [user_temp_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_temp_order_by!]

    """filter the rows returned"""
    where: user_temp_bool_exp
  ): user_temp_aggregate!

  """fetch data from the table: "user_temp" using primary key columns"""
  user_temp_by_pk(id: bigint!): user_temp

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!): users

  """
  fetch data from the table: "visible_settings"
  """
  visible_settings(
    """distinct select on columns"""
    distinct_on: [visible_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_settings_order_by!]

    """filter the rows returned"""
    where: visible_settings_bool_exp
  ): [visible_settings!]!

  """
  fetch aggregated fields from the table: "visible_settings"
  """
  visible_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [visible_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_settings_order_by!]

    """filter the rows returned"""
    where: visible_settings_bool_exp
  ): visible_settings_aggregate!

  """
  fetch data from the table: "visible_users"
  """
  visible_users(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): [visible_users!]!

  """
  fetch aggregated fields from the table: "visible_users"
  """
  visible_users_aggregate(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): visible_users_aggregate!
}

"""
columns and relationships of "task"
"""
type task {
  """An array relationship"""
  allowed_users(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): [task_allowed_users!]!

  """An aggregate relationship"""
  allowed_users_aggregate(
    """distinct select on columns"""
    distinct_on: [task_allowed_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_allowed_users_order_by!]

    """filter the rows returned"""
    where: task_allowed_users_bool_exp
  ): task_allowed_users_aggregate!
  budget: float8

  """An object relationship"""
  category: task_category
  category_id: bigint

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): [task_comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): task_comment_aggregate!
  completed: timestamptz
  create_user: bigint
  created: timestamptz

  """An object relationship"""
  created_by: users

  """An object relationship"""
  file_link: task_file_link
  hourly_rate: float8
  id: bigint!
  lowercase_name: String

  """An object relationship"""
  milestone: milestone
  milestone_id: bigint
  modified: timestamptz!
  name: String!
  notes: String

  """An object relationship"""
  project: project!
  project_id: bigint!
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz

  """An array relationship"""
  time_entries(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): [time_entry!]!

  """An aggregate relationship"""
  time_entries_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): time_entry_aggregate!
  update_user: bigint

  """An object relationship"""
  updated_by: users

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): [task_user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): task_user_aggregate!
  visibility: String
}

"""
aggregated selection of "task"
"""
type task_aggregate {
  aggregate: task_aggregate_fields
  nodes: [task!]!
}

"""
aggregate fields of "task"
"""
type task_aggregate_fields {
  avg: task_avg_fields
  count(columns: [task_select_column!], distinct: Boolean): Int!
  max: task_max_fields
  min: task_min_fields
  stddev: task_stddev_fields
  stddev_pop: task_stddev_pop_fields
  stddev_samp: task_stddev_samp_fields
  sum: task_sum_fields
  var_pop: task_var_pop_fields
  var_samp: task_var_samp_fields
  variance: task_variance_fields
}

"""
order by aggregate values of table "task"
"""
input task_aggregate_order_by {
  avg: task_avg_order_by
  count: order_by
  max: task_max_order_by
  min: task_min_order_by
  stddev: task_stddev_order_by
  stddev_pop: task_stddev_pop_order_by
  stddev_samp: task_stddev_samp_order_by
  sum: task_sum_order_by
  var_pop: task_var_pop_order_by
  var_samp: task_var_samp_order_by
  variance: task_variance_order_by
}

"""
columns and relationships of "task_allowed_users"
"""
type task_allowed_users {
  task_id: bigint
  user_id: bigint
}

"""
aggregated selection of "task_allowed_users"
"""
type task_allowed_users_aggregate {
  aggregate: task_allowed_users_aggregate_fields
  nodes: [task_allowed_users!]!
}

"""
aggregate fields of "task_allowed_users"
"""
type task_allowed_users_aggregate_fields {
  avg: task_allowed_users_avg_fields
  count(columns: [task_allowed_users_select_column!], distinct: Boolean): Int!
  max: task_allowed_users_max_fields
  min: task_allowed_users_min_fields
  stddev: task_allowed_users_stddev_fields
  stddev_pop: task_allowed_users_stddev_pop_fields
  stddev_samp: task_allowed_users_stddev_samp_fields
  sum: task_allowed_users_sum_fields
  var_pop: task_allowed_users_var_pop_fields
  var_samp: task_allowed_users_var_samp_fields
  variance: task_allowed_users_variance_fields
}

"""
order by aggregate values of table "task_allowed_users"
"""
input task_allowed_users_aggregate_order_by {
  avg: task_allowed_users_avg_order_by
  count: order_by
  max: task_allowed_users_max_order_by
  min: task_allowed_users_min_order_by
  stddev: task_allowed_users_stddev_order_by
  stddev_pop: task_allowed_users_stddev_pop_order_by
  stddev_samp: task_allowed_users_stddev_samp_order_by
  sum: task_allowed_users_sum_order_by
  var_pop: task_allowed_users_var_pop_order_by
  var_samp: task_allowed_users_var_samp_order_by
  variance: task_allowed_users_variance_order_by
}

"""
input type for inserting array relation for remote table "task_allowed_users"
"""
input task_allowed_users_arr_rel_insert_input {
  data: [task_allowed_users_insert_input!]!
}

"""aggregate avg on columns"""
type task_allowed_users_avg_fields {
  task_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "task_allowed_users"
"""
input task_allowed_users_avg_order_by {
  task_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "task_allowed_users". All fields are combined with a logical 'AND'.
"""
input task_allowed_users_bool_exp {
  _and: [task_allowed_users_bool_exp!]
  _not: task_allowed_users_bool_exp
  _or: [task_allowed_users_bool_exp!]
  task_id: bigint_comparison_exp
  user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "task_allowed_users"
"""
input task_allowed_users_insert_input {
  task_id: bigint
  user_id: bigint
}

"""aggregate max on columns"""
type task_allowed_users_max_fields {
  task_id: bigint
  user_id: bigint
}

"""
order by max() on columns of table "task_allowed_users"
"""
input task_allowed_users_max_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type task_allowed_users_min_fields {
  task_id: bigint
  user_id: bigint
}

"""
order by min() on columns of table "task_allowed_users"
"""
input task_allowed_users_min_order_by {
  task_id: order_by
  user_id: order_by
}

"""Ordering options when selecting data from "task_allowed_users"."""
input task_allowed_users_order_by {
  task_id: order_by
  user_id: order_by
}

"""
select columns of table "task_allowed_users"
"""
enum task_allowed_users_select_column {
  """column name"""
  task_id

  """column name"""
  user_id
}

"""aggregate stddev on columns"""
type task_allowed_users_stddev_fields {
  task_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "task_allowed_users"
"""
input task_allowed_users_stddev_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_allowed_users_stddev_pop_fields {
  task_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "task_allowed_users"
"""
input task_allowed_users_stddev_pop_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_allowed_users_stddev_samp_fields {
  task_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "task_allowed_users"
"""
input task_allowed_users_stddev_samp_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type task_allowed_users_sum_fields {
  task_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "task_allowed_users"
"""
input task_allowed_users_sum_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type task_allowed_users_var_pop_fields {
  task_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "task_allowed_users"
"""
input task_allowed_users_var_pop_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type task_allowed_users_var_samp_fields {
  task_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "task_allowed_users"
"""
input task_allowed_users_var_samp_order_by {
  task_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type task_allowed_users_variance_fields {
  task_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "task_allowed_users"
"""
input task_allowed_users_variance_order_by {
  task_id: order_by
  user_id: order_by
}

"""
input type for inserting array relation for remote table "task"
"""
input task_arr_rel_insert_input {
  data: [task_insert_input!]!

  """on conflict condition"""
  on_conflict: task_on_conflict
}

"""aggregate avg on columns"""
type task_avg_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by avg() on columns of table "task"
"""
input task_avg_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""
Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'.
"""
input task_bool_exp {
  _and: [task_bool_exp!]
  _not: task_bool_exp
  _or: [task_bool_exp!]
  allowed_users: task_allowed_users_bool_exp
  budget: float8_comparison_exp
  category: task_category_bool_exp
  category_id: bigint_comparison_exp
  comments: task_comment_bool_exp
  completed: timestamptz_comparison_exp
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  created_by: users_bool_exp
  file_link: task_file_link_bool_exp
  hourly_rate: float8_comparison_exp
  id: bigint_comparison_exp
  lowercase_name: String_comparison_exp
  milestone: milestone_bool_exp
  milestone_id: bigint_comparison_exp
  modified: timestamptz_comparison_exp
  name: String_comparison_exp
  notes: String_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  reminder_sent: timestamptz_comparison_exp
  start_date: timestamptz_comparison_exp
  status: String_comparison_exp
  target_date: timestamptz_comparison_exp
  time_entries: time_entry_bool_exp
  update_user: bigint_comparison_exp
  updated_by: users_bool_exp
  users: task_user_bool_exp
  visibility: String_comparison_exp
}

"""
columns and relationships of "task_category"
"""
type task_category {
  """An object relationship"""
  account: account!
  account_id: bigint!
  id: bigint!
  name: String!
}

"""
aggregated selection of "task_category"
"""
type task_category_aggregate {
  aggregate: task_category_aggregate_fields
  nodes: [task_category!]!
}

"""
aggregate fields of "task_category"
"""
type task_category_aggregate_fields {
  avg: task_category_avg_fields
  count(columns: [task_category_select_column!], distinct: Boolean): Int!
  max: task_category_max_fields
  min: task_category_min_fields
  stddev: task_category_stddev_fields
  stddev_pop: task_category_stddev_pop_fields
  stddev_samp: task_category_stddev_samp_fields
  sum: task_category_sum_fields
  var_pop: task_category_var_pop_fields
  var_samp: task_category_var_samp_fields
  variance: task_category_variance_fields
}

"""
order by aggregate values of table "task_category"
"""
input task_category_aggregate_order_by {
  avg: task_category_avg_order_by
  count: order_by
  max: task_category_max_order_by
  min: task_category_min_order_by
  stddev: task_category_stddev_order_by
  stddev_pop: task_category_stddev_pop_order_by
  stddev_samp: task_category_stddev_samp_order_by
  sum: task_category_sum_order_by
  var_pop: task_category_var_pop_order_by
  var_samp: task_category_var_samp_order_by
  variance: task_category_variance_order_by
}

"""
input type for inserting array relation for remote table "task_category"
"""
input task_category_arr_rel_insert_input {
  data: [task_category_insert_input!]!

  """on conflict condition"""
  on_conflict: task_category_on_conflict
}

"""aggregate avg on columns"""
type task_category_avg_fields {
  account_id: Float
  id: Float
}

"""
order by avg() on columns of table "task_category"
"""
input task_category_avg_order_by {
  account_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "task_category". All fields are combined with a logical 'AND'.
"""
input task_category_bool_exp {
  _and: [task_category_bool_exp!]
  _not: task_category_bool_exp
  _or: [task_category_bool_exp!]
  account: account_bool_exp
  account_id: bigint_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "task_category"
"""
enum task_category_constraint {
  """unique or primary key constraint"""
  idx_1943088_primary
}

"""
input type for incrementing numeric columns in table "task_category"
"""
input task_category_inc_input {
  account_id: bigint
  id: bigint
}

"""
input type for inserting data into table "task_category"
"""
input task_category_insert_input {
  account: account_obj_rel_insert_input
  account_id: bigint
  id: bigint
  name: String
}

"""aggregate max on columns"""
type task_category_max_fields {
  account_id: bigint
  id: bigint
  name: String
}

"""
order by max() on columns of table "task_category"
"""
input task_category_max_order_by {
  account_id: order_by
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type task_category_min_fields {
  account_id: bigint
  id: bigint
  name: String
}

"""
order by min() on columns of table "task_category"
"""
input task_category_min_order_by {
  account_id: order_by
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "task_category"
"""
type task_category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_category!]!
}

"""
input type for inserting object relation for remote table "task_category"
"""
input task_category_obj_rel_insert_input {
  data: task_category_insert_input!

  """on conflict condition"""
  on_conflict: task_category_on_conflict
}

"""
on conflict condition type for table "task_category"
"""
input task_category_on_conflict {
  constraint: task_category_constraint!
  update_columns: [task_category_update_column!]! = []
  where: task_category_bool_exp
}

"""Ordering options when selecting data from "task_category"."""
input task_category_order_by {
  account: account_order_by
  account_id: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: task_category"""
input task_category_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task_category"
"""
enum task_category_select_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "task_category"
"""
input task_category_set_input {
  account_id: bigint
  id: bigint
  name: String
}

"""aggregate stddev on columns"""
type task_category_stddev_fields {
  account_id: Float
  id: Float
}

"""
order by stddev() on columns of table "task_category"
"""
input task_category_stddev_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type task_category_stddev_pop_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "task_category"
"""
input task_category_stddev_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type task_category_stddev_samp_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "task_category"
"""
input task_category_stddev_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type task_category_sum_fields {
  account_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "task_category"
"""
input task_category_sum_order_by {
  account_id: order_by
  id: order_by
}

"""
update columns of table "task_category"
"""
enum task_category_update_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type task_category_var_pop_fields {
  account_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "task_category"
"""
input task_category_var_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type task_category_var_samp_fields {
  account_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "task_category"
"""
input task_category_var_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type task_category_variance_fields {
  account_id: Float
  id: Float
}

"""
order by variance() on columns of table "task_category"
"""
input task_category_variance_order_by {
  account_id: order_by
  id: order_by
}

"""
columns and relationships of "task_comment"
"""
type task_comment {
  create_user: bigint
  created: timestamptz!

  """An object relationship"""
  created_by: users
  id: bigint!
  message: String!
  notify_user_ids(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  task: task!
  task_id: bigint!
}

"""
aggregated selection of "task_comment"
"""
type task_comment_aggregate {
  aggregate: task_comment_aggregate_fields
  nodes: [task_comment!]!
}

"""
aggregate fields of "task_comment"
"""
type task_comment_aggregate_fields {
  avg: task_comment_avg_fields
  count(columns: [task_comment_select_column!], distinct: Boolean): Int!
  max: task_comment_max_fields
  min: task_comment_min_fields
  stddev: task_comment_stddev_fields
  stddev_pop: task_comment_stddev_pop_fields
  stddev_samp: task_comment_stddev_samp_fields
  sum: task_comment_sum_fields
  var_pop: task_comment_var_pop_fields
  var_samp: task_comment_var_samp_fields
  variance: task_comment_variance_fields
}

"""
order by aggregate values of table "task_comment"
"""
input task_comment_aggregate_order_by {
  avg: task_comment_avg_order_by
  count: order_by
  max: task_comment_max_order_by
  min: task_comment_min_order_by
  stddev: task_comment_stddev_order_by
  stddev_pop: task_comment_stddev_pop_order_by
  stddev_samp: task_comment_stddev_samp_order_by
  sum: task_comment_sum_order_by
  var_pop: task_comment_var_pop_order_by
  var_samp: task_comment_var_samp_order_by
  variance: task_comment_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input task_comment_append_input {
  notify_user_ids: jsonb
}

"""
input type for inserting array relation for remote table "task_comment"
"""
input task_comment_arr_rel_insert_input {
  data: [task_comment_insert_input!]!

  """on conflict condition"""
  on_conflict: task_comment_on_conflict
}

"""aggregate avg on columns"""
type task_comment_avg_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by avg() on columns of table "task_comment"
"""
input task_comment_avg_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""
Boolean expression to filter rows from the table "task_comment". All fields are combined with a logical 'AND'.
"""
input task_comment_bool_exp {
  _and: [task_comment_bool_exp!]
  _not: task_comment_bool_exp
  _or: [task_comment_bool_exp!]
  create_user: bigint_comparison_exp
  created: timestamptz_comparison_exp
  created_by: users_bool_exp
  id: bigint_comparison_exp
  message: String_comparison_exp
  notify_user_ids: jsonb_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "task_comment"
"""
enum task_comment_constraint {
  """unique or primary key constraint"""
  idx_1943097_primary
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input task_comment_delete_at_path_input {
  notify_user_ids: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input task_comment_delete_elem_input {
  notify_user_ids: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input task_comment_delete_key_input {
  notify_user_ids: String
}

"""
input type for incrementing numeric columns in table "task_comment"
"""
input task_comment_inc_input {
  create_user: bigint
  id: bigint
  task_id: bigint
}

"""
input type for inserting data into table "task_comment"
"""
input task_comment_insert_input {
  create_user: bigint
  created: timestamptz
  created_by: users_obj_rel_insert_input
  id: bigint
  message: String
  notify_user_ids: jsonb
  task: task_obj_rel_insert_input
  task_id: bigint
}

"""aggregate max on columns"""
type task_comment_max_fields {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  task_id: bigint
}

"""
order by max() on columns of table "task_comment"
"""
input task_comment_max_order_by {
  create_user: order_by
  created: order_by
  id: order_by
  message: order_by
  task_id: order_by
}

"""aggregate min on columns"""
type task_comment_min_fields {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  task_id: bigint
}

"""
order by min() on columns of table "task_comment"
"""
input task_comment_min_order_by {
  create_user: order_by
  created: order_by
  id: order_by
  message: order_by
  task_id: order_by
}

"""
response of any mutation on the table "task_comment"
"""
type task_comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_comment!]!
}

"""
on conflict condition type for table "task_comment"
"""
input task_comment_on_conflict {
  constraint: task_comment_constraint!
  update_columns: [task_comment_update_column!]! = []
  where: task_comment_bool_exp
}

"""Ordering options when selecting data from "task_comment"."""
input task_comment_order_by {
  create_user: order_by
  created: order_by
  created_by: users_order_by
  id: order_by
  message: order_by
  notify_user_ids: order_by
  task: task_order_by
  task_id: order_by
}

"""primary key columns input for table: task_comment"""
input task_comment_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input task_comment_prepend_input {
  notify_user_ids: jsonb
}

"""
select columns of table "task_comment"
"""
enum task_comment_select_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  message

  """column name"""
  notify_user_ids

  """column name"""
  task_id
}

"""
input type for updating data in table "task_comment"
"""
input task_comment_set_input {
  create_user: bigint
  created: timestamptz
  id: bigint
  message: String
  notify_user_ids: jsonb
  task_id: bigint
}

"""aggregate stddev on columns"""
type task_comment_stddev_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by stddev() on columns of table "task_comment"
"""
input task_comment_stddev_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_comment_stddev_pop_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by stddev_pop() on columns of table "task_comment"
"""
input task_comment_stddev_pop_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_comment_stddev_samp_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by stddev_samp() on columns of table "task_comment"
"""
input task_comment_stddev_samp_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""aggregate sum on columns"""
type task_comment_sum_fields {
  create_user: bigint
  id: bigint
  task_id: bigint
}

"""
order by sum() on columns of table "task_comment"
"""
input task_comment_sum_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""
update columns of table "task_comment"
"""
enum task_comment_update_column {
  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  id

  """column name"""
  message

  """column name"""
  notify_user_ids

  """column name"""
  task_id
}

"""aggregate var_pop on columns"""
type task_comment_var_pop_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by var_pop() on columns of table "task_comment"
"""
input task_comment_var_pop_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""aggregate var_samp on columns"""
type task_comment_var_samp_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by var_samp() on columns of table "task_comment"
"""
input task_comment_var_samp_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""aggregate variance on columns"""
type task_comment_variance_fields {
  create_user: Float
  id: Float
  task_id: Float
}

"""
order by variance() on columns of table "task_comment"
"""
input task_comment_variance_order_by {
  create_user: order_by
  id: order_by
  task_id: order_by
}

"""
unique or primary key constraints on table "task"
"""
enum task_constraint {
  """unique or primary key constraint"""
  idx_1943076_primary
}

"""
columns and relationships of "task_file_link"
"""
type task_file_link {
  """An object relationship"""
  file: file!
  file_id: bigint!
  id: bigint!

  """An object relationship"""
  task: task!
  task_id: bigint!
}

"""
aggregated selection of "task_file_link"
"""
type task_file_link_aggregate {
  aggregate: task_file_link_aggregate_fields
  nodes: [task_file_link!]!
}

"""
aggregate fields of "task_file_link"
"""
type task_file_link_aggregate_fields {
  avg: task_file_link_avg_fields
  count(columns: [task_file_link_select_column!], distinct: Boolean): Int!
  max: task_file_link_max_fields
  min: task_file_link_min_fields
  stddev: task_file_link_stddev_fields
  stddev_pop: task_file_link_stddev_pop_fields
  stddev_samp: task_file_link_stddev_samp_fields
  sum: task_file_link_sum_fields
  var_pop: task_file_link_var_pop_fields
  var_samp: task_file_link_var_samp_fields
  variance: task_file_link_variance_fields
}

"""
order by aggregate values of table "task_file_link"
"""
input task_file_link_aggregate_order_by {
  avg: task_file_link_avg_order_by
  count: order_by
  max: task_file_link_max_order_by
  min: task_file_link_min_order_by
  stddev: task_file_link_stddev_order_by
  stddev_pop: task_file_link_stddev_pop_order_by
  stddev_samp: task_file_link_stddev_samp_order_by
  sum: task_file_link_sum_order_by
  var_pop: task_file_link_var_pop_order_by
  var_samp: task_file_link_var_samp_order_by
  variance: task_file_link_variance_order_by
}

"""
input type for inserting array relation for remote table "task_file_link"
"""
input task_file_link_arr_rel_insert_input {
  data: [task_file_link_insert_input!]!

  """on conflict condition"""
  on_conflict: task_file_link_on_conflict
}

"""aggregate avg on columns"""
type task_file_link_avg_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by avg() on columns of table "task_file_link"
"""
input task_file_link_avg_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""
Boolean expression to filter rows from the table "task_file_link". All fields are combined with a logical 'AND'.
"""
input task_file_link_bool_exp {
  _and: [task_file_link_bool_exp!]
  _not: task_file_link_bool_exp
  _or: [task_file_link_bool_exp!]
  file: file_bool_exp
  file_id: bigint_comparison_exp
  id: bigint_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "task_file_link"
"""
enum task_file_link_constraint {
  """unique or primary key constraint"""
  idx_1943106_primary
}

"""
input type for incrementing numeric columns in table "task_file_link"
"""
input task_file_link_inc_input {
  file_id: bigint
  id: bigint
  task_id: bigint
}

"""
input type for inserting data into table "task_file_link"
"""
input task_file_link_insert_input {
  file: file_obj_rel_insert_input
  file_id: bigint
  id: bigint
  task: task_obj_rel_insert_input
  task_id: bigint
}

"""aggregate max on columns"""
type task_file_link_max_fields {
  file_id: bigint
  id: bigint
  task_id: bigint
}

"""
order by max() on columns of table "task_file_link"
"""
input task_file_link_max_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate min on columns"""
type task_file_link_min_fields {
  file_id: bigint
  id: bigint
  task_id: bigint
}

"""
order by min() on columns of table "task_file_link"
"""
input task_file_link_min_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""
response of any mutation on the table "task_file_link"
"""
type task_file_link_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_file_link!]!
}

"""
input type for inserting object relation for remote table "task_file_link"
"""
input task_file_link_obj_rel_insert_input {
  data: task_file_link_insert_input!

  """on conflict condition"""
  on_conflict: task_file_link_on_conflict
}

"""
on conflict condition type for table "task_file_link"
"""
input task_file_link_on_conflict {
  constraint: task_file_link_constraint!
  update_columns: [task_file_link_update_column!]! = []
  where: task_file_link_bool_exp
}

"""Ordering options when selecting data from "task_file_link"."""
input task_file_link_order_by {
  file: file_order_by
  file_id: order_by
  id: order_by
  task: task_order_by
  task_id: order_by
}

"""primary key columns input for table: task_file_link"""
input task_file_link_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task_file_link"
"""
enum task_file_link_select_column {
  """column name"""
  file_id

  """column name"""
  id

  """column name"""
  task_id
}

"""
input type for updating data in table "task_file_link"
"""
input task_file_link_set_input {
  file_id: bigint
  id: bigint
  task_id: bigint
}

"""aggregate stddev on columns"""
type task_file_link_stddev_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by stddev() on columns of table "task_file_link"
"""
input task_file_link_stddev_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_file_link_stddev_pop_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by stddev_pop() on columns of table "task_file_link"
"""
input task_file_link_stddev_pop_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_file_link_stddev_samp_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by stddev_samp() on columns of table "task_file_link"
"""
input task_file_link_stddev_samp_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate sum on columns"""
type task_file_link_sum_fields {
  file_id: bigint
  id: bigint
  task_id: bigint
}

"""
order by sum() on columns of table "task_file_link"
"""
input task_file_link_sum_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""
update columns of table "task_file_link"
"""
enum task_file_link_update_column {
  """column name"""
  file_id

  """column name"""
  id

  """column name"""
  task_id
}

"""aggregate var_pop on columns"""
type task_file_link_var_pop_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by var_pop() on columns of table "task_file_link"
"""
input task_file_link_var_pop_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate var_samp on columns"""
type task_file_link_var_samp_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by var_samp() on columns of table "task_file_link"
"""
input task_file_link_var_samp_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""aggregate variance on columns"""
type task_file_link_variance_fields {
  file_id: Float
  id: Float
  task_id: Float
}

"""
order by variance() on columns of table "task_file_link"
"""
input task_file_link_variance_order_by {
  file_id: order_by
  id: order_by
  task_id: order_by
}

"""
input type for incrementing numeric columns in table "task"
"""
input task_inc_input {
  budget: float8
  category_id: bigint
  create_user: bigint
  hourly_rate: float8
  id: bigint
  milestone_id: bigint
  project_id: bigint
  update_user: bigint
}

"""
input type for inserting data into table "task"
"""
input task_insert_input {
  allowed_users: task_allowed_users_arr_rel_insert_input
  budget: float8
  category: task_category_obj_rel_insert_input
  category_id: bigint
  comments: task_comment_arr_rel_insert_input
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  created_by: users_obj_rel_insert_input
  file_link: task_file_link_obj_rel_insert_input
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  milestone: milestone_obj_rel_insert_input
  milestone_id: bigint
  modified: timestamptz
  name: String
  notes: String
  project: project_obj_rel_insert_input
  project_id: bigint
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  time_entries: time_entry_arr_rel_insert_input
  update_user: bigint
  updated_by: users_obj_rel_insert_input
  users: task_user_arr_rel_insert_input
  visibility: String
}

"""aggregate max on columns"""
type task_max_fields {
  budget: float8
  category_id: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  milestone_id: bigint
  modified: timestamptz
  name: String
  notes: String
  project_id: bigint
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
  visibility: String
}

"""
order by max() on columns of table "task"
"""
input task_max_order_by {
  budget: order_by
  category_id: order_by
  completed: order_by
  create_user: order_by
  created: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  milestone_id: order_by
  modified: order_by
  name: order_by
  notes: order_by
  project_id: order_by
  reminder_sent: order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
  visibility: order_by
}

"""aggregate min on columns"""
type task_min_fields {
  budget: float8
  category_id: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  milestone_id: bigint
  modified: timestamptz
  name: String
  notes: String
  project_id: bigint
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
  visibility: String
}

"""
order by min() on columns of table "task"
"""
input task_min_order_by {
  budget: order_by
  category_id: order_by
  completed: order_by
  create_user: order_by
  created: order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  milestone_id: order_by
  modified: order_by
  name: order_by
  notes: order_by
  project_id: order_by
  reminder_sent: order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  update_user: order_by
  visibility: order_by
}

"""
response of any mutation on the table "task"
"""
type task_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task!]!
}

"""
input type for inserting object relation for remote table "task"
"""
input task_obj_rel_insert_input {
  data: task_insert_input!

  """on conflict condition"""
  on_conflict: task_on_conflict
}

"""
on conflict condition type for table "task"
"""
input task_on_conflict {
  constraint: task_constraint!
  update_columns: [task_update_column!]! = []
  where: task_bool_exp
}

"""Ordering options when selecting data from "task"."""
input task_order_by {
  allowed_users_aggregate: task_allowed_users_aggregate_order_by
  budget: order_by
  category: task_category_order_by
  category_id: order_by
  comments_aggregate: task_comment_aggregate_order_by
  completed: order_by
  create_user: order_by
  created: order_by
  created_by: users_order_by
  file_link: task_file_link_order_by
  hourly_rate: order_by
  id: order_by
  lowercase_name: order_by
  milestone: milestone_order_by
  milestone_id: order_by
  modified: order_by
  name: order_by
  notes: order_by
  project: project_order_by
  project_id: order_by
  reminder_sent: order_by
  start_date: order_by
  status: order_by
  target_date: order_by
  time_entries_aggregate: time_entry_aggregate_order_by
  update_user: order_by
  updated_by: users_order_by
  users_aggregate: task_user_aggregate_order_by
  visibility: order_by
}

"""primary key columns input for table: task"""
input task_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task"
"""
enum task_select_column {
  """column name"""
  budget

  """column name"""
  category_id

  """column name"""
  completed

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  milestone_id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  project_id

  """column name"""
  reminder_sent

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user

  """column name"""
  visibility
}

"""
input type for updating data in table "task"
"""
input task_set_input {
  budget: float8
  category_id: bigint
  completed: timestamptz
  create_user: bigint
  created: timestamptz
  hourly_rate: float8
  id: bigint
  lowercase_name: String
  milestone_id: bigint
  modified: timestamptz
  name: String
  notes: String
  project_id: bigint
  reminder_sent: timestamptz
  start_date: timestamptz
  status: String
  target_date: timestamptz
  update_user: bigint
  visibility: String
}

"""aggregate stddev on columns"""
type task_stddev_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev() on columns of table "task"
"""
input task_stddev_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate stddev_pop on columns"""
type task_stddev_pop_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev_pop() on columns of table "task"
"""
input task_stddev_pop_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate stddev_samp on columns"""
type task_stddev_samp_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by stddev_samp() on columns of table "task"
"""
input task_stddev_samp_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate sum on columns"""
type task_sum_fields {
  budget: float8
  category_id: bigint
  create_user: bigint
  hourly_rate: float8
  id: bigint
  milestone_id: bigint
  project_id: bigint
  update_user: bigint
}

"""
order by sum() on columns of table "task"
"""
input task_sum_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""
columns and relationships of "task_timer"
"""
type task_timer {
  description: String
  id: bigint!
  location: String
  started_at: timestamptz!
  stopped_at: timestamptz

  """An object relationship"""
  task: task
  task_id: bigint
  time_entry_id: bigint

  """An object relationship"""
  user: users
  user_id: bigint
}

"""
aggregated selection of "task_timer"
"""
type task_timer_aggregate {
  aggregate: task_timer_aggregate_fields
  nodes: [task_timer!]!
}

"""
aggregate fields of "task_timer"
"""
type task_timer_aggregate_fields {
  avg: task_timer_avg_fields
  count(columns: [task_timer_select_column!], distinct: Boolean): Int!
  max: task_timer_max_fields
  min: task_timer_min_fields
  stddev: task_timer_stddev_fields
  stddev_pop: task_timer_stddev_pop_fields
  stddev_samp: task_timer_stddev_samp_fields
  sum: task_timer_sum_fields
  var_pop: task_timer_var_pop_fields
  var_samp: task_timer_var_samp_fields
  variance: task_timer_variance_fields
}

"""
order by aggregate values of table "task_timer"
"""
input task_timer_aggregate_order_by {
  avg: task_timer_avg_order_by
  count: order_by
  max: task_timer_max_order_by
  min: task_timer_min_order_by
  stddev: task_timer_stddev_order_by
  stddev_pop: task_timer_stddev_pop_order_by
  stddev_samp: task_timer_stddev_samp_order_by
  sum: task_timer_sum_order_by
  var_pop: task_timer_var_pop_order_by
  var_samp: task_timer_var_samp_order_by
  variance: task_timer_variance_order_by
}

"""
input type for inserting array relation for remote table "task_timer"
"""
input task_timer_arr_rel_insert_input {
  data: [task_timer_insert_input!]!

  """on conflict condition"""
  on_conflict: task_timer_on_conflict
}

"""aggregate avg on columns"""
type task_timer_avg_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "task_timer"
"""
input task_timer_avg_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "task_timer". All fields are combined with a logical 'AND'.
"""
input task_timer_bool_exp {
  _and: [task_timer_bool_exp!]
  _not: task_timer_bool_exp
  _or: [task_timer_bool_exp!]
  description: String_comparison_exp
  id: bigint_comparison_exp
  location: String_comparison_exp
  started_at: timestamptz_comparison_exp
  stopped_at: timestamptz_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
  time_entry_id: bigint_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "task_timer"
"""
enum task_timer_constraint {
  """unique or primary key constraint"""
  task_timer_pkey
}

"""
input type for incrementing numeric columns in table "task_timer"
"""
input task_timer_inc_input {
  id: bigint
  task_id: bigint
  time_entry_id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "task_timer"
"""
input task_timer_insert_input {
  description: String
  id: bigint
  location: String
  started_at: timestamptz
  stopped_at: timestamptz
  task: task_obj_rel_insert_input
  task_id: bigint
  time_entry_id: bigint
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type task_timer_max_fields {
  description: String
  id: bigint
  location: String
  started_at: timestamptz
  stopped_at: timestamptz
  task_id: bigint
  time_entry_id: bigint
  user_id: bigint
}

"""
order by max() on columns of table "task_timer"
"""
input task_timer_max_order_by {
  description: order_by
  id: order_by
  location: order_by
  started_at: order_by
  stopped_at: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type task_timer_min_fields {
  description: String
  id: bigint
  location: String
  started_at: timestamptz
  stopped_at: timestamptz
  task_id: bigint
  time_entry_id: bigint
  user_id: bigint
}

"""
order by min() on columns of table "task_timer"
"""
input task_timer_min_order_by {
  description: order_by
  id: order_by
  location: order_by
  started_at: order_by
  stopped_at: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "task_timer"
"""
type task_timer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_timer!]!
}

"""
on conflict condition type for table "task_timer"
"""
input task_timer_on_conflict {
  constraint: task_timer_constraint!
  update_columns: [task_timer_update_column!]! = []
  where: task_timer_bool_exp
}

"""Ordering options when selecting data from "task_timer"."""
input task_timer_order_by {
  description: order_by
  id: order_by
  location: order_by
  started_at: order_by
  stopped_at: order_by
  task: task_order_by
  task_id: order_by
  time_entry_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: task_timer"""
input task_timer_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task_timer"
"""
enum task_timer_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  started_at

  """column name"""
  stopped_at

  """column name"""
  task_id

  """column name"""
  time_entry_id

  """column name"""
  user_id
}

"""
input type for updating data in table "task_timer"
"""
input task_timer_set_input {
  description: String
  id: bigint
  location: String
  started_at: timestamptz
  stopped_at: timestamptz
  task_id: bigint
  time_entry_id: bigint
  user_id: bigint
}

"""aggregate stddev on columns"""
type task_timer_stddev_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "task_timer"
"""
input task_timer_stddev_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_timer_stddev_pop_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "task_timer"
"""
input task_timer_stddev_pop_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_timer_stddev_samp_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "task_timer"
"""
input task_timer_stddev_samp_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type task_timer_sum_fields {
  id: bigint
  task_id: bigint
  time_entry_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "task_timer"
"""
input task_timer_sum_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""
update columns of table "task_timer"
"""
enum task_timer_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  started_at

  """column name"""
  stopped_at

  """column name"""
  task_id

  """column name"""
  time_entry_id

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type task_timer_var_pop_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "task_timer"
"""
input task_timer_var_pop_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type task_timer_var_samp_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "task_timer"
"""
input task_timer_var_samp_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type task_timer_variance_fields {
  id: Float
  task_id: Float
  time_entry_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "task_timer"
"""
input task_timer_variance_order_by {
  id: order_by
  task_id: order_by
  time_entry_id: order_by
  user_id: order_by
}

"""
update columns of table "task"
"""
enum task_update_column {
  """column name"""
  budget

  """column name"""
  category_id

  """column name"""
  completed

  """column name"""
  create_user

  """column name"""
  created

  """column name"""
  hourly_rate

  """column name"""
  id

  """column name"""
  lowercase_name

  """column name"""
  milestone_id

  """column name"""
  modified

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  project_id

  """column name"""
  reminder_sent

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  target_date

  """column name"""
  update_user

  """column name"""
  visibility
}

"""
columns and relationships of "task_user"
"""
type task_user {
  id: bigint!

  """An object relationship"""
  task: task
  task_id: bigint

  """An object relationship"""
  user: users!
  user_id: bigint!
}

"""
aggregated selection of "task_user"
"""
type task_user_aggregate {
  aggregate: task_user_aggregate_fields
  nodes: [task_user!]!
}

"""
aggregate fields of "task_user"
"""
type task_user_aggregate_fields {
  avg: task_user_avg_fields
  count(columns: [task_user_select_column!], distinct: Boolean): Int!
  max: task_user_max_fields
  min: task_user_min_fields
  stddev: task_user_stddev_fields
  stddev_pop: task_user_stddev_pop_fields
  stddev_samp: task_user_stddev_samp_fields
  sum: task_user_sum_fields
  var_pop: task_user_var_pop_fields
  var_samp: task_user_var_samp_fields
  variance: task_user_variance_fields
}

"""
order by aggregate values of table "task_user"
"""
input task_user_aggregate_order_by {
  avg: task_user_avg_order_by
  count: order_by
  max: task_user_max_order_by
  min: task_user_min_order_by
  stddev: task_user_stddev_order_by
  stddev_pop: task_user_stddev_pop_order_by
  stddev_samp: task_user_stddev_samp_order_by
  sum: task_user_sum_order_by
  var_pop: task_user_var_pop_order_by
  var_samp: task_user_var_samp_order_by
  variance: task_user_variance_order_by
}

"""
input type for inserting array relation for remote table "task_user"
"""
input task_user_arr_rel_insert_input {
  data: [task_user_insert_input!]!

  """on conflict condition"""
  on_conflict: task_user_on_conflict
}

"""aggregate avg on columns"""
type task_user_avg_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "task_user"
"""
input task_user_avg_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "task_user". All fields are combined with a logical 'AND'.
"""
input task_user_bool_exp {
  _and: [task_user_bool_exp!]
  _not: task_user_bool_exp
  _or: [task_user_bool_exp!]
  id: bigint_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "task_user"
"""
enum task_user_constraint {
  """unique or primary key constraint"""
  task_user_pkey
}

"""
input type for incrementing numeric columns in table "task_user"
"""
input task_user_inc_input {
  id: bigint
  task_id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "task_user"
"""
input task_user_insert_input {
  id: bigint
  task: task_obj_rel_insert_input
  task_id: bigint
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""aggregate max on columns"""
type task_user_max_fields {
  id: bigint
  task_id: bigint
  user_id: bigint
}

"""
order by max() on columns of table "task_user"
"""
input task_user_max_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type task_user_min_fields {
  id: bigint
  task_id: bigint
  user_id: bigint
}

"""
order by min() on columns of table "task_user"
"""
input task_user_min_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "task_user"
"""
type task_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task_user!]!
}

"""
on conflict condition type for table "task_user"
"""
input task_user_on_conflict {
  constraint: task_user_constraint!
  update_columns: [task_user_update_column!]! = []
  where: task_user_bool_exp
}

"""Ordering options when selecting data from "task_user"."""
input task_user_order_by {
  id: order_by
  task: task_order_by
  task_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: task_user"""
input task_user_pk_columns_input {
  id: bigint!
}

"""
select columns of table "task_user"
"""
enum task_user_select_column {
  """column name"""
  id

  """column name"""
  task_id

  """column name"""
  user_id
}

"""
input type for updating data in table "task_user"
"""
input task_user_set_input {
  id: bigint
  task_id: bigint
  user_id: bigint
}

"""aggregate stddev on columns"""
type task_user_stddev_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "task_user"
"""
input task_user_stddev_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type task_user_stddev_pop_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "task_user"
"""
input task_user_stddev_pop_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type task_user_stddev_samp_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "task_user"
"""
input task_user_stddev_samp_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type task_user_sum_fields {
  id: bigint
  task_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "task_user"
"""
input task_user_sum_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""
update columns of table "task_user"
"""
enum task_user_update_column {
  """column name"""
  id

  """column name"""
  task_id

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type task_user_var_pop_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "task_user"
"""
input task_user_var_pop_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type task_user_var_samp_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "task_user"
"""
input task_user_var_samp_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type task_user_variance_fields {
  id: Float
  task_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "task_user"
"""
input task_user_variance_order_by {
  id: order_by
  task_id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type task_var_pop_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by var_pop() on columns of table "task"
"""
input task_var_pop_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate var_samp on columns"""
type task_var_samp_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by var_samp() on columns of table "task"
"""
input task_var_samp_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""aggregate variance on columns"""
type task_variance_fields {
  budget: Float
  category_id: Float
  create_user: Float
  hourly_rate: Float
  id: Float
  milestone_id: Float
  project_id: Float
  update_user: Float
}

"""
order by variance() on columns of table "task"
"""
input task_variance_order_by {
  budget: order_by
  category_id: order_by
  create_user: order_by
  hourly_rate: order_by
  id: order_by
  milestone_id: order_by
  project_id: order_by
  update_user: order_by
}

"""
columns and relationships of "time_entry"
"""
type time_entry {
  comment: String
  created: timestamptz
  entry_date: timestamp!
  entry_hours: float8!
  entry_user: bigint!
  id: bigint!
  location: String
  modified: timestamptz!

  """An object relationship"""
  project: project!
  project_id: bigint!

  """An object relationship"""
  task: task!
  task_id: bigint!

  """An array relationship"""
  task_timers(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): [task_timer!]!

  """An aggregate relationship"""
  task_timers_aggregate(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): task_timer_aggregate!

  """An object relationship"""
  user: users!
}

"""
aggregated selection of "time_entry"
"""
type time_entry_aggregate {
  aggregate: time_entry_aggregate_fields
  nodes: [time_entry!]!
}

"""
aggregate fields of "time_entry"
"""
type time_entry_aggregate_fields {
  avg: time_entry_avg_fields
  count(columns: [time_entry_select_column!], distinct: Boolean): Int!
  max: time_entry_max_fields
  min: time_entry_min_fields
  stddev: time_entry_stddev_fields
  stddev_pop: time_entry_stddev_pop_fields
  stddev_samp: time_entry_stddev_samp_fields
  sum: time_entry_sum_fields
  var_pop: time_entry_var_pop_fields
  var_samp: time_entry_var_samp_fields
  variance: time_entry_variance_fields
}

"""
order by aggregate values of table "time_entry"
"""
input time_entry_aggregate_order_by {
  avg: time_entry_avg_order_by
  count: order_by
  max: time_entry_max_order_by
  min: time_entry_min_order_by
  stddev: time_entry_stddev_order_by
  stddev_pop: time_entry_stddev_pop_order_by
  stddev_samp: time_entry_stddev_samp_order_by
  sum: time_entry_sum_order_by
  var_pop: time_entry_var_pop_order_by
  var_samp: time_entry_var_samp_order_by
  variance: time_entry_variance_order_by
}

"""
input type for inserting array relation for remote table "time_entry"
"""
input time_entry_arr_rel_insert_input {
  data: [time_entry_insert_input!]!

  """on conflict condition"""
  on_conflict: time_entry_on_conflict
}

"""aggregate avg on columns"""
type time_entry_avg_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by avg() on columns of table "time_entry"
"""
input time_entry_avg_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""
Boolean expression to filter rows from the table "time_entry". All fields are combined with a logical 'AND'.
"""
input time_entry_bool_exp {
  _and: [time_entry_bool_exp!]
  _not: time_entry_bool_exp
  _or: [time_entry_bool_exp!]
  comment: String_comparison_exp
  created: timestamptz_comparison_exp
  entry_date: timestamp_comparison_exp
  entry_hours: float8_comparison_exp
  entry_user: bigint_comparison_exp
  id: bigint_comparison_exp
  location: String_comparison_exp
  modified: timestamptz_comparison_exp
  project: project_bool_exp
  project_id: bigint_comparison_exp
  task: task_bool_exp
  task_id: bigint_comparison_exp
  task_timers: task_timer_bool_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "time_entry"
"""
enum time_entry_constraint {
  """unique or primary key constraint"""
  idx_1943112_primary
}

"""
input type for incrementing numeric columns in table "time_entry"
"""
input time_entry_inc_input {
  entry_hours: float8
  entry_user: bigint
  id: bigint
  project_id: bigint
  task_id: bigint
}

"""
input type for inserting data into table "time_entry"
"""
input time_entry_insert_input {
  comment: String
  created: timestamptz
  entry_date: timestamp
  entry_hours: float8
  entry_user: bigint
  id: bigint
  location: String
  modified: timestamptz
  project: project_obj_rel_insert_input
  project_id: bigint
  task: task_obj_rel_insert_input
  task_id: bigint
  task_timers: task_timer_arr_rel_insert_input
  user: users_obj_rel_insert_input
}

"""
columns and relationships of "time_entry_location"
"""
type time_entry_location {
  account_id: bigint
  id: bigint!
  location: String!
}

"""
aggregated selection of "time_entry_location"
"""
type time_entry_location_aggregate {
  aggregate: time_entry_location_aggregate_fields
  nodes: [time_entry_location!]!
}

"""
aggregate fields of "time_entry_location"
"""
type time_entry_location_aggregate_fields {
  avg: time_entry_location_avg_fields
  count(columns: [time_entry_location_select_column!], distinct: Boolean): Int!
  max: time_entry_location_max_fields
  min: time_entry_location_min_fields
  stddev: time_entry_location_stddev_fields
  stddev_pop: time_entry_location_stddev_pop_fields
  stddev_samp: time_entry_location_stddev_samp_fields
  sum: time_entry_location_sum_fields
  var_pop: time_entry_location_var_pop_fields
  var_samp: time_entry_location_var_samp_fields
  variance: time_entry_location_variance_fields
}

"""
order by aggregate values of table "time_entry_location"
"""
input time_entry_location_aggregate_order_by {
  avg: time_entry_location_avg_order_by
  count: order_by
  max: time_entry_location_max_order_by
  min: time_entry_location_min_order_by
  stddev: time_entry_location_stddev_order_by
  stddev_pop: time_entry_location_stddev_pop_order_by
  stddev_samp: time_entry_location_stddev_samp_order_by
  sum: time_entry_location_sum_order_by
  var_pop: time_entry_location_var_pop_order_by
  var_samp: time_entry_location_var_samp_order_by
  variance: time_entry_location_variance_order_by
}

"""
input type for inserting array relation for remote table "time_entry_location"
"""
input time_entry_location_arr_rel_insert_input {
  data: [time_entry_location_insert_input!]!

  """on conflict condition"""
  on_conflict: time_entry_location_on_conflict
}

"""aggregate avg on columns"""
type time_entry_location_avg_fields {
  account_id: Float
  id: Float
}

"""
order by avg() on columns of table "time_entry_location"
"""
input time_entry_location_avg_order_by {
  account_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "time_entry_location". All fields are combined with a logical 'AND'.
"""
input time_entry_location_bool_exp {
  _and: [time_entry_location_bool_exp!]
  _not: time_entry_location_bool_exp
  _or: [time_entry_location_bool_exp!]
  account_id: bigint_comparison_exp
  id: bigint_comparison_exp
  location: String_comparison_exp
}

"""
unique or primary key constraints on table "time_entry_location"
"""
enum time_entry_location_constraint {
  """unique or primary key constraint"""
  time_entry_location_pkey

  """unique or primary key constraint"""
  time_location_account_loc_indx
}

"""
input type for incrementing numeric columns in table "time_entry_location"
"""
input time_entry_location_inc_input {
  account_id: bigint
  id: bigint
}

"""
input type for inserting data into table "time_entry_location"
"""
input time_entry_location_insert_input {
  account_id: bigint
  id: bigint
  location: String
}

"""aggregate max on columns"""
type time_entry_location_max_fields {
  account_id: bigint
  id: bigint
  location: String
}

"""
order by max() on columns of table "time_entry_location"
"""
input time_entry_location_max_order_by {
  account_id: order_by
  id: order_by
  location: order_by
}

"""aggregate min on columns"""
type time_entry_location_min_fields {
  account_id: bigint
  id: bigint
  location: String
}

"""
order by min() on columns of table "time_entry_location"
"""
input time_entry_location_min_order_by {
  account_id: order_by
  id: order_by
  location: order_by
}

"""
response of any mutation on the table "time_entry_location"
"""
type time_entry_location_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [time_entry_location!]!
}

"""
on conflict condition type for table "time_entry_location"
"""
input time_entry_location_on_conflict {
  constraint: time_entry_location_constraint!
  update_columns: [time_entry_location_update_column!]! = []
  where: time_entry_location_bool_exp
}

"""Ordering options when selecting data from "time_entry_location"."""
input time_entry_location_order_by {
  account_id: order_by
  id: order_by
  location: order_by
}

"""primary key columns input for table: time_entry_location"""
input time_entry_location_pk_columns_input {
  id: bigint!
}

"""
select columns of table "time_entry_location"
"""
enum time_entry_location_select_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  location
}

"""
input type for updating data in table "time_entry_location"
"""
input time_entry_location_set_input {
  account_id: bigint
  id: bigint
  location: String
}

"""aggregate stddev on columns"""
type time_entry_location_stddev_fields {
  account_id: Float
  id: Float
}

"""
order by stddev() on columns of table "time_entry_location"
"""
input time_entry_location_stddev_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type time_entry_location_stddev_pop_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "time_entry_location"
"""
input time_entry_location_stddev_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type time_entry_location_stddev_samp_fields {
  account_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "time_entry_location"
"""
input time_entry_location_stddev_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type time_entry_location_sum_fields {
  account_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "time_entry_location"
"""
input time_entry_location_sum_order_by {
  account_id: order_by
  id: order_by
}

"""
update columns of table "time_entry_location"
"""
enum time_entry_location_update_column {
  """column name"""
  account_id

  """column name"""
  id

  """column name"""
  location
}

"""aggregate var_pop on columns"""
type time_entry_location_var_pop_fields {
  account_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "time_entry_location"
"""
input time_entry_location_var_pop_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type time_entry_location_var_samp_fields {
  account_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "time_entry_location"
"""
input time_entry_location_var_samp_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type time_entry_location_variance_fields {
  account_id: Float
  id: Float
}

"""
order by variance() on columns of table "time_entry_location"
"""
input time_entry_location_variance_order_by {
  account_id: order_by
  id: order_by
}

"""aggregate max on columns"""
type time_entry_max_fields {
  comment: String
  created: timestamptz
  entry_date: timestamp
  entry_hours: float8
  entry_user: bigint
  id: bigint
  location: String
  modified: timestamptz
  project_id: bigint
  task_id: bigint
}

"""
order by max() on columns of table "time_entry"
"""
input time_entry_max_order_by {
  comment: order_by
  created: order_by
  entry_date: order_by
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  location: order_by
  modified: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate min on columns"""
type time_entry_min_fields {
  comment: String
  created: timestamptz
  entry_date: timestamp
  entry_hours: float8
  entry_user: bigint
  id: bigint
  location: String
  modified: timestamptz
  project_id: bigint
  task_id: bigint
}

"""
order by min() on columns of table "time_entry"
"""
input time_entry_min_order_by {
  comment: order_by
  created: order_by
  entry_date: order_by
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  location: order_by
  modified: order_by
  project_id: order_by
  task_id: order_by
}

"""
response of any mutation on the table "time_entry"
"""
type time_entry_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [time_entry!]!
}

"""
on conflict condition type for table "time_entry"
"""
input time_entry_on_conflict {
  constraint: time_entry_constraint!
  update_columns: [time_entry_update_column!]! = []
  where: time_entry_bool_exp
}

"""Ordering options when selecting data from "time_entry"."""
input time_entry_order_by {
  comment: order_by
  created: order_by
  entry_date: order_by
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  location: order_by
  modified: order_by
  project: project_order_by
  project_id: order_by
  task: task_order_by
  task_id: order_by
  task_timers_aggregate: task_timer_aggregate_order_by
  user: users_order_by
}

"""primary key columns input for table: time_entry"""
input time_entry_pk_columns_input {
  id: bigint!
}

"""
select columns of table "time_entry"
"""
enum time_entry_select_column {
  """column name"""
  comment

  """column name"""
  created

  """column name"""
  entry_date

  """column name"""
  entry_hours

  """column name"""
  entry_user

  """column name"""
  id

  """column name"""
  location

  """column name"""
  modified

  """column name"""
  project_id

  """column name"""
  task_id
}

"""
input type for updating data in table "time_entry"
"""
input time_entry_set_input {
  comment: String
  created: timestamptz
  entry_date: timestamp
  entry_hours: float8
  entry_user: bigint
  id: bigint
  location: String
  modified: timestamptz
  project_id: bigint
  task_id: bigint
}

"""aggregate stddev on columns"""
type time_entry_stddev_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by stddev() on columns of table "time_entry"
"""
input time_entry_stddev_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate stddev_pop on columns"""
type time_entry_stddev_pop_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by stddev_pop() on columns of table "time_entry"
"""
input time_entry_stddev_pop_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate stddev_samp on columns"""
type time_entry_stddev_samp_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by stddev_samp() on columns of table "time_entry"
"""
input time_entry_stddev_samp_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate sum on columns"""
type time_entry_sum_fields {
  entry_hours: float8
  entry_user: bigint
  id: bigint
  project_id: bigint
  task_id: bigint
}

"""
order by sum() on columns of table "time_entry"
"""
input time_entry_sum_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""
update columns of table "time_entry"
"""
enum time_entry_update_column {
  """column name"""
  comment

  """column name"""
  created

  """column name"""
  entry_date

  """column name"""
  entry_hours

  """column name"""
  entry_user

  """column name"""
  id

  """column name"""
  location

  """column name"""
  modified

  """column name"""
  project_id

  """column name"""
  task_id
}

"""aggregate var_pop on columns"""
type time_entry_var_pop_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by var_pop() on columns of table "time_entry"
"""
input time_entry_var_pop_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate var_samp on columns"""
type time_entry_var_samp_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by var_samp() on columns of table "time_entry"
"""
input time_entry_var_samp_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

"""aggregate variance on columns"""
type time_entry_variance_fields {
  entry_hours: Float
  entry_user: Float
  id: Float
  project_id: Float
  task_id: Float
}

"""
order by variance() on columns of table "time_entry"
"""
input time_entry_variance_order_by {
  entry_hours: order_by
  entry_user: order_by
  id: order_by
  project_id: order_by
  task_id: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token"
"""
type token {
  access: String!

  """An object relationship"""
  account_user: account_user!
  account_user_id: bigint!
  code: String!
  created_at: timestamptz!
  data(
    """JSON select path"""
    path: String
  ): jsonb!
  expires_at: timestamptz!
  id: bigint!

  """An object relationship"""
  integration: integration!
  integration_id: String!
  name: String!
  refresh: String!
}

"""
aggregated selection of "token"
"""
type token_aggregate {
  aggregate: token_aggregate_fields
  nodes: [token!]!
}

"""
aggregate fields of "token"
"""
type token_aggregate_fields {
  avg: token_avg_fields
  count(columns: [token_select_column!], distinct: Boolean): Int!
  max: token_max_fields
  min: token_min_fields
  stddev: token_stddev_fields
  stddev_pop: token_stddev_pop_fields
  stddev_samp: token_stddev_samp_fields
  sum: token_sum_fields
  var_pop: token_var_pop_fields
  var_samp: token_var_samp_fields
  variance: token_variance_fields
}

"""
order by aggregate values of table "token"
"""
input token_aggregate_order_by {
  avg: token_avg_order_by
  count: order_by
  max: token_max_order_by
  min: token_min_order_by
  stddev: token_stddev_order_by
  stddev_pop: token_stddev_pop_order_by
  stddev_samp: token_stddev_samp_order_by
  sum: token_sum_order_by
  var_pop: token_var_pop_order_by
  var_samp: token_var_samp_order_by
  variance: token_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input token_append_input {
  data: jsonb
}

"""
input type for inserting array relation for remote table "token"
"""
input token_arr_rel_insert_input {
  data: [token_insert_input!]!

  """on conflict condition"""
  on_conflict: token_on_conflict
}

"""aggregate avg on columns"""
type token_avg_fields {
  account_user_id: Float
  id: Float
}

"""
order by avg() on columns of table "token"
"""
input token_avg_order_by {
  account_user_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "token". All fields are combined with a logical 'AND'.
"""
input token_bool_exp {
  _and: [token_bool_exp!]
  _not: token_bool_exp
  _or: [token_bool_exp!]
  access: String_comparison_exp
  account_user: account_user_bool_exp
  account_user_id: bigint_comparison_exp
  code: String_comparison_exp
  created_at: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  expires_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  integration: integration_bool_exp
  integration_id: String_comparison_exp
  name: String_comparison_exp
  refresh: String_comparison_exp
}

"""
unique or primary key constraints on table "token"
"""
enum token_constraint {
  """unique or primary key constraint"""
  token_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input token_delete_at_path_input {
  data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input token_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input token_delete_key_input {
  data: String
}

"""
input type for incrementing numeric columns in table "token"
"""
input token_inc_input {
  account_user_id: bigint
  id: bigint
}

"""
input type for inserting data into table "token"
"""
input token_insert_input {
  access: String
  account_user: account_user_obj_rel_insert_input
  account_user_id: bigint
  code: String
  created_at: timestamptz
  data: jsonb
  expires_at: timestamptz
  id: bigint
  integration: integration_obj_rel_insert_input
  integration_id: String
  name: String
  refresh: String
}

"""aggregate max on columns"""
type token_max_fields {
  access: String
  account_user_id: bigint
  code: String
  created_at: timestamptz
  expires_at: timestamptz
  id: bigint
  integration_id: String
  name: String
  refresh: String
}

"""
order by max() on columns of table "token"
"""
input token_max_order_by {
  access: order_by
  account_user_id: order_by
  code: order_by
  created_at: order_by
  expires_at: order_by
  id: order_by
  integration_id: order_by
  name: order_by
  refresh: order_by
}

"""aggregate min on columns"""
type token_min_fields {
  access: String
  account_user_id: bigint
  code: String
  created_at: timestamptz
  expires_at: timestamptz
  id: bigint
  integration_id: String
  name: String
  refresh: String
}

"""
order by min() on columns of table "token"
"""
input token_min_order_by {
  access: order_by
  account_user_id: order_by
  code: order_by
  created_at: order_by
  expires_at: order_by
  id: order_by
  integration_id: order_by
  name: order_by
  refresh: order_by
}

"""
response of any mutation on the table "token"
"""
type token_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token!]!
}

"""
on conflict condition type for table "token"
"""
input token_on_conflict {
  constraint: token_constraint!
  update_columns: [token_update_column!]! = []
  where: token_bool_exp
}

"""Ordering options when selecting data from "token"."""
input token_order_by {
  access: order_by
  account_user: account_user_order_by
  account_user_id: order_by
  code: order_by
  created_at: order_by
  data: order_by
  expires_at: order_by
  id: order_by
  integration: integration_order_by
  integration_id: order_by
  name: order_by
  refresh: order_by
}

"""primary key columns input for table: token"""
input token_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input token_prepend_input {
  data: jsonb
}

"""
select columns of table "token"
"""
enum token_select_column {
  """column name"""
  access

  """column name"""
  account_user_id

  """column name"""
  code

  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  integration_id

  """column name"""
  name

  """column name"""
  refresh
}

"""
input type for updating data in table "token"
"""
input token_set_input {
  access: String
  account_user_id: bigint
  code: String
  created_at: timestamptz
  data: jsonb
  expires_at: timestamptz
  id: bigint
  integration_id: String
  name: String
  refresh: String
}

"""aggregate stddev on columns"""
type token_stddev_fields {
  account_user_id: Float
  id: Float
}

"""
order by stddev() on columns of table "token"
"""
input token_stddev_order_by {
  account_user_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type token_stddev_pop_fields {
  account_user_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "token"
"""
input token_stddev_pop_order_by {
  account_user_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type token_stddev_samp_fields {
  account_user_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "token"
"""
input token_stddev_samp_order_by {
  account_user_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type token_sum_fields {
  account_user_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "token"
"""
input token_sum_order_by {
  account_user_id: order_by
  id: order_by
}

"""
update columns of table "token"
"""
enum token_update_column {
  """column name"""
  access

  """column name"""
  account_user_id

  """column name"""
  code

  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  integration_id

  """column name"""
  name

  """column name"""
  refresh
}

"""aggregate var_pop on columns"""
type token_var_pop_fields {
  account_user_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "token"
"""
input token_var_pop_order_by {
  account_user_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type token_var_samp_fields {
  account_user_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "token"
"""
input token_var_samp_order_by {
  account_user_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type token_variance_fields {
  account_user_id: Float
  id: Float
}

"""
order by variance() on columns of table "token"
"""
input token_variance_order_by {
  account_user_id: order_by
  id: order_by
}

"""
columns and relationships of "user_client_access"
"""
type user_client_access {
  client_id: bigint
  role: String
  user_id: bigint
}

"""
aggregated selection of "user_client_access"
"""
type user_client_access_aggregate {
  aggregate: user_client_access_aggregate_fields
  nodes: [user_client_access!]!
}

"""
aggregate fields of "user_client_access"
"""
type user_client_access_aggregate_fields {
  avg: user_client_access_avg_fields
  count(columns: [user_client_access_select_column!], distinct: Boolean): Int!
  max: user_client_access_max_fields
  min: user_client_access_min_fields
  stddev: user_client_access_stddev_fields
  stddev_pop: user_client_access_stddev_pop_fields
  stddev_samp: user_client_access_stddev_samp_fields
  sum: user_client_access_sum_fields
  var_pop: user_client_access_var_pop_fields
  var_samp: user_client_access_var_samp_fields
  variance: user_client_access_variance_fields
}

"""
order by aggregate values of table "user_client_access"
"""
input user_client_access_aggregate_order_by {
  avg: user_client_access_avg_order_by
  count: order_by
  max: user_client_access_max_order_by
  min: user_client_access_min_order_by
  stddev: user_client_access_stddev_order_by
  stddev_pop: user_client_access_stddev_pop_order_by
  stddev_samp: user_client_access_stddev_samp_order_by
  sum: user_client_access_sum_order_by
  var_pop: user_client_access_var_pop_order_by
  var_samp: user_client_access_var_samp_order_by
  variance: user_client_access_variance_order_by
}

"""
input type for inserting array relation for remote table "user_client_access"
"""
input user_client_access_arr_rel_insert_input {
  data: [user_client_access_insert_input!]!
}

"""aggregate avg on columns"""
type user_client_access_avg_fields {
  client_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "user_client_access"
"""
input user_client_access_avg_order_by {
  client_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "user_client_access". All fields are combined with a logical 'AND'.
"""
input user_client_access_bool_exp {
  _and: [user_client_access_bool_exp!]
  _not: user_client_access_bool_exp
  _or: [user_client_access_bool_exp!]
  client_id: bigint_comparison_exp
  role: String_comparison_exp
  user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "user_client_access"
"""
input user_client_access_insert_input {
  client_id: bigint
  role: String
  user_id: bigint
}

"""aggregate max on columns"""
type user_client_access_max_fields {
  client_id: bigint
  role: String
  user_id: bigint
}

"""
order by max() on columns of table "user_client_access"
"""
input user_client_access_max_order_by {
  client_id: order_by
  role: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_client_access_min_fields {
  client_id: bigint
  role: String
  user_id: bigint
}

"""
order by min() on columns of table "user_client_access"
"""
input user_client_access_min_order_by {
  client_id: order_by
  role: order_by
  user_id: order_by
}

"""
input type for inserting object relation for remote table "user_client_access"
"""
input user_client_access_obj_rel_insert_input {
  data: user_client_access_insert_input!
}

"""Ordering options when selecting data from "user_client_access"."""
input user_client_access_order_by {
  client_id: order_by
  role: order_by
  user_id: order_by
}

"""
select columns of table "user_client_access"
"""
enum user_client_access_select_column {
  """column name"""
  client_id

  """column name"""
  role

  """column name"""
  user_id
}

"""aggregate stddev on columns"""
type user_client_access_stddev_fields {
  client_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "user_client_access"
"""
input user_client_access_stddev_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type user_client_access_stddev_pop_fields {
  client_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "user_client_access"
"""
input user_client_access_stddev_pop_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type user_client_access_stddev_samp_fields {
  client_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "user_client_access"
"""
input user_client_access_stddev_samp_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type user_client_access_sum_fields {
  client_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "user_client_access"
"""
input user_client_access_sum_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate var_pop on columns"""
type user_client_access_var_pop_fields {
  client_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "user_client_access"
"""
input user_client_access_var_pop_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type user_client_access_var_samp_fields {
  client_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "user_client_access"
"""
input user_client_access_var_samp_order_by {
  client_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type user_client_access_variance_fields {
  client_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "user_client_access"
"""
input user_client_access_variance_order_by {
  client_id: order_by
  user_id: order_by
}

"""
columns and relationships of "user_temp"
"""
type user_temp {
  activation_code: String!
  company_name: String
  country_id: Int
  created: timestamptz!
  email: String!
  first_name: String
  id: bigint!
  last_name: String
  password: String!
  source: String
  subdomain: String!
  timezone: String
  user_name: String!
}

"""
aggregated selection of "user_temp"
"""
type user_temp_aggregate {
  aggregate: user_temp_aggregate_fields
  nodes: [user_temp!]!
}

"""
aggregate fields of "user_temp"
"""
type user_temp_aggregate_fields {
  avg: user_temp_avg_fields
  count(columns: [user_temp_select_column!], distinct: Boolean): Int!
  max: user_temp_max_fields
  min: user_temp_min_fields
  stddev: user_temp_stddev_fields
  stddev_pop: user_temp_stddev_pop_fields
  stddev_samp: user_temp_stddev_samp_fields
  sum: user_temp_sum_fields
  var_pop: user_temp_var_pop_fields
  var_samp: user_temp_var_samp_fields
  variance: user_temp_variance_fields
}

"""aggregate avg on columns"""
type user_temp_avg_fields {
  country_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "user_temp". All fields are combined with a logical 'AND'.
"""
input user_temp_bool_exp {
  _and: [user_temp_bool_exp!]
  _not: user_temp_bool_exp
  _or: [user_temp_bool_exp!]
  activation_code: String_comparison_exp
  company_name: String_comparison_exp
  country_id: Int_comparison_exp
  created: timestamptz_comparison_exp
  email: String_comparison_exp
  first_name: String_comparison_exp
  id: bigint_comparison_exp
  last_name: String_comparison_exp
  password: String_comparison_exp
  source: String_comparison_exp
  subdomain: String_comparison_exp
  timezone: String_comparison_exp
  user_name: String_comparison_exp
}

"""
unique or primary key constraints on table "user_temp"
"""
enum user_temp_constraint {
  """unique or primary key constraint"""
  idx_1943136_primary
}

"""
input type for incrementing numeric columns in table "user_temp"
"""
input user_temp_inc_input {
  country_id: Int
  id: bigint
}

"""
input type for inserting data into table "user_temp"
"""
input user_temp_insert_input {
  activation_code: String
  company_name: String
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  id: bigint
  last_name: String
  password: String
  source: String
  subdomain: String
  timezone: String
  user_name: String
}

"""aggregate max on columns"""
type user_temp_max_fields {
  activation_code: String
  company_name: String
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  id: bigint
  last_name: String
  password: String
  source: String
  subdomain: String
  timezone: String
  user_name: String
}

"""aggregate min on columns"""
type user_temp_min_fields {
  activation_code: String
  company_name: String
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  id: bigint
  last_name: String
  password: String
  source: String
  subdomain: String
  timezone: String
  user_name: String
}

"""
response of any mutation on the table "user_temp"
"""
type user_temp_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_temp!]!
}

"""
on conflict condition type for table "user_temp"
"""
input user_temp_on_conflict {
  constraint: user_temp_constraint!
  update_columns: [user_temp_update_column!]! = []
  where: user_temp_bool_exp
}

"""Ordering options when selecting data from "user_temp"."""
input user_temp_order_by {
  activation_code: order_by
  company_name: order_by
  country_id: order_by
  created: order_by
  email: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  password: order_by
  source: order_by
  subdomain: order_by
  timezone: order_by
  user_name: order_by
}

"""primary key columns input for table: user_temp"""
input user_temp_pk_columns_input {
  id: bigint!
}

"""
select columns of table "user_temp"
"""
enum user_temp_select_column {
  """column name"""
  activation_code

  """column name"""
  company_name

  """column name"""
  country_id

  """column name"""
  created

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  password

  """column name"""
  source

  """column name"""
  subdomain

  """column name"""
  timezone

  """column name"""
  user_name
}

"""
input type for updating data in table "user_temp"
"""
input user_temp_set_input {
  activation_code: String
  company_name: String
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  id: bigint
  last_name: String
  password: String
  source: String
  subdomain: String
  timezone: String
  user_name: String
}

"""aggregate stddev on columns"""
type user_temp_stddev_fields {
  country_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_temp_stddev_pop_fields {
  country_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_temp_stddev_samp_fields {
  country_id: Float
  id: Float
}

"""aggregate sum on columns"""
type user_temp_sum_fields {
  country_id: Int
  id: bigint
}

"""
update columns of table "user_temp"
"""
enum user_temp_update_column {
  """column name"""
  activation_code

  """column name"""
  company_name

  """column name"""
  country_id

  """column name"""
  created

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  password

  """column name"""
  source

  """column name"""
  subdomain

  """column name"""
  timezone

  """column name"""
  user_name
}

"""aggregate var_pop on columns"""
type user_temp_var_pop_fields {
  country_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type user_temp_var_samp_fields {
  country_id: Float
  id: Float
}

"""aggregate variance on columns"""
type user_temp_variance_fields {
  country_id: Float
  id: Float
}

"""
columns and relationships of "users"
"""
type users {
  """An array relationship"""
  account_users(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): [account_user!]!

  """An aggregate relationship"""
  account_users_aggregate(
    """distinct select on columns"""
    distinct_on: [account_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_user_order_by!]

    """filter the rows returned"""
    where: account_user_bool_exp
  ): account_user_aggregate!

  """An array relationship"""
  availabilities(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): [availability!]!

  """An aggregate relationship"""
  availabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [availability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [availability_order_by!]

    """filter the rows returned"""
    where: availability_bool_exp
  ): availability_aggregate!
  banned: Boolean!
  country_id: Int
  created: timestamptz

  """An array relationship"""
  created_comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  created_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """An array relationship"""
  created_files(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): [file!]!

  """An aggregate relationship"""
  created_files_aggregate(
    """distinct select on columns"""
    distinct_on: [file_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [file_order_by!]

    """filter the rows returned"""
    where: file_bool_exp
  ): file_aggregate!

  """An array relationship"""
  created_forms(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): [form!]!

  """An aggregate relationship"""
  created_forms_aggregate(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): form_aggregate!

  """An array relationship"""
  created_projects(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """An aggregate relationship"""
  created_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """An array relationship"""
  created_task_comments(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): [task_comment!]!

  """An aggregate relationship"""
  created_task_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [task_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_comment_order_by!]

    """filter the rows returned"""
    where: task_comment_bool_exp
  ): task_comment_aggregate!

  """An array relationship"""
  created_tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """An aggregate relationship"""
  created_tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!
  email: String!
  first_name: String
  forgotten_password_code: String
  full_name: String
  id: bigint!
  last_name: String
  last_visit: timestamptz
  login_count: Int!
  lowercase_email: String
  lowercase_user_name: String
  modified: timestamptz!
  notes: String

  """An array relationship"""
  owned_accounts(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """An aggregate relationship"""
  owned_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!
  password: String!
  phone: String
  role: String!

  """An array relationship"""
  task_timers(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): [task_timer!]!

  """An aggregate relationship"""
  task_timers_aggregate(
    """distinct select on columns"""
    distinct_on: [task_timer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_timer_order_by!]

    """filter the rows returned"""
    where: task_timer_bool_exp
  ): task_timer_aggregate!

  """An array relationship"""
  task_users(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): [task_user!]!

  """An aggregate relationship"""
  task_users_aggregate(
    """distinct select on columns"""
    distinct_on: [task_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_user_order_by!]

    """filter the rows returned"""
    where: task_user_bool_exp
  ): task_user_aggregate!

  """An array relationship"""
  time_entries(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): [time_entry!]!

  """An aggregate relationship"""
  time_entries_aggregate(
    """distinct select on columns"""
    distinct_on: [time_entry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [time_entry_order_by!]

    """filter the rows returned"""
    where: time_entry_bool_exp
  ): time_entry_aggregate!
  time_entry_location: String
  timezone: String

  """An array relationship"""
  updated_forms(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): [form!]!

  """An aggregate relationship"""
  updated_forms_aggregate(
    """distinct select on columns"""
    distinct_on: [form_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [form_order_by!]

    """filter the rows returned"""
    where: form_bool_exp
  ): form_aggregate!

  """An array relationship"""
  updated_messages(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """An aggregate relationship"""
  updated_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): message_aggregate!

  """An array relationship"""
  updated_projects(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): [project!]!

  """An aggregate relationship"""
  updated_projects_aggregate(
    """distinct select on columns"""
    distinct_on: [project_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_order_by!]

    """filter the rows returned"""
    where: project_bool_exp
  ): project_aggregate!

  """An array relationship"""
  updated_tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """An aggregate relationship"""
  updated_tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!
  user_name: String!

  """An array relationship"""
  visible_to(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): [visible_users!]!

  """An aggregate relationship"""
  visible_to_aggregate(
    """distinct select on columns"""
    distinct_on: [visible_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visible_users_order_by!]

    """filter the rows returned"""
    where: visible_users_bool_exp
  ): visible_users_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  account_users: account_user_bool_exp
  availabilities: availability_bool_exp
  banned: Boolean_comparison_exp
  country_id: Int_comparison_exp
  created: timestamptz_comparison_exp
  created_comments: comment_bool_exp
  created_files: file_bool_exp
  created_forms: form_bool_exp
  created_projects: project_bool_exp
  created_task_comments: task_comment_bool_exp
  created_tasks: task_bool_exp
  email: String_comparison_exp
  first_name: String_comparison_exp
  forgotten_password_code: String_comparison_exp
  full_name: String_comparison_exp
  id: bigint_comparison_exp
  last_name: String_comparison_exp
  last_visit: timestamptz_comparison_exp
  login_count: Int_comparison_exp
  lowercase_email: String_comparison_exp
  lowercase_user_name: String_comparison_exp
  modified: timestamptz_comparison_exp
  notes: String_comparison_exp
  owned_accounts: account_bool_exp
  password: String_comparison_exp
  phone: String_comparison_exp
  role: String_comparison_exp
  task_timers: task_timer_bool_exp
  task_users: task_user_bool_exp
  time_entries: time_entry_bool_exp
  time_entry_location: String_comparison_exp
  timezone: String_comparison_exp
  updated_forms: form_bool_exp
  updated_messages: message_bool_exp
  updated_projects: project_bool_exp
  updated_tasks: task_bool_exp
  user_name: String_comparison_exp
  visible_to: visible_users_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  idx_1943123_primary
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  country_id: Int
  id: bigint
  login_count: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  account_users: account_user_arr_rel_insert_input
  availabilities: availability_arr_rel_insert_input
  banned: Boolean
  country_id: Int
  created: timestamptz
  created_comments: comment_arr_rel_insert_input
  created_files: file_arr_rel_insert_input
  created_forms: form_arr_rel_insert_input
  created_projects: project_arr_rel_insert_input
  created_task_comments: task_comment_arr_rel_insert_input
  created_tasks: task_arr_rel_insert_input
  email: String
  first_name: String
  forgotten_password_code: String
  full_name: String
  id: bigint
  last_name: String
  last_visit: timestamptz
  login_count: Int
  lowercase_email: String
  lowercase_user_name: String
  modified: timestamptz
  notes: String
  owned_accounts: account_arr_rel_insert_input
  password: String
  phone: String
  role: String
  task_timers: task_timer_arr_rel_insert_input
  task_users: task_user_arr_rel_insert_input
  time_entries: time_entry_arr_rel_insert_input
  time_entry_location: String
  timezone: String
  updated_forms: form_arr_rel_insert_input
  updated_messages: message_arr_rel_insert_input
  updated_projects: project_arr_rel_insert_input
  updated_tasks: task_arr_rel_insert_input
  user_name: String
  visible_to: visible_users_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  forgotten_password_code: String
  full_name: String
  id: bigint
  last_name: String
  last_visit: timestamptz
  login_count: Int
  lowercase_email: String
  lowercase_user_name: String
  modified: timestamptz
  notes: String
  password: String
  phone: String
  role: String
  time_entry_location: String
  timezone: String
  user_name: String
}

"""aggregate min on columns"""
type users_min_fields {
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  forgotten_password_code: String
  full_name: String
  id: bigint
  last_name: String
  last_visit: timestamptz
  login_count: Int
  lowercase_email: String
  lowercase_user_name: String
  modified: timestamptz
  notes: String
  password: String
  phone: String
  role: String
  time_entry_location: String
  timezone: String
  user_name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  account_users_aggregate: account_user_aggregate_order_by
  availabilities_aggregate: availability_aggregate_order_by
  banned: order_by
  country_id: order_by
  created: order_by
  created_comments_aggregate: comment_aggregate_order_by
  created_files_aggregate: file_aggregate_order_by
  created_forms_aggregate: form_aggregate_order_by
  created_projects_aggregate: project_aggregate_order_by
  created_task_comments_aggregate: task_comment_aggregate_order_by
  created_tasks_aggregate: task_aggregate_order_by
  email: order_by
  first_name: order_by
  forgotten_password_code: order_by
  full_name: order_by
  id: order_by
  last_name: order_by
  last_visit: order_by
  login_count: order_by
  lowercase_email: order_by
  lowercase_user_name: order_by
  modified: order_by
  notes: order_by
  owned_accounts_aggregate: account_aggregate_order_by
  password: order_by
  phone: order_by
  role: order_by
  task_timers_aggregate: task_timer_aggregate_order_by
  task_users_aggregate: task_user_aggregate_order_by
  time_entries_aggregate: time_entry_aggregate_order_by
  time_entry_location: order_by
  timezone: order_by
  updated_forms_aggregate: form_aggregate_order_by
  updated_messages_aggregate: message_aggregate_order_by
  updated_projects_aggregate: project_aggregate_order_by
  updated_tasks_aggregate: task_aggregate_order_by
  user_name: order_by
  visible_to_aggregate: visible_users_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: bigint!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  banned

  """column name"""
  country_id

  """column name"""
  created

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  forgotten_password_code

  """column name"""
  full_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  last_visit

  """column name"""
  login_count

  """column name"""
  lowercase_email

  """column name"""
  lowercase_user_name

  """column name"""
  modified

  """column name"""
  notes

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  time_entry_location

  """column name"""
  timezone

  """column name"""
  user_name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  banned: Boolean
  country_id: Int
  created: timestamptz
  email: String
  first_name: String
  forgotten_password_code: String
  full_name: String
  id: bigint
  last_name: String
  last_visit: timestamptz
  login_count: Int
  lowercase_email: String
  lowercase_user_name: String
  modified: timestamptz
  notes: String
  password: String
  phone: String
  role: String
  time_entry_location: String
  timezone: String
  user_name: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  country_id: Int
  id: bigint
  login_count: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  banned

  """column name"""
  country_id

  """column name"""
  created

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  forgotten_password_code

  """column name"""
  full_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  last_visit

  """column name"""
  login_count

  """column name"""
  lowercase_email

  """column name"""
  lowercase_user_name

  """column name"""
  modified

  """column name"""
  notes

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  time_entry_location

  """column name"""
  timezone

  """column name"""
  user_name
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  country_id: Float
  id: Float
  login_count: Float
}

"""
columns and relationships of "visible_settings"
"""
type visible_settings {
  name: String
}

"""
aggregated selection of "visible_settings"
"""
type visible_settings_aggregate {
  aggregate: visible_settings_aggregate_fields
  nodes: [visible_settings!]!
}

"""
aggregate fields of "visible_settings"
"""
type visible_settings_aggregate_fields {
  count(columns: [visible_settings_select_column!], distinct: Boolean): Int!
  max: visible_settings_max_fields
  min: visible_settings_min_fields
}

"""
Boolean expression to filter rows from the table "visible_settings". All fields are combined with a logical 'AND'.
"""
input visible_settings_bool_exp {
  _and: [visible_settings_bool_exp!]
  _not: visible_settings_bool_exp
  _or: [visible_settings_bool_exp!]
  name: String_comparison_exp
}

"""aggregate max on columns"""
type visible_settings_max_fields {
  name: String
}

"""aggregate min on columns"""
type visible_settings_min_fields {
  name: String
}

"""Ordering options when selecting data from "visible_settings"."""
input visible_settings_order_by {
  name: order_by
}

"""
select columns of table "visible_settings"
"""
enum visible_settings_select_column {
  """column name"""
  name
}

"""
columns and relationships of "visible_users"
"""
type visible_users {
  user_id: bigint
  visible_user_id: bigint
}

"""
aggregated selection of "visible_users"
"""
type visible_users_aggregate {
  aggregate: visible_users_aggregate_fields
  nodes: [visible_users!]!
}

"""
aggregate fields of "visible_users"
"""
type visible_users_aggregate_fields {
  avg: visible_users_avg_fields
  count(columns: [visible_users_select_column!], distinct: Boolean): Int!
  max: visible_users_max_fields
  min: visible_users_min_fields
  stddev: visible_users_stddev_fields
  stddev_pop: visible_users_stddev_pop_fields
  stddev_samp: visible_users_stddev_samp_fields
  sum: visible_users_sum_fields
  var_pop: visible_users_var_pop_fields
  var_samp: visible_users_var_samp_fields
  variance: visible_users_variance_fields
}

"""
order by aggregate values of table "visible_users"
"""
input visible_users_aggregate_order_by {
  avg: visible_users_avg_order_by
  count: order_by
  max: visible_users_max_order_by
  min: visible_users_min_order_by
  stddev: visible_users_stddev_order_by
  stddev_pop: visible_users_stddev_pop_order_by
  stddev_samp: visible_users_stddev_samp_order_by
  sum: visible_users_sum_order_by
  var_pop: visible_users_var_pop_order_by
  var_samp: visible_users_var_samp_order_by
  variance: visible_users_variance_order_by
}

"""
input type for inserting array relation for remote table "visible_users"
"""
input visible_users_arr_rel_insert_input {
  data: [visible_users_insert_input!]!
}

"""aggregate avg on columns"""
type visible_users_avg_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by avg() on columns of table "visible_users"
"""
input visible_users_avg_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""
Boolean expression to filter rows from the table "visible_users". All fields are combined with a logical 'AND'.
"""
input visible_users_bool_exp {
  _and: [visible_users_bool_exp!]
  _not: visible_users_bool_exp
  _or: [visible_users_bool_exp!]
  user_id: bigint_comparison_exp
  visible_user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "visible_users"
"""
input visible_users_insert_input {
  user_id: bigint
  visible_user_id: bigint
}

"""aggregate max on columns"""
type visible_users_max_fields {
  user_id: bigint
  visible_user_id: bigint
}

"""
order by max() on columns of table "visible_users"
"""
input visible_users_max_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate min on columns"""
type visible_users_min_fields {
  user_id: bigint
  visible_user_id: bigint
}

"""
order by min() on columns of table "visible_users"
"""
input visible_users_min_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""Ordering options when selecting data from "visible_users"."""
input visible_users_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""
select columns of table "visible_users"
"""
enum visible_users_select_column {
  """column name"""
  user_id

  """column name"""
  visible_user_id
}

"""aggregate stddev on columns"""
type visible_users_stddev_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by stddev() on columns of table "visible_users"
"""
input visible_users_stddev_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate stddev_pop on columns"""
type visible_users_stddev_pop_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by stddev_pop() on columns of table "visible_users"
"""
input visible_users_stddev_pop_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate stddev_samp on columns"""
type visible_users_stddev_samp_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by stddev_samp() on columns of table "visible_users"
"""
input visible_users_stddev_samp_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate sum on columns"""
type visible_users_sum_fields {
  user_id: bigint
  visible_user_id: bigint
}

"""
order by sum() on columns of table "visible_users"
"""
input visible_users_sum_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate var_pop on columns"""
type visible_users_var_pop_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by var_pop() on columns of table "visible_users"
"""
input visible_users_var_pop_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate var_samp on columns"""
type visible_users_var_samp_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by var_samp() on columns of table "visible_users"
"""
input visible_users_var_samp_order_by {
  user_id: order_by
  visible_user_id: order_by
}

"""aggregate variance on columns"""
type visible_users_variance_fields {
  user_id: Float
  visible_user_id: Float
}

"""
order by variance() on columns of table "visible_users"
"""
input visible_users_variance_order_by {
  user_id: order_by
  visible_user_id: order_by
}

